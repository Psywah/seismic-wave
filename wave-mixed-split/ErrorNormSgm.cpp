// This code conforms with the UFC specification version 1.4.0
// and was automatically generated by FFC version 1.4.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   restrict_keyword:               ''
//   split:                          True

#include "ErrorNormSgm.h"

/// Constructor
errornormsgm_finite_element_0::errornormsgm_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
errornormsgm_finite_element_0::~errornormsgm_finite_element_0()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* errornormsgm_finite_element_0::signature() const
{
    return "FiniteElement('Discontinuous Lagrange', Domain(Cell('triangle', 2)), 6, None)";
}

/// Return the cell shape
ufc::shape errornormsgm_finite_element_0::cell_shape() const
{
    return ufc::triangle;
}

/// Return the topological dimension of the cell shape
std::size_t errornormsgm_finite_element_0::topological_dimension() const
{
    return 2;
}

/// Return the geometric dimension of the cell shape
std::size_t errornormsgm_finite_element_0::geometric_dimension() const
{
    return 2;
}

/// Return the dimension of the finite element function space
std::size_t errornormsgm_finite_element_0::space_dimension() const
{
    return 28;
}

/// Return the rank of the value space
std::size_t errornormsgm_finite_element_0::value_rank() const
{
    return 0;
}

/// Return the dimension of the value space for axis i
std::size_t errornormsgm_finite_element_0::value_dimension(std::size_t i) const
{
    return 1;
}

/// Evaluate basis function i at given point x in cell
void errornormsgm_finite_element_0::_evaluate_basis(std::size_t i,
                                    double* values,
                                    const double* x,
                                    const double* vertex_coordinates,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, -0.0173205080756888, -0.01, 0.0121716123890036, 0.0094280904158206, 0.00544331053951816, -0.0212594169703065, -0.0179674867055021, -0.0139175553567226, -0.00803530433166532, 0.017248787237282, 0.0152120004824378, 0.0128564869306645, 0.00995859195463939, 0.00574959574576069, -0.0120515300277022, -0.0109010190686153, -0.00961379516424303, -0.00812513988714842, -0.00629370629370629, -0.00363367302287175, 0.0103967436622596, 0.0095636131994221, 0.00865061362433823, 0.00762912411270201, 0.00644778670370204, 0.00499443410466712, 0.0028835378747794};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, 0.0173205080756888, -0.00999999999999999, 0.0121716123890037, -0.00942809041582066, 0.00544331053951821, 0.0212594169703065, -0.0179674867055022, 0.0139175553567226, -0.00803530433166534, 0.0172487872372821, -0.0152120004824377, 0.0128564869306645, -0.00995859195463939, 0.0057495957457607, 0.0120515300277022, -0.0109010190686153, 0.00961379516424302, -0.00812513988714843, 0.00629370629370631, -0.00363367302287175, 0.0103967436622596, -0.0095636131994221, 0.00865061362433821, -0.007629124112702, 0.00644778670370201, -0.00499443410466712, 0.00288353787477938};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, 0.0, 0.0199999999999999, 0.0, 0.0, 0.0163299316185545, 0.0, 0.0, 0.0, 0.0321412173266613, 0.0, 0.0, 0.0, 0.0, 0.0287479787288034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0218020381372306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0201847651234558};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731326, 0.0692820323027549, -0.0171428571428571, 0.0978075995544939, -0.0697005255741027, 0.0384919816723071, 0.0714316410202297, -0.0209449559309854, -0.00413550216314041, 0.00826488445542721, 0.0443540243244396, -0.00651942877818761, -0.0151522881682831, 0.0224068318979386, -0.0160167310060477, 0.0206597657617751, 0.00622915375349444, -0.0230731083941832, 0.0306433847172455, -0.0294905094905095, 0.0186874612604834, 0.0, 0.0191272263988442, -0.0317189166225735, 0.0381456205635101, -0.0386867202222121, 0.0332962273644474, -0.0201847651234558};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048496, -0.0123717914826348, -0.0214285714285715, -0.0312984318574381, 0.121218305346265, -0.113726309486362, -0.0131200973302462, 0.077824885272975, -0.047558274876115, 0.0156114484158068, 0.0, 0.0586748590036884, -0.0449977042573258, 0.017071871922239, -0.00205342705205747, 0.0, 0.0342603456442196, -0.00988847502607852, -0.026464741346712, 0.0465734265734266, -0.0358176340825931, 0.0, 0.0, 0.0317189166225735, -0.0686621170143181, 0.0928481285333091, -0.0932294366204528, 0.0605542953703675};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, 0.0824786098842323, 0.0476190476190476, 0.0625968637148761, -0.0538748023761178, 0.116642368703961, 0.0194371812299945, 0.00821370820822966, 0.0127246220404323, 0.0110198459405697, 0.0, 0.0173851434085002, 0.051425947722658, -0.0739781116630354, 0.0492822492493774, 0.0, 0.0, 0.0494423751303927, -0.0325005595485938, -0.0125874125874126, 0.0259548073062268, 0.0, 0.0, 0.0, 0.045774744676212, -0.108322816622194, 0.139844154930679, -0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048494, -0.0247435829652696, 0.0, -0.0117369119465392, 0.106066017177982, -0.131222664791956, 0.0, 0.0365510015266215, 0.0389691549988232, -0.0766797613364634, 0.0, 0.0, 0.0417835825246596, 0.0266747998784983, -0.0574959574576069, 0.0, 0.0, 0.0, 0.0585010071874687, -0.0440559440559441, 0.00778644219186812, 0.0, 0.0, 0.0, 0.0, 0.054161408311097, -0.116536795775566, 0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731327, 0.0197948663722157, 0.0685714285714286, 0.0, 0.00606091526731318, 0.125973758200278, 0.0, 0.0, 0.0508984881617284, 0.0550992297028479, 0.0, 0.0, 0.0, 0.0533495997569967, 0.0123205623123444, 0.0, 0.0, 0.0, 0.0, 0.0503496503496504, -0.0249166150139779, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0466147183102264, -0.0605542953703675};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731327, -0.069282032302755, -0.017142857142857, 0.0978075995544939, 0.0697005255741026, 0.038491981672307, -0.0714316410202298, -0.0209449559309853, 0.00413550216314051, 0.00826488445542718, 0.0443540243244396, 0.00651942877818762, -0.0151522881682831, -0.0224068318979386, -0.0160167310060477, -0.0206597657617751, 0.00622915375349444, 0.0230731083941832, 0.0306433847172454, 0.0294905094905094, 0.0186874612604833, 0.0, -0.0191272263988442, -0.0317189166225735, -0.0381456205635101, -0.0386867202222121, -0.0332962273644474, -0.0201847651234557};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048496, 0.0123717914826349, -0.0214285714285715, -0.0312984318574381, -0.121218305346265, -0.113726309486362, 0.0131200973302463, 0.077824885272975, 0.0475582748761149, 0.0156114484158068, 0.0, -0.0586748590036884, -0.0449977042573257, -0.017071871922239, -0.00205342705205735, 0.0, 0.0342603456442195, 0.00988847502607855, -0.026464741346712, -0.0465734265734264, -0.0358176340825931, 0.0, 0.0, 0.0317189166225734, 0.0686621170143181, 0.0928481285333091, 0.0932294366204528, 0.0605542953703674};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, -0.0824786098842321, 0.0476190476190477, 0.062596863714876, 0.053874802376118, 0.116642368703961, -0.0194371812299945, 0.00821370820822956, -0.012724622040432, 0.0110198459405696, 0.0, -0.0173851434085003, 0.051425947722658, 0.0739781116630354, 0.0492822492493773, 0.0, 0.0, -0.0494423751303927, -0.0325005595485938, 0.0125874125874124, 0.0259548073062269, 0.0, 0.0, 0.0, -0.0457747446762121, -0.108322816622194, -0.139844154930679, -0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048493, 0.0247435829652696, 0.0, -0.0117369119465392, -0.106066017177982, -0.131222664791956, 0.0, 0.0365510015266215, -0.0389691549988233, -0.0766797613364633, 0.0, 0.0, 0.0417835825246596, -0.0266747998784983, -0.0574959574576069, 0.0, 0.0, 0.0, 0.0585010071874687, 0.0440559440559442, 0.00778644219186817, 0.0, 0.0, 0.0, 0.0, 0.054161408311097, 0.116536795775566, 0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731329, -0.0197948663722158, 0.0685714285714287, 0.0, -0.00606091526731326, 0.125973758200278, 0.0, 0.0, -0.0508984881617285, 0.0550992297028479, 0.0, 0.0, 0.0, -0.0533495997569968, 0.0123205623123443, 0.0, 0.0, 0.0, 0.0, -0.0503496503496504, -0.0249166150139779, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0466147183102264, -0.0605542953703675};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731325, -0.0494871659305393, -0.0514285714285714, 0.0899829915901345, 0.0757614408414158, 0.0454905237945448, -0.00145778859224956, -0.0406578556307363, -0.0518528348147608, -0.0358144993068511, -0.0295693495496264, 0.00651942877818764, 0.0261721341088527, 0.0309427678590581, 0.0209449559309854, 0.0482061201108086, 0.0186874612604834, -0.00109871944734209, -0.0120716364037634, -0.0151048951048951, -0.0103819229224908, -0.0623804619735576, -0.0382544527976884, -0.0201847651234558, -0.00762912411270201, 0.0, 0.00332962273644472, 0.00288353787477937};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048498, -0.0123717914826352, 0.0214285714285713, -0.16822907123373, -0.0151522881682831, 0.00874817765279702, 0.0666938280954185, 0.0627321964403531, 0.00469220437740938, -0.0181368297771875, -0.036961686937033, -0.0586748590036885, -0.0243354931187578, 0.00960292795625939, 0.0164274164164592, -0.0602576501385106, 0.0233593265756043, 0.0310388243874132, 0.0109109021341708, -0.00755244755244756, -0.0103819229224908, 0.155951154933894, 0.0478180659971106, 0.00288353787477946, -0.007629124112702, -0.00386867202222118, 0.0016648113682224, 0.00288353787477942};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, 0.0, -0.0952380952380952, 0.132148934509183, 0.0, 0.0544331053951817, 0.0, -0.0082137082082295, 0.0, -0.0257129738613289, 0.0985644984987547, 0.0, -0.0293862558415189, 0.0, 0.0164274164164591, 0.0, -0.0622915375349447, 0.0, 0.0185717483134821, 0.0, -0.0103819229224909, -0.207934873245192, 0.0, 0.0173012272486764, 0.0, -0.00515822936296168, 0.0, 0.00288353787477947};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048497, 0.0123717914826345, 0.0214285714285714, -0.16822907123373, 0.0151522881682832, 0.00874817765279707, -0.0666938280954186, 0.0627321964403532, -0.00469220437740941, -0.0181368297771875, -0.0369616869370329, 0.0586748590036884, -0.0243354931187578, -0.00960292795625944, 0.0164274164164591, 0.060257650138511, 0.0233593265756043, -0.0310388243874132, 0.0109109021341708, 0.00755244755244758, -0.0103819229224907, 0.155951154933894, -0.0478180659971104, 0.00288353787477942, 0.00762912411270202, -0.00386867202222119, -0.00166481136822235, 0.00288353787477938};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731326, 0.0494871659305394, -0.0514285714285715, 0.0899829915901345, -0.0757614408414158, 0.0454905237945448, 0.0014577885922496, -0.0406578556307363, 0.0518528348147609, -0.0358144993068511, -0.0295693495496264, -0.00651942877818761, 0.0261721341088527, -0.0309427678590581, 0.0209449559309854, -0.0482061201108087, 0.0186874612604834, 0.00109871944734202, -0.0120716364037634, 0.0151048951048951, -0.0103819229224908, -0.0623804619735576, 0.0382544527976884, -0.0201847651234558, 0.00762912411270203, 0.0, -0.00332962273644472, 0.00288353787477937};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.296922995583236, -0.171428571428571, 0.082158383625775, 0.0454568645048493, 0.0524890659167824, 0.042275869175238, -0.0373723723474444, 0.0276760529379396, 0.0486709862375157, -0.133062072973319, -0.0325971438909379, -0.0573950309404665, -0.0906943195868943, -0.0710485760011856, 0.103298828808876, -0.0186874612604834, -0.0065923166840523, 0.0445721959523571, 0.0766033966033966, 0.0591769606581974, 0.0, 0.0956361319942208, 0.0951567498677203, 0.0534038687889141, 0.00773734404444239, -0.0199777364186684, -0.0201847651234558};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.148461497791618, -0.0857142857142858, -0.179965983180269, 0.0909137290096991, 0.0349927106111884, 0.230330597575435, 0.0583173282784298, -0.0782564255486574, -0.00183664099009501, 0.088708048648879, 0.065194287781876, 0.0725473191087495, -0.0106699199513993, -0.0484608784285544, -0.206597657617751, 0.0124583075069889, -0.0955885919187591, -0.0752155806696025, 0.0255344655344656, 0.0591769606581975, 0.0, -0.191272263988442, -0.0634378332451467, 0.0305164964508081, 0.0309493761777698, -0.00665924547288949, -0.0201847651234559};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.148461497791618, -0.0857142857142855, -0.179965983180269, -0.090913729009699, 0.0349927106111882, -0.230330597575435, 0.05831732827843, 0.0782564255486575, -0.001836640990095, 0.0887080486488794, -0.0651942877818761, 0.0725473191087498, 0.0106699199513992, -0.0484608784285543, 0.206597657617751, 0.012458307506989, 0.0955885919187591, -0.0752155806696026, -0.0255344655344655, 0.0591769606581973, 0.0, 0.191272263988442, -0.063437833245147, -0.030516496450808, 0.0309493761777698, 0.00665924547288946, -0.0201847651234558};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.296922995583236, -0.171428571428572, 0.0821583836257749, -0.0454568645048495, 0.0524890659167824, -0.0422758691752379, -0.0373723723474445, -0.0276760529379397, 0.0486709862375156, -0.133062072973319, 0.0325971438909381, -0.0573950309404665, 0.0906943195868944, -0.0710485760011858, -0.103298828808876, -0.0186874612604834, 0.00659231668405231, 0.0445721959523571, -0.0766033966033967, 0.0591769606581975, 0.0, -0.0956361319942211, 0.0951567498677204, -0.0534038687889141, 0.00773734404444248, 0.0199777364186685, -0.0201847651234558};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.171428571428571, 0.0547722557505167, -0.0909137290096988, -0.174963553055941, -0.0262401946604925, 0.0977431276779316, 0.211864956973195, 0.0863221265344617, 0.0, 0.117349718007377, 0.0449977042573257, 0.0448136637958771, 0.0451753951452625, 0.0, -0.137041382576878, -0.0197769500521572, -0.0501437204464018, -0.146013986013986, -0.137041382576878, 0.0, 0.0, -0.126875666490294, -0.137324234028636, -0.0464240642666546, 0.0466147183102264, 0.0605542953703675};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0909137290096985, 0.0, 0.0, -0.046947647786157, 0.0, -0.0524890659167825, 0.0, -0.351136025901814, 0.0, 0.157032804653116, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.205562073865317, 0.0, 0.153216923586227, 0.0, -0.137041382576878, 0.0, 0.0, 0.19031349973544, 0.0, -0.0928481285333092, 0.0, 0.0605542953703673};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.171428571428571, 0.0547722557505166, 0.0909137290096993, -0.174963553055941, 0.0262401946604926, 0.0977431276779317, -0.211864956973194, 0.0863221265344616, 0.0, -0.117349718007377, 0.0449977042573258, -0.0448136637958771, 0.0451753951452626, 0.0, -0.137041382576878, 0.019776950052157, -0.0501437204464017, 0.146013986013986, -0.137041382576878, 0.0, 0.0, -0.126875666490294, 0.137324234028636, -0.0464240642666546, -0.0466147183102265, 0.0605542953703676};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.148461497791618, -0.0857142857142859, -0.062596863714876, -0.181827458019398, -0.0699854212223768, 0.0583115436899834, -0.00821370820822939, -0.190869330606481, -0.150604561187784, 0.0, 0.0521554302255009, -0.0514259477226579, 0.0554835837472766, 0.106778206706984, 0.0, 0.0, 0.148327125391178, 0.0325005595485939, 0.113286713286713, 0.160919805298607, 0.0, 0.0, 0.0, 0.137324234028636, 0.108322816622194, -0.0466147183102263, -0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.148461497791618, -0.0857142857142858, -0.0625968637148761, 0.181827458019398, -0.0699854212223763, -0.0583115436899836, -0.0082137082082297, 0.190869330606481, -0.150604561187784, 0.0, -0.0521554302255009, -0.0514259477226581, -0.0554835837472766, 0.106778206706984, 0.0, 0.0, -0.148327125391178, 0.0325005595485937, -0.113286713286713, 0.160919805298607, 0.0, 0.0, 0.0, -0.137324234028636, 0.108322816622194, 0.0466147183102265, -0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 27:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.342857142857143, 0.0234738238930786, 0.0, 0.104978131833565, 0.0, -0.073102003053243, 0.0, -0.0312228968316139, 0.0, 0.0, -0.0835671650493192, 0.0, -0.168381018268706, 0.0, 0.0, 0.0, -0.117002014374937, 0.0, -0.0934373063024168, 0.0, 0.0, 0.0, 0.0, -0.108322816622194, 0.0, 0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

/// Evaluate all basis functions at given point x in cell
void errornormsgm_finite_element_0::_evaluate_basis_all(double* values,
                                        const double* x,
                                        const double* vertex_coordinates,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 28; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
}

/// Evaluate order n derivatives of basis function i at given point x in cell
void errornormsgm_finite_element_0::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double* values,
                                                const double* x,
                                                const double* vertex_coordinates,
                                                int cell_orientation)
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 6)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[64][6];
    for (unsigned int row = 0; row < 64; row++)
    {
      for (unsigned int col = 0; col < 6; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K[0], K[1]}, {K[2], K[3]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[64][64];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, -0.0173205080756888, -0.01, 0.0121716123890036, 0.0094280904158206, 0.00544331053951816, -0.0212594169703065, -0.0179674867055021, -0.0139175553567226, -0.00803530433166532, 0.017248787237282, 0.0152120004824378, 0.0128564869306645, 0.00995859195463939, 0.00574959574576069, -0.0120515300277022, -0.0109010190686153, -0.00961379516424303, -0.00812513988714842, -0.00629370629370629, -0.00363367302287175, 0.0103967436622596, 0.0095636131994221, 0.00865061362433823, 0.00762912411270201, 0.00644778670370204, 0.00499443410466712, 0.0028835378747794};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, 0.0173205080756888, -0.00999999999999999, 0.0121716123890037, -0.00942809041582066, 0.00544331053951821, 0.0212594169703065, -0.0179674867055022, 0.0139175553567226, -0.00803530433166534, 0.0172487872372821, -0.0152120004824377, 0.0128564869306645, -0.00995859195463939, 0.0057495957457607, 0.0120515300277022, -0.0109010190686153, 0.00961379516424302, -0.00812513988714843, 0.00629370629370631, -0.00363367302287175, 0.0103967436622596, -0.0095636131994221, 0.00865061362433821, -0.007629124112702, 0.00644778670370201, -0.00499443410466712, 0.00288353787477938};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, 0.0, 0.0199999999999999, 0.0, 0.0, 0.0163299316185545, 0.0, 0.0, 0.0, 0.0321412173266613, 0.0, 0.0, 0.0, 0.0, 0.0287479787288034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0218020381372306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0201847651234558};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731326, 0.0692820323027549, -0.0171428571428571, 0.0978075995544939, -0.0697005255741027, 0.0384919816723071, 0.0714316410202297, -0.0209449559309854, -0.00413550216314041, 0.00826488445542721, 0.0443540243244396, -0.00651942877818761, -0.0151522881682831, 0.0224068318979386, -0.0160167310060477, 0.0206597657617751, 0.00622915375349444, -0.0230731083941832, 0.0306433847172455, -0.0294905094905095, 0.0186874612604834, 0.0, 0.0191272263988442, -0.0317189166225735, 0.0381456205635101, -0.0386867202222121, 0.0332962273644474, -0.0201847651234558};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048496, -0.0123717914826348, -0.0214285714285715, -0.0312984318574381, 0.121218305346265, -0.113726309486362, -0.0131200973302462, 0.077824885272975, -0.047558274876115, 0.0156114484158068, 0.0, 0.0586748590036884, -0.0449977042573258, 0.017071871922239, -0.00205342705205747, 0.0, 0.0342603456442196, -0.00988847502607852, -0.026464741346712, 0.0465734265734266, -0.0358176340825931, 0.0, 0.0, 0.0317189166225735, -0.0686621170143181, 0.0928481285333091, -0.0932294366204528, 0.0605542953703675};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, 0.0824786098842323, 0.0476190476190476, 0.0625968637148761, -0.0538748023761178, 0.116642368703961, 0.0194371812299945, 0.00821370820822966, 0.0127246220404323, 0.0110198459405697, 0.0, 0.0173851434085002, 0.051425947722658, -0.0739781116630354, 0.0492822492493774, 0.0, 0.0, 0.0494423751303927, -0.0325005595485938, -0.0125874125874126, 0.0259548073062268, 0.0, 0.0, 0.0, 0.045774744676212, -0.108322816622194, 0.139844154930679, -0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048494, -0.0247435829652696, 0.0, -0.0117369119465392, 0.106066017177982, -0.131222664791956, 0.0, 0.0365510015266215, 0.0389691549988232, -0.0766797613364634, 0.0, 0.0, 0.0417835825246596, 0.0266747998784983, -0.0574959574576069, 0.0, 0.0, 0.0, 0.0585010071874687, -0.0440559440559441, 0.00778644219186812, 0.0, 0.0, 0.0, 0.0, 0.054161408311097, -0.116536795775566, 0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731327, 0.0197948663722157, 0.0685714285714286, 0.0, 0.00606091526731318, 0.125973758200278, 0.0, 0.0, 0.0508984881617284, 0.0550992297028479, 0.0, 0.0, 0.0, 0.0533495997569967, 0.0123205623123444, 0.0, 0.0, 0.0, 0.0, 0.0503496503496504, -0.0249166150139779, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0466147183102264, -0.0605542953703675};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731327, -0.069282032302755, -0.017142857142857, 0.0978075995544939, 0.0697005255741026, 0.038491981672307, -0.0714316410202298, -0.0209449559309853, 0.00413550216314051, 0.00826488445542718, 0.0443540243244396, 0.00651942877818762, -0.0151522881682831, -0.0224068318979386, -0.0160167310060477, -0.0206597657617751, 0.00622915375349444, 0.0230731083941832, 0.0306433847172454, 0.0294905094905094, 0.0186874612604833, 0.0, -0.0191272263988442, -0.0317189166225735, -0.0381456205635101, -0.0386867202222121, -0.0332962273644474, -0.0201847651234557};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048496, 0.0123717914826349, -0.0214285714285715, -0.0312984318574381, -0.121218305346265, -0.113726309486362, 0.0131200973302463, 0.077824885272975, 0.0475582748761149, 0.0156114484158068, 0.0, -0.0586748590036884, -0.0449977042573257, -0.017071871922239, -0.00205342705205735, 0.0, 0.0342603456442195, 0.00988847502607855, -0.026464741346712, -0.0465734265734264, -0.0358176340825931, 0.0, 0.0, 0.0317189166225734, 0.0686621170143181, 0.0928481285333091, 0.0932294366204528, 0.0605542953703674};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, -0.0824786098842321, 0.0476190476190477, 0.062596863714876, 0.053874802376118, 0.116642368703961, -0.0194371812299945, 0.00821370820822956, -0.012724622040432, 0.0110198459405696, 0.0, -0.0173851434085003, 0.051425947722658, 0.0739781116630354, 0.0492822492493773, 0.0, 0.0, -0.0494423751303927, -0.0325005595485938, 0.0125874125874124, 0.0259548073062269, 0.0, 0.0, 0.0, -0.0457747446762121, -0.108322816622194, -0.139844154930679, -0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048493, 0.0247435829652696, 0.0, -0.0117369119465392, -0.106066017177982, -0.131222664791956, 0.0, 0.0365510015266215, -0.0389691549988233, -0.0766797613364633, 0.0, 0.0, 0.0417835825246596, -0.0266747998784983, -0.0574959574576069, 0.0, 0.0, 0.0, 0.0585010071874687, 0.0440559440559442, 0.00778644219186817, 0.0, 0.0, 0.0, 0.0, 0.054161408311097, 0.116536795775566, 0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731329, -0.0197948663722158, 0.0685714285714287, 0.0, -0.00606091526731326, 0.125973758200278, 0.0, 0.0, -0.0508984881617285, 0.0550992297028479, 0.0, 0.0, 0.0, -0.0533495997569968, 0.0123205623123443, 0.0, 0.0, 0.0, 0.0, -0.0503496503496504, -0.0249166150139779, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0466147183102264, -0.0605542953703675};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731325, -0.0494871659305393, -0.0514285714285714, 0.0899829915901345, 0.0757614408414158, 0.0454905237945448, -0.00145778859224956, -0.0406578556307363, -0.0518528348147608, -0.0358144993068511, -0.0295693495496264, 0.00651942877818764, 0.0261721341088527, 0.0309427678590581, 0.0209449559309854, 0.0482061201108086, 0.0186874612604834, -0.00109871944734209, -0.0120716364037634, -0.0151048951048951, -0.0103819229224908, -0.0623804619735576, -0.0382544527976884, -0.0201847651234558, -0.00762912411270201, 0.0, 0.00332962273644472, 0.00288353787477937};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048498, -0.0123717914826352, 0.0214285714285713, -0.16822907123373, -0.0151522881682831, 0.00874817765279702, 0.0666938280954185, 0.0627321964403531, 0.00469220437740938, -0.0181368297771875, -0.036961686937033, -0.0586748590036885, -0.0243354931187578, 0.00960292795625939, 0.0164274164164592, -0.0602576501385106, 0.0233593265756043, 0.0310388243874132, 0.0109109021341708, -0.00755244755244756, -0.0103819229224908, 0.155951154933894, 0.0478180659971106, 0.00288353787477946, -0.007629124112702, -0.00386867202222118, 0.0016648113682224, 0.00288353787477942};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, 0.0, -0.0952380952380952, 0.132148934509183, 0.0, 0.0544331053951817, 0.0, -0.0082137082082295, 0.0, -0.0257129738613289, 0.0985644984987547, 0.0, -0.0293862558415189, 0.0, 0.0164274164164591, 0.0, -0.0622915375349447, 0.0, 0.0185717483134821, 0.0, -0.0103819229224909, -0.207934873245192, 0.0, 0.0173012272486764, 0.0, -0.00515822936296168, 0.0, 0.00288353787477947};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048497, 0.0123717914826345, 0.0214285714285714, -0.16822907123373, 0.0151522881682832, 0.00874817765279707, -0.0666938280954186, 0.0627321964403532, -0.00469220437740941, -0.0181368297771875, -0.0369616869370329, 0.0586748590036884, -0.0243354931187578, -0.00960292795625944, 0.0164274164164591, 0.060257650138511, 0.0233593265756043, -0.0310388243874132, 0.0109109021341708, 0.00755244755244758, -0.0103819229224907, 0.155951154933894, -0.0478180659971104, 0.00288353787477942, 0.00762912411270202, -0.00386867202222119, -0.00166481136822235, 0.00288353787477938};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731326, 0.0494871659305394, -0.0514285714285715, 0.0899829915901345, -0.0757614408414158, 0.0454905237945448, 0.0014577885922496, -0.0406578556307363, 0.0518528348147609, -0.0358144993068511, -0.0295693495496264, -0.00651942877818761, 0.0261721341088527, -0.0309427678590581, 0.0209449559309854, -0.0482061201108087, 0.0186874612604834, 0.00109871944734202, -0.0120716364037634, 0.0151048951048951, -0.0103819229224908, -0.0623804619735576, 0.0382544527976884, -0.0201847651234558, 0.00762912411270203, 0.0, -0.00332962273644472, 0.00288353787477937};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.296922995583236, -0.171428571428571, 0.082158383625775, 0.0454568645048493, 0.0524890659167824, 0.042275869175238, -0.0373723723474444, 0.0276760529379396, 0.0486709862375157, -0.133062072973319, -0.0325971438909379, -0.0573950309404665, -0.0906943195868943, -0.0710485760011856, 0.103298828808876, -0.0186874612604834, -0.0065923166840523, 0.0445721959523571, 0.0766033966033966, 0.0591769606581974, 0.0, 0.0956361319942208, 0.0951567498677203, 0.0534038687889141, 0.00773734404444239, -0.0199777364186684, -0.0201847651234558};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.148461497791618, -0.0857142857142858, -0.179965983180269, 0.0909137290096991, 0.0349927106111884, 0.230330597575435, 0.0583173282784298, -0.0782564255486574, -0.00183664099009501, 0.088708048648879, 0.065194287781876, 0.0725473191087495, -0.0106699199513993, -0.0484608784285544, -0.206597657617751, 0.0124583075069889, -0.0955885919187591, -0.0752155806696025, 0.0255344655344656, 0.0591769606581975, 0.0, -0.191272263988442, -0.0634378332451467, 0.0305164964508081, 0.0309493761777698, -0.00665924547288949, -0.0201847651234559};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.148461497791618, -0.0857142857142855, -0.179965983180269, -0.090913729009699, 0.0349927106111882, -0.230330597575435, 0.05831732827843, 0.0782564255486575, -0.001836640990095, 0.0887080486488794, -0.0651942877818761, 0.0725473191087498, 0.0106699199513992, -0.0484608784285543, 0.206597657617751, 0.012458307506989, 0.0955885919187591, -0.0752155806696026, -0.0255344655344655, 0.0591769606581973, 0.0, 0.191272263988442, -0.063437833245147, -0.030516496450808, 0.0309493761777698, 0.00665924547288946, -0.0201847651234558};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.296922995583236, -0.171428571428572, 0.0821583836257749, -0.0454568645048495, 0.0524890659167824, -0.0422758691752379, -0.0373723723474445, -0.0276760529379397, 0.0486709862375156, -0.133062072973319, 0.0325971438909381, -0.0573950309404665, 0.0906943195868944, -0.0710485760011858, -0.103298828808876, -0.0186874612604834, 0.00659231668405231, 0.0445721959523571, -0.0766033966033967, 0.0591769606581975, 0.0, -0.0956361319942211, 0.0951567498677204, -0.0534038687889141, 0.00773734404444248, 0.0199777364186685, -0.0201847651234558};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.171428571428571, 0.0547722557505167, -0.0909137290096988, -0.174963553055941, -0.0262401946604925, 0.0977431276779316, 0.211864956973195, 0.0863221265344617, 0.0, 0.117349718007377, 0.0449977042573257, 0.0448136637958771, 0.0451753951452625, 0.0, -0.137041382576878, -0.0197769500521572, -0.0501437204464018, -0.146013986013986, -0.137041382576878, 0.0, 0.0, -0.126875666490294, -0.137324234028636, -0.0464240642666546, 0.0466147183102264, 0.0605542953703675};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0909137290096985, 0.0, 0.0, -0.046947647786157, 0.0, -0.0524890659167825, 0.0, -0.351136025901814, 0.0, 0.157032804653116, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.205562073865317, 0.0, 0.153216923586227, 0.0, -0.137041382576878, 0.0, 0.0, 0.19031349973544, 0.0, -0.0928481285333092, 0.0, 0.0605542953703673};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.171428571428571, 0.0547722557505166, 0.0909137290096993, -0.174963553055941, 0.0262401946604926, 0.0977431276779317, -0.211864956973194, 0.0863221265344616, 0.0, -0.117349718007377, 0.0449977042573258, -0.0448136637958771, 0.0451753951452626, 0.0, -0.137041382576878, 0.019776950052157, -0.0501437204464017, 0.146013986013986, -0.137041382576878, 0.0, 0.0, -0.126875666490294, 0.137324234028636, -0.0464240642666546, -0.0466147183102265, 0.0605542953703676};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.148461497791618, -0.0857142857142859, -0.062596863714876, -0.181827458019398, -0.0699854212223768, 0.0583115436899834, -0.00821370820822939, -0.190869330606481, -0.150604561187784, 0.0, 0.0521554302255009, -0.0514259477226579, 0.0554835837472766, 0.106778206706984, 0.0, 0.0, 0.148327125391178, 0.0325005595485939, 0.113286713286713, 0.160919805298607, 0.0, 0.0, 0.0, 0.137324234028636, 0.108322816622194, -0.0466147183102263, -0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.148461497791618, -0.0857142857142858, -0.0625968637148761, 0.181827458019398, -0.0699854212223763, -0.0583115436899836, -0.0082137082082297, 0.190869330606481, -0.150604561187784, 0.0, -0.0521554302255009, -0.0514259477226581, -0.0554835837472766, 0.106778206706984, 0.0, 0.0, -0.148327125391178, 0.0325005595485937, -0.113286713286713, 0.160919805298607, 0.0, 0.0, 0.0, -0.137324234028636, 0.108322816622194, 0.0466147183102265, -0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 27:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.342857142857143, 0.0234738238930786, 0.0, 0.104978131833565, 0.0, -0.073102003053243, 0.0, -0.0312228968316139, 0.0, 0.0, -0.0835671650493192, 0.0, -0.168381018268706, 0.0, 0.0, 0.0, -0.117002014374937, 0.0, -0.0934373063024168, 0.0, 0.0, 0.0, 0.0, -0.108322816622194, 0.0, 0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

/// Evaluate order n derivatives of all basis functions at given point x in cell
void errornormsgm_finite_element_0::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double* values,
                                                    const double* x,
                                                    const double* vertex_coordinates,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 28; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 6)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[64];
    for (unsigned int r = 0; r < 64; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 28; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

/// Evaluate linear functional for dof i on the function f
double errornormsgm_finite_element_0::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double* vertex_coordinates,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.833333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.833333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.166666666666667*vertex_coordinates[2] + 0.833333333333333*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[3] + 0.833333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 11:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 12:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 13:
      {
        y[0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2];
      y[1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 14:
      {
        y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
      y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 15:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 16:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 17:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[2];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 18:
      {
        y[0] = 0.666666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.666666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 19:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 20:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 21:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 22:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 23:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 24:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 25:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 26:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 27:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void errornormsgm_finite_element_0::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const double* vertex_coordinates,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.833333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.833333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[2] + 0.833333333333333*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[3] + 0.833333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2];
    y[1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
    y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[2];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.666666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[20] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[21] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[22] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[23] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[24] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[25] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[26] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[27] = vals[0];
}

/// Interpolate vertex values from dof values
void errornormsgm_finite_element_0::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const double* vertex_coordinates,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
}

/// Map coordinate xhat from reference cell to coordinate x in cell
void errornormsgm_finite_element_0::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void errornormsgm_finite_element_0::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
}

/// Return the number of sub elements (for a mixed element)
std::size_t errornormsgm_finite_element_0::num_sub_elements() const
{
    return 0;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* errornormsgm_finite_element_0::create_sub_element(std::size_t i) const
{
    return 0;
}

/// Create a new class instance
ufc::finite_element* errornormsgm_finite_element_0::create() const
{
    return new errornormsgm_finite_element_0();
}


/// Constructor
errornormsgm_finite_element_1::errornormsgm_finite_element_1() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
errornormsgm_finite_element_1::~errornormsgm_finite_element_1()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* errornormsgm_finite_element_1::signature() const
{
    return "VectorElement('Discontinuous Lagrange', Domain(Cell('triangle', 2)), 6, 2, None)";
}

/// Return the cell shape
ufc::shape errornormsgm_finite_element_1::cell_shape() const
{
    return ufc::triangle;
}

/// Return the topological dimension of the cell shape
std::size_t errornormsgm_finite_element_1::topological_dimension() const
{
    return 2;
}

/// Return the geometric dimension of the cell shape
std::size_t errornormsgm_finite_element_1::geometric_dimension() const
{
    return 2;
}

/// Return the dimension of the finite element function space
std::size_t errornormsgm_finite_element_1::space_dimension() const
{
    return 56;
}

/// Return the rank of the value space
std::size_t errornormsgm_finite_element_1::value_rank() const
{
    return 1;
}

/// Return the dimension of the value space for axis i
std::size_t errornormsgm_finite_element_1::value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

/// Evaluate basis function i at given point x in cell
void errornormsgm_finite_element_1::_evaluate_basis(std::size_t i,
                                    double* values,
                                    const double* x,
                                    const double* vertex_coordinates,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, -0.0173205080756888, -0.01, 0.0121716123890036, 0.0094280904158206, 0.00544331053951816, -0.0212594169703065, -0.0179674867055021, -0.0139175553567226, -0.00803530433166532, 0.017248787237282, 0.0152120004824378, 0.0128564869306645, 0.00995859195463939, 0.00574959574576069, -0.0120515300277022, -0.0109010190686153, -0.00961379516424303, -0.00812513988714842, -0.00629370629370629, -0.00363367302287175, 0.0103967436622596, 0.0095636131994221, 0.00865061362433823, 0.00762912411270201, 0.00644778670370204, 0.00499443410466712, 0.0028835378747794};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, 0.0173205080756888, -0.00999999999999999, 0.0121716123890037, -0.00942809041582066, 0.00544331053951821, 0.0212594169703065, -0.0179674867055022, 0.0139175553567226, -0.00803530433166534, 0.0172487872372821, -0.0152120004824377, 0.0128564869306645, -0.00995859195463939, 0.0057495957457607, 0.0120515300277022, -0.0109010190686153, 0.00961379516424302, -0.00812513988714843, 0.00629370629370631, -0.00363367302287175, 0.0103967436622596, -0.0095636131994221, 0.00865061362433821, -0.007629124112702, 0.00644778670370201, -0.00499443410466712, 0.00288353787477938};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, 0.0, 0.0199999999999999, 0.0, 0.0, 0.0163299316185545, 0.0, 0.0, 0.0, 0.0321412173266613, 0.0, 0.0, 0.0, 0.0, 0.0287479787288034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0218020381372306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0201847651234558};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731326, 0.0692820323027549, -0.0171428571428571, 0.0978075995544939, -0.0697005255741027, 0.0384919816723071, 0.0714316410202297, -0.0209449559309854, -0.00413550216314041, 0.00826488445542721, 0.0443540243244396, -0.00651942877818761, -0.0151522881682831, 0.0224068318979386, -0.0160167310060477, 0.0206597657617751, 0.00622915375349444, -0.0230731083941832, 0.0306433847172455, -0.0294905094905095, 0.0186874612604834, 0.0, 0.0191272263988442, -0.0317189166225735, 0.0381456205635101, -0.0386867202222121, 0.0332962273644474, -0.0201847651234558};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048496, -0.0123717914826348, -0.0214285714285715, -0.0312984318574381, 0.121218305346265, -0.113726309486362, -0.0131200973302462, 0.077824885272975, -0.047558274876115, 0.0156114484158068, 0.0, 0.0586748590036884, -0.0449977042573258, 0.017071871922239, -0.00205342705205747, 0.0, 0.0342603456442196, -0.00988847502607852, -0.026464741346712, 0.0465734265734266, -0.0358176340825931, 0.0, 0.0, 0.0317189166225735, -0.0686621170143181, 0.0928481285333091, -0.0932294366204528, 0.0605542953703675};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, 0.0824786098842323, 0.0476190476190476, 0.0625968637148761, -0.0538748023761178, 0.116642368703961, 0.0194371812299945, 0.00821370820822966, 0.0127246220404323, 0.0110198459405697, 0.0, 0.0173851434085002, 0.051425947722658, -0.0739781116630354, 0.0492822492493774, 0.0, 0.0, 0.0494423751303927, -0.0325005595485938, -0.0125874125874126, 0.0259548073062268, 0.0, 0.0, 0.0, 0.045774744676212, -0.108322816622194, 0.139844154930679, -0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048494, -0.0247435829652696, 0.0, -0.0117369119465392, 0.106066017177982, -0.131222664791956, 0.0, 0.0365510015266215, 0.0389691549988232, -0.0766797613364634, 0.0, 0.0, 0.0417835825246596, 0.0266747998784983, -0.0574959574576069, 0.0, 0.0, 0.0, 0.0585010071874687, -0.0440559440559441, 0.00778644219186812, 0.0, 0.0, 0.0, 0.0, 0.054161408311097, -0.116536795775566, 0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731327, 0.0197948663722157, 0.0685714285714286, 0.0, 0.00606091526731318, 0.125973758200278, 0.0, 0.0, 0.0508984881617284, 0.0550992297028479, 0.0, 0.0, 0.0, 0.0533495997569967, 0.0123205623123444, 0.0, 0.0, 0.0, 0.0, 0.0503496503496504, -0.0249166150139779, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0466147183102264, -0.0605542953703675};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731327, -0.069282032302755, -0.017142857142857, 0.0978075995544939, 0.0697005255741026, 0.038491981672307, -0.0714316410202298, -0.0209449559309853, 0.00413550216314051, 0.00826488445542718, 0.0443540243244396, 0.00651942877818762, -0.0151522881682831, -0.0224068318979386, -0.0160167310060477, -0.0206597657617751, 0.00622915375349444, 0.0230731083941832, 0.0306433847172454, 0.0294905094905094, 0.0186874612604833, 0.0, -0.0191272263988442, -0.0317189166225735, -0.0381456205635101, -0.0386867202222121, -0.0332962273644474, -0.0201847651234557};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048496, 0.0123717914826349, -0.0214285714285715, -0.0312984318574381, -0.121218305346265, -0.113726309486362, 0.0131200973302463, 0.077824885272975, 0.0475582748761149, 0.0156114484158068, 0.0, -0.0586748590036884, -0.0449977042573257, -0.017071871922239, -0.00205342705205735, 0.0, 0.0342603456442195, 0.00988847502607855, -0.026464741346712, -0.0465734265734264, -0.0358176340825931, 0.0, 0.0, 0.0317189166225734, 0.0686621170143181, 0.0928481285333091, 0.0932294366204528, 0.0605542953703674};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, -0.0824786098842321, 0.0476190476190477, 0.062596863714876, 0.053874802376118, 0.116642368703961, -0.0194371812299945, 0.00821370820822956, -0.012724622040432, 0.0110198459405696, 0.0, -0.0173851434085003, 0.051425947722658, 0.0739781116630354, 0.0492822492493773, 0.0, 0.0, -0.0494423751303927, -0.0325005595485938, 0.0125874125874124, 0.0259548073062269, 0.0, 0.0, 0.0, -0.0457747446762121, -0.108322816622194, -0.139844154930679, -0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048493, 0.0247435829652696, 0.0, -0.0117369119465392, -0.106066017177982, -0.131222664791956, 0.0, 0.0365510015266215, -0.0389691549988233, -0.0766797613364633, 0.0, 0.0, 0.0417835825246596, -0.0266747998784983, -0.0574959574576069, 0.0, 0.0, 0.0, 0.0585010071874687, 0.0440559440559442, 0.00778644219186817, 0.0, 0.0, 0.0, 0.0, 0.054161408311097, 0.116536795775566, 0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731329, -0.0197948663722158, 0.0685714285714287, 0.0, -0.00606091526731326, 0.125973758200278, 0.0, 0.0, -0.0508984881617285, 0.0550992297028479, 0.0, 0.0, 0.0, -0.0533495997569968, 0.0123205623123443, 0.0, 0.0, 0.0, 0.0, -0.0503496503496504, -0.0249166150139779, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0466147183102264, -0.0605542953703675};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731325, -0.0494871659305393, -0.0514285714285714, 0.0899829915901345, 0.0757614408414158, 0.0454905237945448, -0.00145778859224956, -0.0406578556307363, -0.0518528348147608, -0.0358144993068511, -0.0295693495496264, 0.00651942877818764, 0.0261721341088527, 0.0309427678590581, 0.0209449559309854, 0.0482061201108086, 0.0186874612604834, -0.00109871944734209, -0.0120716364037634, -0.0151048951048951, -0.0103819229224908, -0.0623804619735576, -0.0382544527976884, -0.0201847651234558, -0.00762912411270201, 0.0, 0.00332962273644472, 0.00288353787477937};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048498, -0.0123717914826352, 0.0214285714285713, -0.16822907123373, -0.0151522881682831, 0.00874817765279702, 0.0666938280954185, 0.0627321964403531, 0.00469220437740938, -0.0181368297771875, -0.036961686937033, -0.0586748590036885, -0.0243354931187578, 0.00960292795625939, 0.0164274164164592, -0.0602576501385106, 0.0233593265756043, 0.0310388243874132, 0.0109109021341708, -0.00755244755244756, -0.0103819229224908, 0.155951154933894, 0.0478180659971106, 0.00288353787477946, -0.007629124112702, -0.00386867202222118, 0.0016648113682224, 0.00288353787477942};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, 0.0, -0.0952380952380952, 0.132148934509183, 0.0, 0.0544331053951817, 0.0, -0.0082137082082295, 0.0, -0.0257129738613289, 0.0985644984987547, 0.0, -0.0293862558415189, 0.0, 0.0164274164164591, 0.0, -0.0622915375349447, 0.0, 0.0185717483134821, 0.0, -0.0103819229224909, -0.207934873245192, 0.0, 0.0173012272486764, 0.0, -0.00515822936296168, 0.0, 0.00288353787477947};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048497, 0.0123717914826345, 0.0214285714285714, -0.16822907123373, 0.0151522881682832, 0.00874817765279707, -0.0666938280954186, 0.0627321964403532, -0.00469220437740941, -0.0181368297771875, -0.0369616869370329, 0.0586748590036884, -0.0243354931187578, -0.00960292795625944, 0.0164274164164591, 0.060257650138511, 0.0233593265756043, -0.0310388243874132, 0.0109109021341708, 0.00755244755244758, -0.0103819229224907, 0.155951154933894, -0.0478180659971104, 0.00288353787477942, 0.00762912411270202, -0.00386867202222119, -0.00166481136822235, 0.00288353787477938};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731326, 0.0494871659305394, -0.0514285714285715, 0.0899829915901345, -0.0757614408414158, 0.0454905237945448, 0.0014577885922496, -0.0406578556307363, 0.0518528348147609, -0.0358144993068511, -0.0295693495496264, -0.00651942877818761, 0.0261721341088527, -0.0309427678590581, 0.0209449559309854, -0.0482061201108087, 0.0186874612604834, 0.00109871944734202, -0.0120716364037634, 0.0151048951048951, -0.0103819229224908, -0.0623804619735576, 0.0382544527976884, -0.0201847651234558, 0.00762912411270203, 0.0, -0.00332962273644472, 0.00288353787477937};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.296922995583236, -0.171428571428571, 0.082158383625775, 0.0454568645048493, 0.0524890659167824, 0.042275869175238, -0.0373723723474444, 0.0276760529379396, 0.0486709862375157, -0.133062072973319, -0.0325971438909379, -0.0573950309404665, -0.0906943195868943, -0.0710485760011856, 0.103298828808876, -0.0186874612604834, -0.0065923166840523, 0.0445721959523571, 0.0766033966033966, 0.0591769606581974, 0.0, 0.0956361319942208, 0.0951567498677203, 0.0534038687889141, 0.00773734404444239, -0.0199777364186684, -0.0201847651234558};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.148461497791618, -0.0857142857142858, -0.179965983180269, 0.0909137290096991, 0.0349927106111884, 0.230330597575435, 0.0583173282784298, -0.0782564255486574, -0.00183664099009501, 0.088708048648879, 0.065194287781876, 0.0725473191087495, -0.0106699199513993, -0.0484608784285544, -0.206597657617751, 0.0124583075069889, -0.0955885919187591, -0.0752155806696025, 0.0255344655344656, 0.0591769606581975, 0.0, -0.191272263988442, -0.0634378332451467, 0.0305164964508081, 0.0309493761777698, -0.00665924547288949, -0.0201847651234559};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.148461497791618, -0.0857142857142855, -0.179965983180269, -0.090913729009699, 0.0349927106111882, -0.230330597575435, 0.05831732827843, 0.0782564255486575, -0.001836640990095, 0.0887080486488794, -0.0651942877818761, 0.0725473191087498, 0.0106699199513992, -0.0484608784285543, 0.206597657617751, 0.012458307506989, 0.0955885919187591, -0.0752155806696026, -0.0255344655344655, 0.0591769606581973, 0.0, 0.191272263988442, -0.063437833245147, -0.030516496450808, 0.0309493761777698, 0.00665924547288946, -0.0201847651234558};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.296922995583236, -0.171428571428572, 0.0821583836257749, -0.0454568645048495, 0.0524890659167824, -0.0422758691752379, -0.0373723723474445, -0.0276760529379397, 0.0486709862375156, -0.133062072973319, 0.0325971438909381, -0.0573950309404665, 0.0906943195868944, -0.0710485760011858, -0.103298828808876, -0.0186874612604834, 0.00659231668405231, 0.0445721959523571, -0.0766033966033967, 0.0591769606581975, 0.0, -0.0956361319942211, 0.0951567498677204, -0.0534038687889141, 0.00773734404444248, 0.0199777364186685, -0.0201847651234558};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.171428571428571, 0.0547722557505167, -0.0909137290096988, -0.174963553055941, -0.0262401946604925, 0.0977431276779316, 0.211864956973195, 0.0863221265344617, 0.0, 0.117349718007377, 0.0449977042573257, 0.0448136637958771, 0.0451753951452625, 0.0, -0.137041382576878, -0.0197769500521572, -0.0501437204464018, -0.146013986013986, -0.137041382576878, 0.0, 0.0, -0.126875666490294, -0.137324234028636, -0.0464240642666546, 0.0466147183102264, 0.0605542953703675};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0909137290096985, 0.0, 0.0, -0.046947647786157, 0.0, -0.0524890659167825, 0.0, -0.351136025901814, 0.0, 0.157032804653116, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.205562073865317, 0.0, 0.153216923586227, 0.0, -0.137041382576878, 0.0, 0.0, 0.19031349973544, 0.0, -0.0928481285333092, 0.0, 0.0605542953703673};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.171428571428571, 0.0547722557505166, 0.0909137290096993, -0.174963553055941, 0.0262401946604926, 0.0977431276779317, -0.211864956973194, 0.0863221265344616, 0.0, -0.117349718007377, 0.0449977042573258, -0.0448136637958771, 0.0451753951452626, 0.0, -0.137041382576878, 0.019776950052157, -0.0501437204464017, 0.146013986013986, -0.137041382576878, 0.0, 0.0, -0.126875666490294, 0.137324234028636, -0.0464240642666546, -0.0466147183102265, 0.0605542953703676};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.148461497791618, -0.0857142857142859, -0.062596863714876, -0.181827458019398, -0.0699854212223768, 0.0583115436899834, -0.00821370820822939, -0.190869330606481, -0.150604561187784, 0.0, 0.0521554302255009, -0.0514259477226579, 0.0554835837472766, 0.106778206706984, 0.0, 0.0, 0.148327125391178, 0.0325005595485939, 0.113286713286713, 0.160919805298607, 0.0, 0.0, 0.0, 0.137324234028636, 0.108322816622194, -0.0466147183102263, -0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.148461497791618, -0.0857142857142858, -0.0625968637148761, 0.181827458019398, -0.0699854212223763, -0.0583115436899836, -0.0082137082082297, 0.190869330606481, -0.150604561187784, 0.0, -0.0521554302255009, -0.0514259477226581, -0.0554835837472766, 0.106778206706984, 0.0, 0.0, -0.148327125391178, 0.0325005595485937, -0.113286713286713, 0.160919805298607, 0.0, 0.0, 0.0, -0.137324234028636, 0.108322816622194, 0.0466147183102265, -0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 27:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.342857142857143, 0.0234738238930786, 0.0, 0.104978131833565, 0.0, -0.073102003053243, 0.0, -0.0312228968316139, 0.0, 0.0, -0.0835671650493192, 0.0, -0.168381018268706, 0.0, 0.0, 0.0, -0.117002014374937, 0.0, -0.0934373063024168, 0.0, 0.0, 0.0, 0.0, -0.108322816622194, 0.0, 0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 28:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, -0.0173205080756888, -0.01, 0.0121716123890036, 0.0094280904158206, 0.00544331053951816, -0.0212594169703065, -0.0179674867055021, -0.0139175553567226, -0.00803530433166532, 0.017248787237282, 0.0152120004824378, 0.0128564869306645, 0.00995859195463939, 0.00574959574576069, -0.0120515300277022, -0.0109010190686153, -0.00961379516424303, -0.00812513988714842, -0.00629370629370629, -0.00363367302287175, 0.0103967436622596, 0.0095636131994221, 0.00865061362433823, 0.00762912411270201, 0.00644778670370204, 0.00499443410466712, 0.0028835378747794};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 29:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, 0.0173205080756888, -0.00999999999999999, 0.0121716123890037, -0.00942809041582066, 0.00544331053951821, 0.0212594169703065, -0.0179674867055022, 0.0139175553567226, -0.00803530433166534, 0.0172487872372821, -0.0152120004824377, 0.0128564869306645, -0.00995859195463939, 0.0057495957457607, 0.0120515300277022, -0.0109010190686153, 0.00961379516424302, -0.00812513988714843, 0.00629370629370631, -0.00363367302287175, 0.0103967436622596, -0.0095636131994221, 0.00865061362433821, -0.007629124112702, 0.00644778670370201, -0.00499443410466712, 0.00288353787477938};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 30:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, 0.0, 0.0199999999999999, 0.0, 0.0, 0.0163299316185545, 0.0, 0.0, 0.0, 0.0321412173266613, 0.0, 0.0, 0.0, 0.0, 0.0287479787288034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0218020381372306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0201847651234558};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 31:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731326, 0.0692820323027549, -0.0171428571428571, 0.0978075995544939, -0.0697005255741027, 0.0384919816723071, 0.0714316410202297, -0.0209449559309854, -0.00413550216314041, 0.00826488445542721, 0.0443540243244396, -0.00651942877818761, -0.0151522881682831, 0.0224068318979386, -0.0160167310060477, 0.0206597657617751, 0.00622915375349444, -0.0230731083941832, 0.0306433847172455, -0.0294905094905095, 0.0186874612604834, 0.0, 0.0191272263988442, -0.0317189166225735, 0.0381456205635101, -0.0386867202222121, 0.0332962273644474, -0.0201847651234558};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 32:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048496, -0.0123717914826348, -0.0214285714285715, -0.0312984318574381, 0.121218305346265, -0.113726309486362, -0.0131200973302462, 0.077824885272975, -0.047558274876115, 0.0156114484158068, 0.0, 0.0586748590036884, -0.0449977042573258, 0.017071871922239, -0.00205342705205747, 0.0, 0.0342603456442196, -0.00988847502607852, -0.026464741346712, 0.0465734265734266, -0.0358176340825931, 0.0, 0.0, 0.0317189166225735, -0.0686621170143181, 0.0928481285333091, -0.0932294366204528, 0.0605542953703675};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 33:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, 0.0824786098842323, 0.0476190476190476, 0.0625968637148761, -0.0538748023761178, 0.116642368703961, 0.0194371812299945, 0.00821370820822966, 0.0127246220404323, 0.0110198459405697, 0.0, 0.0173851434085002, 0.051425947722658, -0.0739781116630354, 0.0492822492493774, 0.0, 0.0, 0.0494423751303927, -0.0325005595485938, -0.0125874125874126, 0.0259548073062268, 0.0, 0.0, 0.0, 0.045774744676212, -0.108322816622194, 0.139844154930679, -0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 34:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048494, -0.0247435829652696, 0.0, -0.0117369119465392, 0.106066017177982, -0.131222664791956, 0.0, 0.0365510015266215, 0.0389691549988232, -0.0766797613364634, 0.0, 0.0, 0.0417835825246596, 0.0266747998784983, -0.0574959574576069, 0.0, 0.0, 0.0, 0.0585010071874687, -0.0440559440559441, 0.00778644219186812, 0.0, 0.0, 0.0, 0.0, 0.054161408311097, -0.116536795775566, 0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 35:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731327, 0.0197948663722157, 0.0685714285714286, 0.0, 0.00606091526731318, 0.125973758200278, 0.0, 0.0, 0.0508984881617284, 0.0550992297028479, 0.0, 0.0, 0.0, 0.0533495997569967, 0.0123205623123444, 0.0, 0.0, 0.0, 0.0, 0.0503496503496504, -0.0249166150139779, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0466147183102264, -0.0605542953703675};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 36:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731327, -0.069282032302755, -0.017142857142857, 0.0978075995544939, 0.0697005255741026, 0.038491981672307, -0.0714316410202298, -0.0209449559309853, 0.00413550216314051, 0.00826488445542718, 0.0443540243244396, 0.00651942877818762, -0.0151522881682831, -0.0224068318979386, -0.0160167310060477, -0.0206597657617751, 0.00622915375349444, 0.0230731083941832, 0.0306433847172454, 0.0294905094905094, 0.0186874612604833, 0.0, -0.0191272263988442, -0.0317189166225735, -0.0381456205635101, -0.0386867202222121, -0.0332962273644474, -0.0201847651234557};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 37:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048496, 0.0123717914826349, -0.0214285714285715, -0.0312984318574381, -0.121218305346265, -0.113726309486362, 0.0131200973302463, 0.077824885272975, 0.0475582748761149, 0.0156114484158068, 0.0, -0.0586748590036884, -0.0449977042573257, -0.017071871922239, -0.00205342705205735, 0.0, 0.0342603456442195, 0.00988847502607855, -0.026464741346712, -0.0465734265734264, -0.0358176340825931, 0.0, 0.0, 0.0317189166225734, 0.0686621170143181, 0.0928481285333091, 0.0932294366204528, 0.0605542953703674};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 38:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, -0.0824786098842321, 0.0476190476190477, 0.062596863714876, 0.053874802376118, 0.116642368703961, -0.0194371812299945, 0.00821370820822956, -0.012724622040432, 0.0110198459405696, 0.0, -0.0173851434085003, 0.051425947722658, 0.0739781116630354, 0.0492822492493773, 0.0, 0.0, -0.0494423751303927, -0.0325005595485938, 0.0125874125874124, 0.0259548073062269, 0.0, 0.0, 0.0, -0.0457747446762121, -0.108322816622194, -0.139844154930679, -0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 39:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048493, 0.0247435829652696, 0.0, -0.0117369119465392, -0.106066017177982, -0.131222664791956, 0.0, 0.0365510015266215, -0.0389691549988233, -0.0766797613364633, 0.0, 0.0, 0.0417835825246596, -0.0266747998784983, -0.0574959574576069, 0.0, 0.0, 0.0, 0.0585010071874687, 0.0440559440559442, 0.00778644219186817, 0.0, 0.0, 0.0, 0.0, 0.054161408311097, 0.116536795775566, 0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 40:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731329, -0.0197948663722158, 0.0685714285714287, 0.0, -0.00606091526731326, 0.125973758200278, 0.0, 0.0, -0.0508984881617285, 0.0550992297028479, 0.0, 0.0, 0.0, -0.0533495997569968, 0.0123205623123443, 0.0, 0.0, 0.0, 0.0, -0.0503496503496504, -0.0249166150139779, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0466147183102264, -0.0605542953703675};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 41:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731325, -0.0494871659305393, -0.0514285714285714, 0.0899829915901345, 0.0757614408414158, 0.0454905237945448, -0.00145778859224956, -0.0406578556307363, -0.0518528348147608, -0.0358144993068511, -0.0295693495496264, 0.00651942877818764, 0.0261721341088527, 0.0309427678590581, 0.0209449559309854, 0.0482061201108086, 0.0186874612604834, -0.00109871944734209, -0.0120716364037634, -0.0151048951048951, -0.0103819229224908, -0.0623804619735576, -0.0382544527976884, -0.0201847651234558, -0.00762912411270201, 0.0, 0.00332962273644472, 0.00288353787477937};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 42:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048498, -0.0123717914826352, 0.0214285714285713, -0.16822907123373, -0.0151522881682831, 0.00874817765279702, 0.0666938280954185, 0.0627321964403531, 0.00469220437740938, -0.0181368297771875, -0.036961686937033, -0.0586748590036885, -0.0243354931187578, 0.00960292795625939, 0.0164274164164592, -0.0602576501385106, 0.0233593265756043, 0.0310388243874132, 0.0109109021341708, -0.00755244755244756, -0.0103819229224908, 0.155951154933894, 0.0478180659971106, 0.00288353787477946, -0.007629124112702, -0.00386867202222118, 0.0016648113682224, 0.00288353787477942};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 43:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, 0.0, -0.0952380952380952, 0.132148934509183, 0.0, 0.0544331053951817, 0.0, -0.0082137082082295, 0.0, -0.0257129738613289, 0.0985644984987547, 0.0, -0.0293862558415189, 0.0, 0.0164274164164591, 0.0, -0.0622915375349447, 0.0, 0.0185717483134821, 0.0, -0.0103819229224909, -0.207934873245192, 0.0, 0.0173012272486764, 0.0, -0.00515822936296168, 0.0, 0.00288353787477947};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 44:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048497, 0.0123717914826345, 0.0214285714285714, -0.16822907123373, 0.0151522881682832, 0.00874817765279707, -0.0666938280954186, 0.0627321964403532, -0.00469220437740941, -0.0181368297771875, -0.0369616869370329, 0.0586748590036884, -0.0243354931187578, -0.00960292795625944, 0.0164274164164591, 0.060257650138511, 0.0233593265756043, -0.0310388243874132, 0.0109109021341708, 0.00755244755244758, -0.0103819229224907, 0.155951154933894, -0.0478180659971104, 0.00288353787477942, 0.00762912411270202, -0.00386867202222119, -0.00166481136822235, 0.00288353787477938};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 45:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731326, 0.0494871659305394, -0.0514285714285715, 0.0899829915901345, -0.0757614408414158, 0.0454905237945448, 0.0014577885922496, -0.0406578556307363, 0.0518528348147609, -0.0358144993068511, -0.0295693495496264, -0.00651942877818761, 0.0261721341088527, -0.0309427678590581, 0.0209449559309854, -0.0482061201108087, 0.0186874612604834, 0.00109871944734202, -0.0120716364037634, 0.0151048951048951, -0.0103819229224908, -0.0623804619735576, 0.0382544527976884, -0.0201847651234558, 0.00762912411270203, 0.0, -0.00332962273644472, 0.00288353787477937};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 46:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.296922995583236, -0.171428571428571, 0.082158383625775, 0.0454568645048493, 0.0524890659167824, 0.042275869175238, -0.0373723723474444, 0.0276760529379396, 0.0486709862375157, -0.133062072973319, -0.0325971438909379, -0.0573950309404665, -0.0906943195868943, -0.0710485760011856, 0.103298828808876, -0.0186874612604834, -0.0065923166840523, 0.0445721959523571, 0.0766033966033966, 0.0591769606581974, 0.0, 0.0956361319942208, 0.0951567498677203, 0.0534038687889141, 0.00773734404444239, -0.0199777364186684, -0.0201847651234558};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 47:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.148461497791618, -0.0857142857142858, -0.179965983180269, 0.0909137290096991, 0.0349927106111884, 0.230330597575435, 0.0583173282784298, -0.0782564255486574, -0.00183664099009501, 0.088708048648879, 0.065194287781876, 0.0725473191087495, -0.0106699199513993, -0.0484608784285544, -0.206597657617751, 0.0124583075069889, -0.0955885919187591, -0.0752155806696025, 0.0255344655344656, 0.0591769606581975, 0.0, -0.191272263988442, -0.0634378332451467, 0.0305164964508081, 0.0309493761777698, -0.00665924547288949, -0.0201847651234559};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 48:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.148461497791618, -0.0857142857142855, -0.179965983180269, -0.090913729009699, 0.0349927106111882, -0.230330597575435, 0.05831732827843, 0.0782564255486575, -0.001836640990095, 0.0887080486488794, -0.0651942877818761, 0.0725473191087498, 0.0106699199513992, -0.0484608784285543, 0.206597657617751, 0.012458307506989, 0.0955885919187591, -0.0752155806696026, -0.0255344655344655, 0.0591769606581973, 0.0, 0.191272263988442, -0.063437833245147, -0.030516496450808, 0.0309493761777698, 0.00665924547288946, -0.0201847651234558};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 49:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.296922995583236, -0.171428571428572, 0.0821583836257749, -0.0454568645048495, 0.0524890659167824, -0.0422758691752379, -0.0373723723474445, -0.0276760529379397, 0.0486709862375156, -0.133062072973319, 0.0325971438909381, -0.0573950309404665, 0.0906943195868944, -0.0710485760011858, -0.103298828808876, -0.0186874612604834, 0.00659231668405231, 0.0445721959523571, -0.0766033966033967, 0.0591769606581975, 0.0, -0.0956361319942211, 0.0951567498677204, -0.0534038687889141, 0.00773734404444248, 0.0199777364186685, -0.0201847651234558};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 50:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.171428571428571, 0.0547722557505167, -0.0909137290096988, -0.174963553055941, -0.0262401946604925, 0.0977431276779316, 0.211864956973195, 0.0863221265344617, 0.0, 0.117349718007377, 0.0449977042573257, 0.0448136637958771, 0.0451753951452625, 0.0, -0.137041382576878, -0.0197769500521572, -0.0501437204464018, -0.146013986013986, -0.137041382576878, 0.0, 0.0, -0.126875666490294, -0.137324234028636, -0.0464240642666546, 0.0466147183102264, 0.0605542953703675};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 51:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0909137290096985, 0.0, 0.0, -0.046947647786157, 0.0, -0.0524890659167825, 0.0, -0.351136025901814, 0.0, 0.157032804653116, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.205562073865317, 0.0, 0.153216923586227, 0.0, -0.137041382576878, 0.0, 0.0, 0.19031349973544, 0.0, -0.0928481285333092, 0.0, 0.0605542953703673};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 52:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.171428571428571, 0.0547722557505166, 0.0909137290096993, -0.174963553055941, 0.0262401946604926, 0.0977431276779317, -0.211864956973194, 0.0863221265344616, 0.0, -0.117349718007377, 0.0449977042573258, -0.0448136637958771, 0.0451753951452626, 0.0, -0.137041382576878, 0.019776950052157, -0.0501437204464017, 0.146013986013986, -0.137041382576878, 0.0, 0.0, -0.126875666490294, 0.137324234028636, -0.0464240642666546, -0.0466147183102265, 0.0605542953703676};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 53:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.148461497791618, -0.0857142857142859, -0.062596863714876, -0.181827458019398, -0.0699854212223768, 0.0583115436899834, -0.00821370820822939, -0.190869330606481, -0.150604561187784, 0.0, 0.0521554302255009, -0.0514259477226579, 0.0554835837472766, 0.106778206706984, 0.0, 0.0, 0.148327125391178, 0.0325005595485939, 0.113286713286713, 0.160919805298607, 0.0, 0.0, 0.0, 0.137324234028636, 0.108322816622194, -0.0466147183102263, -0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 54:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.148461497791618, -0.0857142857142858, -0.0625968637148761, 0.181827458019398, -0.0699854212223763, -0.0583115436899836, -0.0082137082082297, 0.190869330606481, -0.150604561187784, 0.0, -0.0521554302255009, -0.0514259477226581, -0.0554835837472766, 0.106778206706984, 0.0, 0.0, -0.148327125391178, 0.0325005595485937, -0.113286713286713, 0.160919805298607, 0.0, 0.0, 0.0, -0.137324234028636, 0.108322816622194, 0.0466147183102265, -0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 55:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.342857142857143, 0.0234738238930786, 0.0, 0.104978131833565, 0.0, -0.073102003053243, 0.0, -0.0312228968316139, 0.0, 0.0, -0.0835671650493192, 0.0, -0.168381018268706, 0.0, 0.0, 0.0, -0.117002014374937, 0.0, -0.0934373063024168, 0.0, 0.0, 0.0, 0.0, -0.108322816622194, 0.0, 0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

/// Evaluate all basis functions at given point x in cell
void errornormsgm_finite_element_1::_evaluate_basis_all(double* values,
                                        const double* x,
                                        const double* vertex_coordinates,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 56; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

/// Evaluate order n derivatives of basis function i at given point x in cell
void errornormsgm_finite_element_1::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double* values,
                                                const double* x,
                                                const double* vertex_coordinates,
                                                int cell_orientation)
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 6)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[64][6];
    for (unsigned int row = 0; row < 64; row++)
    {
      for (unsigned int col = 0; col < 6; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K[0], K[1]}, {K[2], K[3]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[64][64];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, -0.0173205080756888, -0.01, 0.0121716123890036, 0.0094280904158206, 0.00544331053951816, -0.0212594169703065, -0.0179674867055021, -0.0139175553567226, -0.00803530433166532, 0.017248787237282, 0.0152120004824378, 0.0128564869306645, 0.00995859195463939, 0.00574959574576069, -0.0120515300277022, -0.0109010190686153, -0.00961379516424303, -0.00812513988714842, -0.00629370629370629, -0.00363367302287175, 0.0103967436622596, 0.0095636131994221, 0.00865061362433823, 0.00762912411270201, 0.00644778670370204, 0.00499443410466712, 0.0028835378747794};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, 0.0173205080756888, -0.00999999999999999, 0.0121716123890037, -0.00942809041582066, 0.00544331053951821, 0.0212594169703065, -0.0179674867055022, 0.0139175553567226, -0.00803530433166534, 0.0172487872372821, -0.0152120004824377, 0.0128564869306645, -0.00995859195463939, 0.0057495957457607, 0.0120515300277022, -0.0109010190686153, 0.00961379516424302, -0.00812513988714843, 0.00629370629370631, -0.00363367302287175, 0.0103967436622596, -0.0095636131994221, 0.00865061362433821, -0.007629124112702, 0.00644778670370201, -0.00499443410466712, 0.00288353787477938};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, 0.0, 0.0199999999999999, 0.0, 0.0, 0.0163299316185545, 0.0, 0.0, 0.0, 0.0321412173266613, 0.0, 0.0, 0.0, 0.0, 0.0287479787288034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0218020381372306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0201847651234558};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731326, 0.0692820323027549, -0.0171428571428571, 0.0978075995544939, -0.0697005255741027, 0.0384919816723071, 0.0714316410202297, -0.0209449559309854, -0.00413550216314041, 0.00826488445542721, 0.0443540243244396, -0.00651942877818761, -0.0151522881682831, 0.0224068318979386, -0.0160167310060477, 0.0206597657617751, 0.00622915375349444, -0.0230731083941832, 0.0306433847172455, -0.0294905094905095, 0.0186874612604834, 0.0, 0.0191272263988442, -0.0317189166225735, 0.0381456205635101, -0.0386867202222121, 0.0332962273644474, -0.0201847651234558};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048496, -0.0123717914826348, -0.0214285714285715, -0.0312984318574381, 0.121218305346265, -0.113726309486362, -0.0131200973302462, 0.077824885272975, -0.047558274876115, 0.0156114484158068, 0.0, 0.0586748590036884, -0.0449977042573258, 0.017071871922239, -0.00205342705205747, 0.0, 0.0342603456442196, -0.00988847502607852, -0.026464741346712, 0.0465734265734266, -0.0358176340825931, 0.0, 0.0, 0.0317189166225735, -0.0686621170143181, 0.0928481285333091, -0.0932294366204528, 0.0605542953703675};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, 0.0824786098842323, 0.0476190476190476, 0.0625968637148761, -0.0538748023761178, 0.116642368703961, 0.0194371812299945, 0.00821370820822966, 0.0127246220404323, 0.0110198459405697, 0.0, 0.0173851434085002, 0.051425947722658, -0.0739781116630354, 0.0492822492493774, 0.0, 0.0, 0.0494423751303927, -0.0325005595485938, -0.0125874125874126, 0.0259548073062268, 0.0, 0.0, 0.0, 0.045774744676212, -0.108322816622194, 0.139844154930679, -0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048494, -0.0247435829652696, 0.0, -0.0117369119465392, 0.106066017177982, -0.131222664791956, 0.0, 0.0365510015266215, 0.0389691549988232, -0.0766797613364634, 0.0, 0.0, 0.0417835825246596, 0.0266747998784983, -0.0574959574576069, 0.0, 0.0, 0.0, 0.0585010071874687, -0.0440559440559441, 0.00778644219186812, 0.0, 0.0, 0.0, 0.0, 0.054161408311097, -0.116536795775566, 0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731327, 0.0197948663722157, 0.0685714285714286, 0.0, 0.00606091526731318, 0.125973758200278, 0.0, 0.0, 0.0508984881617284, 0.0550992297028479, 0.0, 0.0, 0.0, 0.0533495997569967, 0.0123205623123444, 0.0, 0.0, 0.0, 0.0, 0.0503496503496504, -0.0249166150139779, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0466147183102264, -0.0605542953703675};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731327, -0.069282032302755, -0.017142857142857, 0.0978075995544939, 0.0697005255741026, 0.038491981672307, -0.0714316410202298, -0.0209449559309853, 0.00413550216314051, 0.00826488445542718, 0.0443540243244396, 0.00651942877818762, -0.0151522881682831, -0.0224068318979386, -0.0160167310060477, -0.0206597657617751, 0.00622915375349444, 0.0230731083941832, 0.0306433847172454, 0.0294905094905094, 0.0186874612604833, 0.0, -0.0191272263988442, -0.0317189166225735, -0.0381456205635101, -0.0386867202222121, -0.0332962273644474, -0.0201847651234557};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048496, 0.0123717914826349, -0.0214285714285715, -0.0312984318574381, -0.121218305346265, -0.113726309486362, 0.0131200973302463, 0.077824885272975, 0.0475582748761149, 0.0156114484158068, 0.0, -0.0586748590036884, -0.0449977042573257, -0.017071871922239, -0.00205342705205735, 0.0, 0.0342603456442195, 0.00988847502607855, -0.026464741346712, -0.0465734265734264, -0.0358176340825931, 0.0, 0.0, 0.0317189166225734, 0.0686621170143181, 0.0928481285333091, 0.0932294366204528, 0.0605542953703674};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, -0.0824786098842321, 0.0476190476190477, 0.062596863714876, 0.053874802376118, 0.116642368703961, -0.0194371812299945, 0.00821370820822956, -0.012724622040432, 0.0110198459405696, 0.0, -0.0173851434085003, 0.051425947722658, 0.0739781116630354, 0.0492822492493773, 0.0, 0.0, -0.0494423751303927, -0.0325005595485938, 0.0125874125874124, 0.0259548073062269, 0.0, 0.0, 0.0, -0.0457747446762121, -0.108322816622194, -0.139844154930679, -0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048493, 0.0247435829652696, 0.0, -0.0117369119465392, -0.106066017177982, -0.131222664791956, 0.0, 0.0365510015266215, -0.0389691549988233, -0.0766797613364633, 0.0, 0.0, 0.0417835825246596, -0.0266747998784983, -0.0574959574576069, 0.0, 0.0, 0.0, 0.0585010071874687, 0.0440559440559442, 0.00778644219186817, 0.0, 0.0, 0.0, 0.0, 0.054161408311097, 0.116536795775566, 0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731329, -0.0197948663722158, 0.0685714285714287, 0.0, -0.00606091526731326, 0.125973758200278, 0.0, 0.0, -0.0508984881617285, 0.0550992297028479, 0.0, 0.0, 0.0, -0.0533495997569968, 0.0123205623123443, 0.0, 0.0, 0.0, 0.0, -0.0503496503496504, -0.0249166150139779, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0466147183102264, -0.0605542953703675};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731325, -0.0494871659305393, -0.0514285714285714, 0.0899829915901345, 0.0757614408414158, 0.0454905237945448, -0.00145778859224956, -0.0406578556307363, -0.0518528348147608, -0.0358144993068511, -0.0295693495496264, 0.00651942877818764, 0.0261721341088527, 0.0309427678590581, 0.0209449559309854, 0.0482061201108086, 0.0186874612604834, -0.00109871944734209, -0.0120716364037634, -0.0151048951048951, -0.0103819229224908, -0.0623804619735576, -0.0382544527976884, -0.0201847651234558, -0.00762912411270201, 0.0, 0.00332962273644472, 0.00288353787477937};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048498, -0.0123717914826352, 0.0214285714285713, -0.16822907123373, -0.0151522881682831, 0.00874817765279702, 0.0666938280954185, 0.0627321964403531, 0.00469220437740938, -0.0181368297771875, -0.036961686937033, -0.0586748590036885, -0.0243354931187578, 0.00960292795625939, 0.0164274164164592, -0.0602576501385106, 0.0233593265756043, 0.0310388243874132, 0.0109109021341708, -0.00755244755244756, -0.0103819229224908, 0.155951154933894, 0.0478180659971106, 0.00288353787477946, -0.007629124112702, -0.00386867202222118, 0.0016648113682224, 0.00288353787477942};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, 0.0, -0.0952380952380952, 0.132148934509183, 0.0, 0.0544331053951817, 0.0, -0.0082137082082295, 0.0, -0.0257129738613289, 0.0985644984987547, 0.0, -0.0293862558415189, 0.0, 0.0164274164164591, 0.0, -0.0622915375349447, 0.0, 0.0185717483134821, 0.0, -0.0103819229224909, -0.207934873245192, 0.0, 0.0173012272486764, 0.0, -0.00515822936296168, 0.0, 0.00288353787477947};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048497, 0.0123717914826345, 0.0214285714285714, -0.16822907123373, 0.0151522881682832, 0.00874817765279707, -0.0666938280954186, 0.0627321964403532, -0.00469220437740941, -0.0181368297771875, -0.0369616869370329, 0.0586748590036884, -0.0243354931187578, -0.00960292795625944, 0.0164274164164591, 0.060257650138511, 0.0233593265756043, -0.0310388243874132, 0.0109109021341708, 0.00755244755244758, -0.0103819229224907, 0.155951154933894, -0.0478180659971104, 0.00288353787477942, 0.00762912411270202, -0.00386867202222119, -0.00166481136822235, 0.00288353787477938};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731326, 0.0494871659305394, -0.0514285714285715, 0.0899829915901345, -0.0757614408414158, 0.0454905237945448, 0.0014577885922496, -0.0406578556307363, 0.0518528348147609, -0.0358144993068511, -0.0295693495496264, -0.00651942877818761, 0.0261721341088527, -0.0309427678590581, 0.0209449559309854, -0.0482061201108087, 0.0186874612604834, 0.00109871944734202, -0.0120716364037634, 0.0151048951048951, -0.0103819229224908, -0.0623804619735576, 0.0382544527976884, -0.0201847651234558, 0.00762912411270203, 0.0, -0.00332962273644472, 0.00288353787477937};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.296922995583236, -0.171428571428571, 0.082158383625775, 0.0454568645048493, 0.0524890659167824, 0.042275869175238, -0.0373723723474444, 0.0276760529379396, 0.0486709862375157, -0.133062072973319, -0.0325971438909379, -0.0573950309404665, -0.0906943195868943, -0.0710485760011856, 0.103298828808876, -0.0186874612604834, -0.0065923166840523, 0.0445721959523571, 0.0766033966033966, 0.0591769606581974, 0.0, 0.0956361319942208, 0.0951567498677203, 0.0534038687889141, 0.00773734404444239, -0.0199777364186684, -0.0201847651234558};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.148461497791618, -0.0857142857142858, -0.179965983180269, 0.0909137290096991, 0.0349927106111884, 0.230330597575435, 0.0583173282784298, -0.0782564255486574, -0.00183664099009501, 0.088708048648879, 0.065194287781876, 0.0725473191087495, -0.0106699199513993, -0.0484608784285544, -0.206597657617751, 0.0124583075069889, -0.0955885919187591, -0.0752155806696025, 0.0255344655344656, 0.0591769606581975, 0.0, -0.191272263988442, -0.0634378332451467, 0.0305164964508081, 0.0309493761777698, -0.00665924547288949, -0.0201847651234559};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.148461497791618, -0.0857142857142855, -0.179965983180269, -0.090913729009699, 0.0349927106111882, -0.230330597575435, 0.05831732827843, 0.0782564255486575, -0.001836640990095, 0.0887080486488794, -0.0651942877818761, 0.0725473191087498, 0.0106699199513992, -0.0484608784285543, 0.206597657617751, 0.012458307506989, 0.0955885919187591, -0.0752155806696026, -0.0255344655344655, 0.0591769606581973, 0.0, 0.191272263988442, -0.063437833245147, -0.030516496450808, 0.0309493761777698, 0.00665924547288946, -0.0201847651234558};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.296922995583236, -0.171428571428572, 0.0821583836257749, -0.0454568645048495, 0.0524890659167824, -0.0422758691752379, -0.0373723723474445, -0.0276760529379397, 0.0486709862375156, -0.133062072973319, 0.0325971438909381, -0.0573950309404665, 0.0906943195868944, -0.0710485760011858, -0.103298828808876, -0.0186874612604834, 0.00659231668405231, 0.0445721959523571, -0.0766033966033967, 0.0591769606581975, 0.0, -0.0956361319942211, 0.0951567498677204, -0.0534038687889141, 0.00773734404444248, 0.0199777364186685, -0.0201847651234558};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.171428571428571, 0.0547722557505167, -0.0909137290096988, -0.174963553055941, -0.0262401946604925, 0.0977431276779316, 0.211864956973195, 0.0863221265344617, 0.0, 0.117349718007377, 0.0449977042573257, 0.0448136637958771, 0.0451753951452625, 0.0, -0.137041382576878, -0.0197769500521572, -0.0501437204464018, -0.146013986013986, -0.137041382576878, 0.0, 0.0, -0.126875666490294, -0.137324234028636, -0.0464240642666546, 0.0466147183102264, 0.0605542953703675};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0909137290096985, 0.0, 0.0, -0.046947647786157, 0.0, -0.0524890659167825, 0.0, -0.351136025901814, 0.0, 0.157032804653116, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.205562073865317, 0.0, 0.153216923586227, 0.0, -0.137041382576878, 0.0, 0.0, 0.19031349973544, 0.0, -0.0928481285333092, 0.0, 0.0605542953703673};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.171428571428571, 0.0547722557505166, 0.0909137290096993, -0.174963553055941, 0.0262401946604926, 0.0977431276779317, -0.211864956973194, 0.0863221265344616, 0.0, -0.117349718007377, 0.0449977042573258, -0.0448136637958771, 0.0451753951452626, 0.0, -0.137041382576878, 0.019776950052157, -0.0501437204464017, 0.146013986013986, -0.137041382576878, 0.0, 0.0, -0.126875666490294, 0.137324234028636, -0.0464240642666546, -0.0466147183102265, 0.0605542953703676};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.148461497791618, -0.0857142857142859, -0.062596863714876, -0.181827458019398, -0.0699854212223768, 0.0583115436899834, -0.00821370820822939, -0.190869330606481, -0.150604561187784, 0.0, 0.0521554302255009, -0.0514259477226579, 0.0554835837472766, 0.106778206706984, 0.0, 0.0, 0.148327125391178, 0.0325005595485939, 0.113286713286713, 0.160919805298607, 0.0, 0.0, 0.0, 0.137324234028636, 0.108322816622194, -0.0466147183102263, -0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.148461497791618, -0.0857142857142858, -0.0625968637148761, 0.181827458019398, -0.0699854212223763, -0.0583115436899836, -0.0082137082082297, 0.190869330606481, -0.150604561187784, 0.0, -0.0521554302255009, -0.0514259477226581, -0.0554835837472766, 0.106778206706984, 0.0, 0.0, -0.148327125391178, 0.0325005595485937, -0.113286713286713, 0.160919805298607, 0.0, 0.0, 0.0, -0.137324234028636, 0.108322816622194, 0.0466147183102265, -0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 27:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.342857142857143, 0.0234738238930786, 0.0, 0.104978131833565, 0.0, -0.073102003053243, 0.0, -0.0312228968316139, 0.0, 0.0, -0.0835671650493192, 0.0, -0.168381018268706, 0.0, 0.0, 0.0, -0.117002014374937, 0.0, -0.0934373063024168, 0.0, 0.0, 0.0, 0.0, -0.108322816622194, 0.0, 0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 28:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, -0.0173205080756888, -0.01, 0.0121716123890036, 0.0094280904158206, 0.00544331053951816, -0.0212594169703065, -0.0179674867055021, -0.0139175553567226, -0.00803530433166532, 0.017248787237282, 0.0152120004824378, 0.0128564869306645, 0.00995859195463939, 0.00574959574576069, -0.0120515300277022, -0.0109010190686153, -0.00961379516424303, -0.00812513988714842, -0.00629370629370629, -0.00363367302287175, 0.0103967436622596, 0.0095636131994221, 0.00865061362433823, 0.00762912411270201, 0.00644778670370204, 0.00499443410466712, 0.0028835378747794};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 29:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, 0.0173205080756888, -0.00999999999999999, 0.0121716123890037, -0.00942809041582066, 0.00544331053951821, 0.0212594169703065, -0.0179674867055022, 0.0139175553567226, -0.00803530433166534, 0.0172487872372821, -0.0152120004824377, 0.0128564869306645, -0.00995859195463939, 0.0057495957457607, 0.0120515300277022, -0.0109010190686153, 0.00961379516424302, -0.00812513988714843, 0.00629370629370631, -0.00363367302287175, 0.0103967436622596, -0.0095636131994221, 0.00865061362433821, -0.007629124112702, 0.00644778670370201, -0.00499443410466712, 0.00288353787477938};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 30:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, 0.0, 0.0199999999999999, 0.0, 0.0, 0.0163299316185545, 0.0, 0.0, 0.0, 0.0321412173266613, 0.0, 0.0, 0.0, 0.0, 0.0287479787288034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0218020381372306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0201847651234558};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 31:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731326, 0.0692820323027549, -0.0171428571428571, 0.0978075995544939, -0.0697005255741027, 0.0384919816723071, 0.0714316410202297, -0.0209449559309854, -0.00413550216314041, 0.00826488445542721, 0.0443540243244396, -0.00651942877818761, -0.0151522881682831, 0.0224068318979386, -0.0160167310060477, 0.0206597657617751, 0.00622915375349444, -0.0230731083941832, 0.0306433847172455, -0.0294905094905095, 0.0186874612604834, 0.0, 0.0191272263988442, -0.0317189166225735, 0.0381456205635101, -0.0386867202222121, 0.0332962273644474, -0.0201847651234558};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 32:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048496, -0.0123717914826348, -0.0214285714285715, -0.0312984318574381, 0.121218305346265, -0.113726309486362, -0.0131200973302462, 0.077824885272975, -0.047558274876115, 0.0156114484158068, 0.0, 0.0586748590036884, -0.0449977042573258, 0.017071871922239, -0.00205342705205747, 0.0, 0.0342603456442196, -0.00988847502607852, -0.026464741346712, 0.0465734265734266, -0.0358176340825931, 0.0, 0.0, 0.0317189166225735, -0.0686621170143181, 0.0928481285333091, -0.0932294366204528, 0.0605542953703675};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 33:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, 0.0824786098842323, 0.0476190476190476, 0.0625968637148761, -0.0538748023761178, 0.116642368703961, 0.0194371812299945, 0.00821370820822966, 0.0127246220404323, 0.0110198459405697, 0.0, 0.0173851434085002, 0.051425947722658, -0.0739781116630354, 0.0492822492493774, 0.0, 0.0, 0.0494423751303927, -0.0325005595485938, -0.0125874125874126, 0.0259548073062268, 0.0, 0.0, 0.0, 0.045774744676212, -0.108322816622194, 0.139844154930679, -0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 34:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048494, -0.0247435829652696, 0.0, -0.0117369119465392, 0.106066017177982, -0.131222664791956, 0.0, 0.0365510015266215, 0.0389691549988232, -0.0766797613364634, 0.0, 0.0, 0.0417835825246596, 0.0266747998784983, -0.0574959574576069, 0.0, 0.0, 0.0, 0.0585010071874687, -0.0440559440559441, 0.00778644219186812, 0.0, 0.0, 0.0, 0.0, 0.054161408311097, -0.116536795775566, 0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 35:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731327, 0.0197948663722157, 0.0685714285714286, 0.0, 0.00606091526731318, 0.125973758200278, 0.0, 0.0, 0.0508984881617284, 0.0550992297028479, 0.0, 0.0, 0.0, 0.0533495997569967, 0.0123205623123444, 0.0, 0.0, 0.0, 0.0, 0.0503496503496504, -0.0249166150139779, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0466147183102264, -0.0605542953703675};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 36:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731327, -0.069282032302755, -0.017142857142857, 0.0978075995544939, 0.0697005255741026, 0.038491981672307, -0.0714316410202298, -0.0209449559309853, 0.00413550216314051, 0.00826488445542718, 0.0443540243244396, 0.00651942877818762, -0.0151522881682831, -0.0224068318979386, -0.0160167310060477, -0.0206597657617751, 0.00622915375349444, 0.0230731083941832, 0.0306433847172454, 0.0294905094905094, 0.0186874612604833, 0.0, -0.0191272263988442, -0.0317189166225735, -0.0381456205635101, -0.0386867202222121, -0.0332962273644474, -0.0201847651234557};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 37:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048496, 0.0123717914826349, -0.0214285714285715, -0.0312984318574381, -0.121218305346265, -0.113726309486362, 0.0131200973302463, 0.077824885272975, 0.0475582748761149, 0.0156114484158068, 0.0, -0.0586748590036884, -0.0449977042573257, -0.017071871922239, -0.00205342705205735, 0.0, 0.0342603456442195, 0.00988847502607855, -0.026464741346712, -0.0465734265734264, -0.0358176340825931, 0.0, 0.0, 0.0317189166225734, 0.0686621170143181, 0.0928481285333091, 0.0932294366204528, 0.0605542953703674};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 38:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, -0.0824786098842321, 0.0476190476190477, 0.062596863714876, 0.053874802376118, 0.116642368703961, -0.0194371812299945, 0.00821370820822956, -0.012724622040432, 0.0110198459405696, 0.0, -0.0173851434085003, 0.051425947722658, 0.0739781116630354, 0.0492822492493773, 0.0, 0.0, -0.0494423751303927, -0.0325005595485938, 0.0125874125874124, 0.0259548073062269, 0.0, 0.0, 0.0, -0.0457747446762121, -0.108322816622194, -0.139844154930679, -0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 39:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048493, 0.0247435829652696, 0.0, -0.0117369119465392, -0.106066017177982, -0.131222664791956, 0.0, 0.0365510015266215, -0.0389691549988233, -0.0766797613364633, 0.0, 0.0, 0.0417835825246596, -0.0266747998784983, -0.0574959574576069, 0.0, 0.0, 0.0, 0.0585010071874687, 0.0440559440559442, 0.00778644219186817, 0.0, 0.0, 0.0, 0.0, 0.054161408311097, 0.116536795775566, 0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 40:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731329, -0.0197948663722158, 0.0685714285714287, 0.0, -0.00606091526731326, 0.125973758200278, 0.0, 0.0, -0.0508984881617285, 0.0550992297028479, 0.0, 0.0, 0.0, -0.0533495997569968, 0.0123205623123443, 0.0, 0.0, 0.0, 0.0, -0.0503496503496504, -0.0249166150139779, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0466147183102264, -0.0605542953703675};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 41:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731325, -0.0494871659305393, -0.0514285714285714, 0.0899829915901345, 0.0757614408414158, 0.0454905237945448, -0.00145778859224956, -0.0406578556307363, -0.0518528348147608, -0.0358144993068511, -0.0295693495496264, 0.00651942877818764, 0.0261721341088527, 0.0309427678590581, 0.0209449559309854, 0.0482061201108086, 0.0186874612604834, -0.00109871944734209, -0.0120716364037634, -0.0151048951048951, -0.0103819229224908, -0.0623804619735576, -0.0382544527976884, -0.0201847651234558, -0.00762912411270201, 0.0, 0.00332962273644472, 0.00288353787477937};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 42:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048498, -0.0123717914826352, 0.0214285714285713, -0.16822907123373, -0.0151522881682831, 0.00874817765279702, 0.0666938280954185, 0.0627321964403531, 0.00469220437740938, -0.0181368297771875, -0.036961686937033, -0.0586748590036885, -0.0243354931187578, 0.00960292795625939, 0.0164274164164592, -0.0602576501385106, 0.0233593265756043, 0.0310388243874132, 0.0109109021341708, -0.00755244755244756, -0.0103819229224908, 0.155951154933894, 0.0478180659971106, 0.00288353787477946, -0.007629124112702, -0.00386867202222118, 0.0016648113682224, 0.00288353787477942};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 43:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, 0.0, -0.0952380952380952, 0.132148934509183, 0.0, 0.0544331053951817, 0.0, -0.0082137082082295, 0.0, -0.0257129738613289, 0.0985644984987547, 0.0, -0.0293862558415189, 0.0, 0.0164274164164591, 0.0, -0.0622915375349447, 0.0, 0.0185717483134821, 0.0, -0.0103819229224909, -0.207934873245192, 0.0, 0.0173012272486764, 0.0, -0.00515822936296168, 0.0, 0.00288353787477947};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 44:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048497, 0.0123717914826345, 0.0214285714285714, -0.16822907123373, 0.0151522881682832, 0.00874817765279707, -0.0666938280954186, 0.0627321964403532, -0.00469220437740941, -0.0181368297771875, -0.0369616869370329, 0.0586748590036884, -0.0243354931187578, -0.00960292795625944, 0.0164274164164591, 0.060257650138511, 0.0233593265756043, -0.0310388243874132, 0.0109109021341708, 0.00755244755244758, -0.0103819229224907, 0.155951154933894, -0.0478180659971104, 0.00288353787477942, 0.00762912411270202, -0.00386867202222119, -0.00166481136822235, 0.00288353787477938};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 45:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731326, 0.0494871659305394, -0.0514285714285715, 0.0899829915901345, -0.0757614408414158, 0.0454905237945448, 0.0014577885922496, -0.0406578556307363, 0.0518528348147609, -0.0358144993068511, -0.0295693495496264, -0.00651942877818761, 0.0261721341088527, -0.0309427678590581, 0.0209449559309854, -0.0482061201108087, 0.0186874612604834, 0.00109871944734202, -0.0120716364037634, 0.0151048951048951, -0.0103819229224908, -0.0623804619735576, 0.0382544527976884, -0.0201847651234558, 0.00762912411270203, 0.0, -0.00332962273644472, 0.00288353787477937};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 46:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.296922995583236, -0.171428571428571, 0.082158383625775, 0.0454568645048493, 0.0524890659167824, 0.042275869175238, -0.0373723723474444, 0.0276760529379396, 0.0486709862375157, -0.133062072973319, -0.0325971438909379, -0.0573950309404665, -0.0906943195868943, -0.0710485760011856, 0.103298828808876, -0.0186874612604834, -0.0065923166840523, 0.0445721959523571, 0.0766033966033966, 0.0591769606581974, 0.0, 0.0956361319942208, 0.0951567498677203, 0.0534038687889141, 0.00773734404444239, -0.0199777364186684, -0.0201847651234558};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 47:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.148461497791618, -0.0857142857142858, -0.179965983180269, 0.0909137290096991, 0.0349927106111884, 0.230330597575435, 0.0583173282784298, -0.0782564255486574, -0.00183664099009501, 0.088708048648879, 0.065194287781876, 0.0725473191087495, -0.0106699199513993, -0.0484608784285544, -0.206597657617751, 0.0124583075069889, -0.0955885919187591, -0.0752155806696025, 0.0255344655344656, 0.0591769606581975, 0.0, -0.191272263988442, -0.0634378332451467, 0.0305164964508081, 0.0309493761777698, -0.00665924547288949, -0.0201847651234559};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 48:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.148461497791618, -0.0857142857142855, -0.179965983180269, -0.090913729009699, 0.0349927106111882, -0.230330597575435, 0.05831732827843, 0.0782564255486575, -0.001836640990095, 0.0887080486488794, -0.0651942877818761, 0.0725473191087498, 0.0106699199513992, -0.0484608784285543, 0.206597657617751, 0.012458307506989, 0.0955885919187591, -0.0752155806696026, -0.0255344655344655, 0.0591769606581973, 0.0, 0.191272263988442, -0.063437833245147, -0.030516496450808, 0.0309493761777698, 0.00665924547288946, -0.0201847651234558};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 49:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.296922995583236, -0.171428571428572, 0.0821583836257749, -0.0454568645048495, 0.0524890659167824, -0.0422758691752379, -0.0373723723474445, -0.0276760529379397, 0.0486709862375156, -0.133062072973319, 0.0325971438909381, -0.0573950309404665, 0.0906943195868944, -0.0710485760011858, -0.103298828808876, -0.0186874612604834, 0.00659231668405231, 0.0445721959523571, -0.0766033966033967, 0.0591769606581975, 0.0, -0.0956361319942211, 0.0951567498677204, -0.0534038687889141, 0.00773734404444248, 0.0199777364186685, -0.0201847651234558};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 50:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.171428571428571, 0.0547722557505167, -0.0909137290096988, -0.174963553055941, -0.0262401946604925, 0.0977431276779316, 0.211864956973195, 0.0863221265344617, 0.0, 0.117349718007377, 0.0449977042573257, 0.0448136637958771, 0.0451753951452625, 0.0, -0.137041382576878, -0.0197769500521572, -0.0501437204464018, -0.146013986013986, -0.137041382576878, 0.0, 0.0, -0.126875666490294, -0.137324234028636, -0.0464240642666546, 0.0466147183102264, 0.0605542953703675};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 51:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0909137290096985, 0.0, 0.0, -0.046947647786157, 0.0, -0.0524890659167825, 0.0, -0.351136025901814, 0.0, 0.157032804653116, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.205562073865317, 0.0, 0.153216923586227, 0.0, -0.137041382576878, 0.0, 0.0, 0.19031349973544, 0.0, -0.0928481285333092, 0.0, 0.0605542953703673};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 52:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.171428571428571, 0.0547722557505166, 0.0909137290096993, -0.174963553055941, 0.0262401946604926, 0.0977431276779317, -0.211864956973194, 0.0863221265344616, 0.0, -0.117349718007377, 0.0449977042573258, -0.0448136637958771, 0.0451753951452626, 0.0, -0.137041382576878, 0.019776950052157, -0.0501437204464017, 0.146013986013986, -0.137041382576878, 0.0, 0.0, -0.126875666490294, 0.137324234028636, -0.0464240642666546, -0.0466147183102265, 0.0605542953703676};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 53:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.148461497791618, -0.0857142857142859, -0.062596863714876, -0.181827458019398, -0.0699854212223768, 0.0583115436899834, -0.00821370820822939, -0.190869330606481, -0.150604561187784, 0.0, 0.0521554302255009, -0.0514259477226579, 0.0554835837472766, 0.106778206706984, 0.0, 0.0, 0.148327125391178, 0.0325005595485939, 0.113286713286713, 0.160919805298607, 0.0, 0.0, 0.0, 0.137324234028636, 0.108322816622194, -0.0466147183102263, -0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 54:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.148461497791618, -0.0857142857142858, -0.0625968637148761, 0.181827458019398, -0.0699854212223763, -0.0583115436899836, -0.0082137082082297, 0.190869330606481, -0.150604561187784, 0.0, -0.0521554302255009, -0.0514259477226581, -0.0554835837472766, 0.106778206706984, 0.0, 0.0, -0.148327125391178, 0.0325005595485937, -0.113286713286713, 0.160919805298607, 0.0, 0.0, 0.0, -0.137324234028636, 0.108322816622194, 0.0466147183102265, -0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 55:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.342857142857143, 0.0234738238930786, 0.0, 0.104978131833565, 0.0, -0.073102003053243, 0.0, -0.0312228968316139, 0.0, 0.0, -0.0835671650493192, 0.0, -0.168381018268706, 0.0, 0.0, 0.0, -0.117002014374937, 0.0, -0.0934373063024168, 0.0, 0.0, 0.0, 0.0, -0.108322816622194, 0.0, 0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556637, 0.0, -1.99182072850784e-14, -1.64797077829746e-14, 2.00477787629676e-14, 2.20406536427371e-14, 0.0, 0.0, -1.56714823553655e-14, 0.0, 0.0, 1.89798484846304e-14, -1.70867750687299e-14, 1.56017463565387e-14, 1.55449818951969e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.33121423249259e-14, 9.48683298050514, 0.0, -2.00585752794975e-14, 0.0, 0.0, -1.30995011764092e-14, 0.0, 0.0, 0.0, 0.0, 2.27817479147127e-14, 0.0, 0.0, -1.66244821036165e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0894270745589e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.04357053141232e-14, 7.07106781186546, -1.32643179377145e-14, 2.85637634811574e-14, 3.43092496329294e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.21465759768085e-14, -2.85222193421179e-14, 2.80529641414146e-14, 3.05132542235218e-14, 0.0, 0.0, 0.0, 0.0, 1.17527882266901e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -2.25889725589313e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660786, 0.0, -1.20845669801085e-14, -1.80109801354663e-14, 0.0, 1.55164735930633e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.05760039509544e-14, 4.38178046004134, 0.0, -1.86185576120737e-14, 12.5219806739988, 1.60527656923236e-14, 0.0, 0.0, 1.95119777359378e-14, 0.0, 0.0, 4.13738906664418e-14, 0.0, 0.0, 0.0, -1.01815757539137e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.17296922254693e-14, 0.0, 0.0, 0.0, -2.14705949187087e-14, 0.0},
      {3.46410161513776, 1.48616866472865e-14, 7.83836717690618, 0.0, 0.0, 8.4, 1.064854223481e-14, 1.08428020809417e-14, 0.0, 1.67401983432623e-14, 0.0, 0.0, -1.54036939849909e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.04338303644498e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.53809530120427e-14, 10.9544511501033, 0.0, 0.0, -3.83325938999965, -3.80995665059786e-14, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, -1.40431506821536e-14, -2.9259933030197e-14, 0.0, -2.74126196098636e-14, 0.0, 1.38949417587895e-14, 1.00984901163641e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.30415293707804e-14, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647967, -3.5147037523745e-14, 3.34664010613628, 4.36435780471984, 0.0, -5.07468037933241, -1.46763883881593e-14, 17.0084012854152, -2.15318088636745e-14, 1.52127765851133, 0.0, 0.0, -4.09679134750768e-14, 0.0, -1.54888619131358e-14, 0.0, 0.0, 0.0, 0.0, -2.00232091865066e-14, 1.02551451207885e-14, 0.0, 0.0, 0.0, 1.29613504554053e-14, -1.22464290828046e-14, 0.0, 0.0},
      {0.0, 2.44948974278317, 0.0, -1.07939376869779e-14, 9.14285714285717, -2.15331162605542e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 2.50650762817983e-14, -2.21683466166386e-14, 3.9541185833219e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24283840653196e-14, 0.0, 0.0, -1.11027750979881e-14, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507235, -1.34457996403497e-14, -1.03795089710591e-14, 10.733126291999, 0.0, 0.0, -2.89643907488697e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.65343765692899e-14, 3.86687064296482e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64889853055233e-14, 0.0, 0.0, 0.0, -1.10965656246555e-14, 0.0, 0.0, 1.63685286681239e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309062, 0.0, -4.37680963545754, 15.7321327225523, -2.19214309874565e-14, 2.01017818278145, 0.0, -4.03686713879668, 2.24686907201059e-14, -0.515811962199107, 21.799082549502, -4.07486325883101e-14, 0.451335466924223, 0.0, 0.0576695305542008, 1.38114696679005e-14, 1.03051016744722e-14, 0.0, 0.0, 0.0, 0.0, 1.84019272759375e-14, -2.33118161401247e-14, -1.4358397087074e-14, 0.0, 0.0, 0.0, -1.12585480628389e-14},
      {1.14851473539245e-14, 6.85714285714284, 0.0, 0.0, 9.9729225241886, 0.0, 4.3204937989386, 0.0, -7.27309832077587, 0.0, -1.68756400307442e-14, 21.2540192277444, -1.27651861896467e-14, 1.49078803979366, 1.07133360346389e-14, 1.6288832999474e-14, 1.02785416432972e-14, 1.9152160104535e-14, 1.01945374283949e-14, 1.44181516521352e-14, 0.0, 0.0, -3.26517221061405e-14, -1.2866866920876e-14, 0.0, 0.0, 1.05705384239915e-14, 0.0},
      {4.32049379893851, 0.0, 5.93552661441898, 1.79284291400153, -2.64347115688611e-14, -0.320713490295021, -1.18542556683195e-14, 9.20087412456476, 0.0, -5.96639619853421, -1.06097838867316e-14, -1.02269329959057e-14, 19.8022632451351, -3.73727670830973e-14, 2.53024038425523, 0.0, 0.0, 0.0, 0.0, -2.02289452963227e-14, 2.14300007204385e-14, 0.0, -1.65774482427586e-14, 0.0, 0.0, -3.81939533226442e-14, -1.79242169934569e-14, -2.03579131966155e-14},
      {-1.39687588763696e-14, 1.53330375599984, 0.0, -1.20711942058848e-14, 6.33793245113124, -3.05834911595652e-14, -1.15853408714114e-14, 0.0, 13.5526185435787, -1.1694557746855e-14, 0.0, 0.0, 0.0, 16.6675169851115, -1.89109823430138e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4817951310247e-14, 0.0},
      {2.82842712474621, 0.0, 7.31428571428572, 0.0, -3.36985546646259e-14, 11.337638238025, 2.06134144429391e-14, 0.0, -1.37157876728368e-14, 12.9299525702683, 0.0, -1.93003321960166e-14, -1.20005354887704e-14, -1.51529276960545e-14, 9.9385869319578, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6020175422378e-14, 0.0, 0.0, 0.0, -1.36083237448165e-14, 0.0, 0.0, 1.69060969122706e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.6833214455479, -3.47410151392731e-14, 0.0, -6.35959467611289, -5.86316868525085e-14, 20.1910871425983, 1.87021093533001e-14, 2.2030282189144, 0.0, 3.29639985606474e-14, -4.10442212640651, -2.44217753920632e-14, -0.447829168531148, -4.23881401563619e-14, 25.8327956933301, 0.0, 0.374680764026021, 0.0, 0.0408810229188725, 0.0, 0.0, 1.86078905754409e-14, 0.0, 0.0, -1.34679578423983e-14, 1.34155812281352e-14, -1.7358961618789e-14},
      {5.01426536422399, 3.82956050984771e-14, 0.88640526042793, 7.55228687465174, 7.5014597601369e-14, -5.30747700600882, -2.02115060127811e-14, 15.6971334962788, 1.52530114241175e-14, 4.17855447018674, 4.28103640807602, 5.89125626825781e-14, -7.97724035217465, 2.43044432528108e-14, -1.46098861545457, -1.26820029088798e-14, 25.4022189438783, 0.0, 1.26224640750767, 0.0, 0.201604912252983, 0.0, 2.48671247964024e-14, -4.62147333759582e-14, 1.13699707246687e-14, 2.73170113721277e-14, 0.0, -1.16019156631449e-14},
      {1.07812548063723e-13, 4.62910049886272, 3.05706909816037e-14, 6.80212710151675e-14, 11.3389341902768, 1.37694164051427e-13, 1.39999999999997, -2.94085166949894e-14, 6.15374450465501, 2.27762205246377e-14, 0.0, 9.10689503563544, 6.88154925391732e-14, -9.74125709179533, 8.21337683167568e-14, 0.0, 1.62739013366388e-14, 24.3167527192658, 0.0, 2.65317523789426, 0.0, 0.0, -3.41645528359454e-14, -1.18643803955631e-14, 0.0, 4.11108754361847e-14, 2.94583426993085e-14, 3.92693662020503e-14},
      {4, 3.90798504668055e-14, 7.07106781186545, 0.860662965823899, 0.0, 3.84900179459743, 0.0, 4.9193495504995, 2.8421709430404e-14, -3.6666666666667, 3.5527136788005e-14, 1.06581410364015e-14, 14, -2.04281036531029e-14, -5.9628479399995, 0.0, -1.95399252334028e-14, 0.0, 22.1523345479867, 0.0, 3.53815185068681, 1.06581410364015e-14, 0.0, 1.06581410364015e-14, 0.0, -1.06581410364015e-14, -1.24344978758018e-14, -2.30926389122033e-14},
      {4.08562073062058e-14, 1.03509833901355, 2.66453525910038e-14, 4.2632564145606e-14, 4.50748935855207, 0.0, 0.0, 0.0, 10.7349008024338, -1.4210854715202e-14, 2.48689957516035e-14, 0.0, 4.61852778244065e-14, 17.4574312188794, 1.15463194561016e-14, 0.0, -1.24344978758018e-14, 0.0, -1.19904086659517e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.59872115546023e-14, 6.94365074829411, 0.0, -2.1316282072803e-14, 11.3389341902768, 0.0, 0.0, 3.64153152077051e-14, 14.4023807555755, 0.0, -2.8421709430404e-14, 0.0, 0.0, 14.638501094228, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.06581410364015e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, 0.0, 0.0, 1.00238893814838e-14, 1.10203268213685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.7430501486615e-14, -1.31919723625605e-14, 1.66999400634242e-14, 1.55431223447522e-14, 0.0, 0.0, -1.28029878217882e-14, 0.0, 0.0, 1.58190862593983e-14, -1.44397138742109e-14, 1.37670544443665e-14, 1.22124532708767e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.5819888974716, 4.74341649025256, -0.912870929175291, -1.60079544105804e-14, 0.0, 0.0, -1.1866212790135e-14, 0.0, -1.43071643927217e-14, 0.0, 0.0, 2.47211172795625e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999999, 6.12372435695795, 3.53553390593273, -2.07366350120331e-14, 1.39640149270427e-14, 1.41655741853141e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56764023247501e-14, -1.50431115621767e-14, 1.39086792111606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 1.44075775708173e-14, 8.16496580927727, 0.0, 0.0, 2.43385868759341e-14, 1.31825635699174e-14, 1.07624574631509e-14, 0.0, 2.27191579282338e-14, 0.0, -1.06755936786165e-14, -1.25934260755721e-14, 0.0, 2.17401425123085e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872628, -1.49666295470959, 6.83130051063974, -1.05830052442583, 0.305505046330387, 0.0, 0.0, -1.37457891316557e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08190737602077e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749981, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823009, 0.0, 0.0, 0.0, 1.13741158687804e-14, 0.0, 2.33459687900779e-14, 0.0, 1.36360372383515e-14, 3.34065681329626e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.51684216112482e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.7320508075689, -5.09116882454313, 3.9191835884531, 2.00628756100422e-14, 9.69948452238572, 4.20000000000003, 1.16969399157362e-14, 0.0, 1.17642425588728e-14, 0.0, 0.0, 1.10553839760131e-14, 0.0, 1.27300784001554e-14, 2.78559279636319e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09128961818381e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.99999999999997, 0.0, -2.82842712474617, 0.0, -2.29857925031866e-14, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.65955640709783e-14, -2.96816089956311e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505164, -1.89736659610103, 7.42307488958092, -1.91662969499983, 0.663940002206976, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499971, 1.11065783844315e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923787, 1.67332005306816, 2.18217890235993, 5.7470489321539, -2.5373401896662, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255664, 0.0, 1.04222656600329e-14, -1.06375887470603e-14, 1.07967718338252e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08456253552859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593275, -7.37711113563319, 4.57142857142857, 1.64957219768459, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, -1.03536125415174e-14, 0.0, -1.39614417087899e-14, 0.0, -3.01392398313629e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11521523031648e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14679042535113e-14},
      {1.54919333848294, 6.64078308635359, 3.83405790253616, -2.55737707711793e-14, -6.19677335393186, 5.36656314599946, 0.0, 0.0, 13.4164078649987, 4.64758001544891, 0.0, 0.0, -3.65507700704065e-14, 0.0, -1.78145805098238e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.12419964909921e-14, 0.0, 0.0},
      {-3.57770876399963, 0.0, 8.85437744847147, -1.45011102990176e-14, -1.15800207085421e-14, -3.09838667696586, 1.31690980005837e-14, 0.0, -3.54853316726897e-14, 16.0996894379985, 0.0, 2.04767097383395e-14, 0.0, 0.0, 7.26012877007143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 2.37971367631246e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.60375652706051e-14},
      {2.70801280154531, 5.68564249775211, -2.18840481772877, 7.86606636127617, -2.61129805863301, 1.00508909139071, 9.55297122675766, -2.01843356939834, 0.670059394260504, -0.257905981099557, 10.899541274751, -1.06805465250651, 0.225667733462104, -0.0749149177264487, 0.0288347652770912, 1.02171894805494e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3963473210052e-14, -1.43590048800563e-14, -1.15654605661829e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278317, 3.42857142857142, 0.989743318610792, 3.04933917230525, 4.98646126209428, -2.72741187029097, 2.16024689946929, 8.3462484953168, -3.63654916038792, 1.51635079315149, 12.0498962651137, 10.6270096138722, -2.24536559755125, 0.745394019896827, -0.286902292026531, 1.90008311740697e-14, 1.24957151733913e-14, 1.04312904385513e-14, 0.0, 0.0, 0.0, 0.0, -3.25319437228956e-14, -1.2517029980776e-14, 0.0, 0.0, 0.0, 0.0},
      {2.16024689946928, 1.81422947044427, 2.96776330720949, 0.896421457000766, 5.41604758366943, -0.160356745147499, -9.52579344415684, 4.60043706228238, 5.34522483824851, -2.9831980992671, 0.0, 13.3887736279041, 9.90113162256753, -3.28687867566958, 1.26512019212762, 0.0, 0.0, 0.0, 0.0, -1.57662308306517e-14, 1.64789567449267e-14, 0.0, -1.99468978188409e-14, 0.0, 1.91344615226964e-14, -1.8591368083851e-14, 0.0, 0.0},
      {1.82574185835057, 0.766651877999936, 3.83609779052926, 8.63680425592139, 3.1689662255656, 3.65920700676623, 0.0, -8.74817765279706, 6.77630927178933, 0.521640530957315, 2.02573162699574e-14, 2.03303225027829e-14, 15.0623703313921, 8.33375849255571, -3.20766513935894, 0.0, 0.0, 0.0, 0.0, -1.02142091173571e-14, 1.6742321746502e-14, 0.0, 0.0, 0.0, -1.00021617305776e-14, -1.52121887383979e-14, -1.15802477227401e-14, 0.0},
      {1.41421356237311, -6.73025456655334, 3.65714285714287, 0.0, 9.45502781700863, 5.66881911901252, 0.0, 0.0, -6.99854212223767, 6.46497628513414, -1.09395096025001e-14, -1.95689877167713e-14, 3.90197339241587e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.43106152102648e-14, 1.68758828541263e-14, 0.0, -1.16934489964562e-14, 0.0, 1.60828774613292e-14, -1.64364103311653e-14, 0.0, -1.21276353558492e-14, 1.21761360853004e-14},
      {5.71547606649409, 0.0, -4.61880215351704, 0.0, -4.04119735150437e-14, 12.7279220613579, 1.64507870199088e-14, 1.66153404588214e-14, 4.64402652775878e-14, -3.26598632371092, 0.0, -6.08133454823929e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 1.96176241180187e-14, -1.76998180701063e-14, 0.0, -1.39133569044379e-14, 0.0, -1.33989355413171e-14, 0.0, 0.0, 0.0},
      {2.72554057547699, 5.84166072277396, -2.40906027914859, 8.21020142307167, -3.17979733805647, 1.31132632078237, 10.0955435712992, -2.84409720102688, 1.10151410945722, -0.454256762579502, 11.63494309511, -2.05221106320329, 0.578144970555719, -0.223914584265584, 0.0923408182151234, 12.916397846665, -1.06212013141345, 0.187340382013015, -0.0527771736469225, 0.0204405114594401, -0.00842952485249412, 1.32611263060464e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.14928768733338e-14},
      {2.50713268211204, 3.83824736789372, 0.44320263021394, 3.7761434373259, 4.17855447018676, -2.65373850300441, 3.09551647099837, 7.84856674813941, -4.48723055962561, 2.08927723509335, 2.14051820403804, 10.6973044844168, -3.98862017608732, 1.70662067037586, -0.730494307727279, 14.0416048465504, 12.7011094719391, -2.24026513582386, 0.631123203753831, -0.244432965754362, 0.100802456126489, 0.0, 1.1028497282019e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.26778683805537, 2.31455024943138, 2.40535117721185, 1.46385010942278, 5.66946709513846, -1.30930734141594, 0.699999999999965, 6.00059520857245, 3.07687225232749, -2.45676907455995, -11.6170293922684, 4.55344751781778, 8.41829962611463, -4.87062854589766, 2.27423326726946, -1.08288709162344e-14, 15.318114378055, 12.1583763596329, -3.42523450364477, 1.32658761894713, -0.547075513501957, -1.28422342841175e-14, 0.0, -1.57644850348927e-14, 0.0, 1.99379871158964e-14, 1.26138837187545e-14, 1.1771244541458e-14},
      {2.00000000000003, 1.22474487139161, 3.53553390593275, 0.430331482911974, 4.3333333333333, 1.92450089729876, 10.6711969546272, 2.45967477524975, 6.98593825719447, -1.83333333333333, 0.0, -11.0433489284527, 7.00000000000006, 4.38938112570169, -2.98142396999973, 0.0, 0.0, 16.8499258158604, 11.0761672739933, -4.28978113919838, 1.76907592534341, 0.0, -1.4210854715202e-14, 0.0, -1.33226762955019e-14, 2.1316282072803e-14, -1.06581410364015e-14, 0.0},
      {1.69030850945707, 0.517549169506777, 3.88449298033678, -9.09241209316633, 2.25374467927601, 4.7168503525846, 2.48689957516035e-14, 11.0869578749373, 5.36745040121694, 3.09889893400454, 0.0, -1.06581410364015e-14, -9.86013297183266, 8.72871560943968, -0.629940788348694, 0.0, -1.68753899743024e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.30930734141599, 7.61694539450408, 3.47182537414707, 4.61852778244065e-14, -8.51049771920367, 5.66946709513843, 2.1316282072803e-14, -1.59872115546023e-14, 12.4728276093045, 7.20119037778775, 4.79616346638068e-14, 1.4210854715202e-14, 1.06581410364015e-14, -7.60638829255661, 7.31925054711402, 0.0, 0.0, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 1.95399252334028e-14, 1.46549439250521e-14, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0},
      {-4.53557367611081, 2.93098878501041e-14, 9.62140470884726, 0.0, 5.6843418860808e-14, -5.23722936566392, -3.37507799486048e-14, -1.4210854715202e-14, 5.6843418860808e-14, 16.630436812406, -1.4210854715202e-14, 2.8421709430404e-14, 0.0, 0.0, -3.38061701891418, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.17443857259059e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

/// Evaluate order n derivatives of all basis functions at given point x in cell
void errornormsgm_finite_element_1::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double* values,
                                                    const double* x,
                                                    const double* vertex_coordinates,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 56; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 6)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[128];
    for (unsigned int r = 0; r < 128; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 56; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

/// Evaluate linear functional for dof i on the function f
double errornormsgm_finite_element_1::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double* vertex_coordinates,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.833333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.833333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.166666666666667*vertex_coordinates[2] + 0.833333333333333*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[3] + 0.833333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 11:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 12:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 13:
      {
        y[0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2];
      y[1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 14:
      {
        y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
      y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 15:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 16:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 17:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[2];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 18:
      {
        y[0] = 0.666666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.666666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 19:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 20:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 21:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 22:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 23:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 24:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 25:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 26:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 27:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 28:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 29:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 30:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 31:
      {
        y[0] = 0.833333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.833333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 32:
      {
        y[0] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 33:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 34:
      {
        y[0] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 35:
      {
        y[0] = 0.166666666666667*vertex_coordinates[2] + 0.833333333333333*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[3] + 0.833333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 36:
      {
        y[0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 37:
      {
        y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 38:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 39:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 40:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 41:
      {
        y[0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2];
      y[1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 42:
      {
        y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
      y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 43:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 44:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 45:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[2];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 46:
      {
        y[0] = 0.666666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.666666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 47:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 48:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 49:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 50:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 51:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 52:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 53:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 54:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 55:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void errornormsgm_finite_element_1::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const double* vertex_coordinates,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.833333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.833333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[2] + 0.833333333333333*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[3] + 0.833333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2];
    y[1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
    y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[2];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.666666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[20] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[21] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[22] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[23] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[24] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[25] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[26] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[27] = vals[0];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[28] = vals[1];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[29] = vals[1];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[30] = vals[1];
    y[0] = 0.833333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.833333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[31] = vals[1];
    y[0] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[32] = vals[1];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[33] = vals[1];
    y[0] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[34] = vals[1];
    y[0] = 0.166666666666667*vertex_coordinates[2] + 0.833333333333333*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[3] + 0.833333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[35] = vals[1];
    y[0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[36] = vals[1];
    y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[37] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[38] = vals[1];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[39] = vals[1];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[40] = vals[1];
    y[0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2];
    y[1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[41] = vals[1];
    y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
    y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[42] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[43] = vals[1];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[44] = vals[1];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[2];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[45] = vals[1];
    y[0] = 0.666666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.666666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[46] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[47] = vals[1];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[48] = vals[1];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[49] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[50] = vals[1];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[51] = vals[1];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[52] = vals[1];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[53] = vals[1];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[54] = vals[1];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[55] = vals[1];
}

/// Interpolate vertex values from dof values
void errornormsgm_finite_element_1::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const double* vertex_coordinates,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[28];
    vertex_values[3] = dof_values[29];
    vertex_values[5] = dof_values[30];
}

/// Map coordinate xhat from reference cell to coordinate x in cell
void errornormsgm_finite_element_1::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void errornormsgm_finite_element_1::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
}

/// Return the number of sub elements (for a mixed element)
std::size_t errornormsgm_finite_element_1::num_sub_elements() const
{
    return 2;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* errornormsgm_finite_element_1::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new errornormsgm_finite_element_0();
        break;
      }
    case 1:
      {
        return new errornormsgm_finite_element_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new class instance
ufc::finite_element* errornormsgm_finite_element_1::create() const
{
    return new errornormsgm_finite_element_1();
}

/// Constructor
errornormsgm_dofmap_0::errornormsgm_dofmap_0() : ufc::dofmap()
{
    // Do nothing
}

/// Destructor
errornormsgm_dofmap_0::~errornormsgm_dofmap_0()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* errornormsgm_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', Domain(Cell('triangle', 2)), 6, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool errornormsgm_dofmap_0::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
}

/// Return the topological dimension of the associated cell shape
std::size_t errornormsgm_dofmap_0::topological_dimension() const
{
    return 2;
}

/// Return the geometric dimension of the associated cell shape
std::size_t errornormsgm_dofmap_0::geometric_dimension() const
{
    return 2;
}

/// Return the dimension of the global finite element function space
std::size_t errornormsgm_dofmap_0::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 28*num_global_entities[2];
}

/// Return the dimension of the local finite element function space for a cell
std::size_t errornormsgm_dofmap_0::local_dimension() const
{
    return 28;
}

/// Return the number of dofs on each cell facet
std::size_t errornormsgm_dofmap_0::num_facet_dofs() const
{
    return 0;
}

/// Return the number of dofs associated with each cell entity of dimension d
std::size_t errornormsgm_dofmap_0::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 28;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void errornormsgm_dofmap_0::tabulate_dofs(std::size_t* dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const ufc::cell& c) const
{
    dofs[0] = 28*c.entity_indices[2][0];
    dofs[1] = 28*c.entity_indices[2][0] + 1;
    dofs[2] = 28*c.entity_indices[2][0] + 2;
    dofs[3] = 28*c.entity_indices[2][0] + 3;
    dofs[4] = 28*c.entity_indices[2][0] + 4;
    dofs[5] = 28*c.entity_indices[2][0] + 5;
    dofs[6] = 28*c.entity_indices[2][0] + 6;
    dofs[7] = 28*c.entity_indices[2][0] + 7;
    dofs[8] = 28*c.entity_indices[2][0] + 8;
    dofs[9] = 28*c.entity_indices[2][0] + 9;
    dofs[10] = 28*c.entity_indices[2][0] + 10;
    dofs[11] = 28*c.entity_indices[2][0] + 11;
    dofs[12] = 28*c.entity_indices[2][0] + 12;
    dofs[13] = 28*c.entity_indices[2][0] + 13;
    dofs[14] = 28*c.entity_indices[2][0] + 14;
    dofs[15] = 28*c.entity_indices[2][0] + 15;
    dofs[16] = 28*c.entity_indices[2][0] + 16;
    dofs[17] = 28*c.entity_indices[2][0] + 17;
    dofs[18] = 28*c.entity_indices[2][0] + 18;
    dofs[19] = 28*c.entity_indices[2][0] + 19;
    dofs[20] = 28*c.entity_indices[2][0] + 20;
    dofs[21] = 28*c.entity_indices[2][0] + 21;
    dofs[22] = 28*c.entity_indices[2][0] + 22;
    dofs[23] = 28*c.entity_indices[2][0] + 23;
    dofs[24] = 28*c.entity_indices[2][0] + 24;
    dofs[25] = 28*c.entity_indices[2][0] + 25;
    dofs[26] = 28*c.entity_indices[2][0] + 26;
    dofs[27] = 28*c.entity_indices[2][0] + 27;
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void errornormsgm_dofmap_0::tabulate_facet_dofs(std::size_t* dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void errornormsgm_dofmap_0::tabulate_entity_dofs(std::size_t* dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
      dofs[6] = 6;
      dofs[7] = 7;
      dofs[8] = 8;
      dofs[9] = 9;
      dofs[10] = 10;
      dofs[11] = 11;
      dofs[12] = 12;
      dofs[13] = 13;
      dofs[14] = 14;
      dofs[15] = 15;
      dofs[16] = 16;
      dofs[17] = 17;
      dofs[18] = 18;
      dofs[19] = 19;
      dofs[20] = 20;
      dofs[21] = 21;
      dofs[22] = 22;
      dofs[23] = 23;
      dofs[24] = 24;
      dofs[25] = 25;
      dofs[26] = 26;
      dofs[27] = 27;
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void errornormsgm_dofmap_0::tabulate_coordinates(double** dof_coordinates,
                                         const double* vertex_coordinates) const
{
    dof_coordinates[0][0] = vertex_coordinates[0];
    dof_coordinates[0][1] = vertex_coordinates[1];
    dof_coordinates[1][0] = vertex_coordinates[2];
    dof_coordinates[1][1] = vertex_coordinates[3];
    dof_coordinates[2][0] = vertex_coordinates[4];
    dof_coordinates[2][1] = vertex_coordinates[5];
    dof_coordinates[3][0] = 0.833333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[3][1] = 0.833333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[4][0] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[4][1] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[5][0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[5][1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[6][0] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    dof_coordinates[6][1] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    dof_coordinates[7][0] = 0.166666666666667*vertex_coordinates[2] + 0.833333333333333*vertex_coordinates[4];
    dof_coordinates[7][1] = 0.166666666666667*vertex_coordinates[3] + 0.833333333333333*vertex_coordinates[5];
    dof_coordinates[8][0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[8][1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[9][0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[9][1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[10][0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[10][1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[11][0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
    dof_coordinates[11][1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
    dof_coordinates[12][0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[4];
    dof_coordinates[12][1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[5];
    dof_coordinates[13][0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2];
    dof_coordinates[13][1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3];
    dof_coordinates[14][0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
    dof_coordinates[14][1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
    dof_coordinates[15][0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[15][1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[16][0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
    dof_coordinates[16][1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
    dof_coordinates[17][0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[2];
    dof_coordinates[17][1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[3];
    dof_coordinates[18][0] = 0.666666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[18][1] = 0.666666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[19][0] = 0.5*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[19][1] = 0.5*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[20][0] = 0.333333333333333*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[20][1] = 0.333333333333333*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[21][0] = 0.166666666666667*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[21][1] = 0.166666666666667*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[22][0] = 0.5*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[22][1] = 0.5*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[23][0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[23][1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[24][0] = 0.166666666666667*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[24][1] = 0.166666666666667*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[25][0] = 0.333333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[25][1] = 0.333333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[26][0] = 0.166666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[26][1] = 0.166666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[27][0] = 0.166666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    dof_coordinates[27][1] = 0.166666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
}

/// Return the number of sub dofmaps (for a mixed element)
std::size_t errornormsgm_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* errornormsgm_dofmap_0::create_sub_dofmap(std::size_t i) const
{
    return 0;
}

/// Create a new class instance
ufc::dofmap* errornormsgm_dofmap_0::create() const
{
    return new errornormsgm_dofmap_0();
}

/// Constructor
errornormsgm_dofmap_1::errornormsgm_dofmap_1() : ufc::dofmap()
{
    // Do nothing
}

/// Destructor
errornormsgm_dofmap_1::~errornormsgm_dofmap_1()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* errornormsgm_dofmap_1::signature() const
{
    return "FFC dofmap for VectorElement('Discontinuous Lagrange', Domain(Cell('triangle', 2)), 6, 2, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool errornormsgm_dofmap_1::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
}

/// Return the topological dimension of the associated cell shape
std::size_t errornormsgm_dofmap_1::topological_dimension() const
{
    return 2;
}

/// Return the geometric dimension of the associated cell shape
std::size_t errornormsgm_dofmap_1::geometric_dimension() const
{
    return 2;
}

/// Return the dimension of the global finite element function space
std::size_t errornormsgm_dofmap_1::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 56*num_global_entities[2];
}

/// Return the dimension of the local finite element function space for a cell
std::size_t errornormsgm_dofmap_1::local_dimension() const
{
    return 56;
}

/// Return the number of dofs on each cell facet
std::size_t errornormsgm_dofmap_1::num_facet_dofs() const
{
    return 0;
}

/// Return the number of dofs associated with each cell entity of dimension d
std::size_t errornormsgm_dofmap_1::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 56;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void errornormsgm_dofmap_1::tabulate_dofs(std::size_t* dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const ufc::cell& c) const
{
    unsigned int offset = 0;
    dofs[0] = offset + 28*c.entity_indices[2][0];
    dofs[1] = offset + 28*c.entity_indices[2][0] + 1;
    dofs[2] = offset + 28*c.entity_indices[2][0] + 2;
    dofs[3] = offset + 28*c.entity_indices[2][0] + 3;
    dofs[4] = offset + 28*c.entity_indices[2][0] + 4;
    dofs[5] = offset + 28*c.entity_indices[2][0] + 5;
    dofs[6] = offset + 28*c.entity_indices[2][0] + 6;
    dofs[7] = offset + 28*c.entity_indices[2][0] + 7;
    dofs[8] = offset + 28*c.entity_indices[2][0] + 8;
    dofs[9] = offset + 28*c.entity_indices[2][0] + 9;
    dofs[10] = offset + 28*c.entity_indices[2][0] + 10;
    dofs[11] = offset + 28*c.entity_indices[2][0] + 11;
    dofs[12] = offset + 28*c.entity_indices[2][0] + 12;
    dofs[13] = offset + 28*c.entity_indices[2][0] + 13;
    dofs[14] = offset + 28*c.entity_indices[2][0] + 14;
    dofs[15] = offset + 28*c.entity_indices[2][0] + 15;
    dofs[16] = offset + 28*c.entity_indices[2][0] + 16;
    dofs[17] = offset + 28*c.entity_indices[2][0] + 17;
    dofs[18] = offset + 28*c.entity_indices[2][0] + 18;
    dofs[19] = offset + 28*c.entity_indices[2][0] + 19;
    dofs[20] = offset + 28*c.entity_indices[2][0] + 20;
    dofs[21] = offset + 28*c.entity_indices[2][0] + 21;
    dofs[22] = offset + 28*c.entity_indices[2][0] + 22;
    dofs[23] = offset + 28*c.entity_indices[2][0] + 23;
    dofs[24] = offset + 28*c.entity_indices[2][0] + 24;
    dofs[25] = offset + 28*c.entity_indices[2][0] + 25;
    dofs[26] = offset + 28*c.entity_indices[2][0] + 26;
    dofs[27] = offset + 28*c.entity_indices[2][0] + 27;
    offset += 28*num_global_entities[2];
    dofs[28] = offset + 28*c.entity_indices[2][0];
    dofs[29] = offset + 28*c.entity_indices[2][0] + 1;
    dofs[30] = offset + 28*c.entity_indices[2][0] + 2;
    dofs[31] = offset + 28*c.entity_indices[2][0] + 3;
    dofs[32] = offset + 28*c.entity_indices[2][0] + 4;
    dofs[33] = offset + 28*c.entity_indices[2][0] + 5;
    dofs[34] = offset + 28*c.entity_indices[2][0] + 6;
    dofs[35] = offset + 28*c.entity_indices[2][0] + 7;
    dofs[36] = offset + 28*c.entity_indices[2][0] + 8;
    dofs[37] = offset + 28*c.entity_indices[2][0] + 9;
    dofs[38] = offset + 28*c.entity_indices[2][0] + 10;
    dofs[39] = offset + 28*c.entity_indices[2][0] + 11;
    dofs[40] = offset + 28*c.entity_indices[2][0] + 12;
    dofs[41] = offset + 28*c.entity_indices[2][0] + 13;
    dofs[42] = offset + 28*c.entity_indices[2][0] + 14;
    dofs[43] = offset + 28*c.entity_indices[2][0] + 15;
    dofs[44] = offset + 28*c.entity_indices[2][0] + 16;
    dofs[45] = offset + 28*c.entity_indices[2][0] + 17;
    dofs[46] = offset + 28*c.entity_indices[2][0] + 18;
    dofs[47] = offset + 28*c.entity_indices[2][0] + 19;
    dofs[48] = offset + 28*c.entity_indices[2][0] + 20;
    dofs[49] = offset + 28*c.entity_indices[2][0] + 21;
    dofs[50] = offset + 28*c.entity_indices[2][0] + 22;
    dofs[51] = offset + 28*c.entity_indices[2][0] + 23;
    dofs[52] = offset + 28*c.entity_indices[2][0] + 24;
    dofs[53] = offset + 28*c.entity_indices[2][0] + 25;
    dofs[54] = offset + 28*c.entity_indices[2][0] + 26;
    dofs[55] = offset + 28*c.entity_indices[2][0] + 27;
    offset += 28*num_global_entities[2];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void errornormsgm_dofmap_1::tabulate_facet_dofs(std::size_t* dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void errornormsgm_dofmap_1::tabulate_entity_dofs(std::size_t* dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
      dofs[6] = 6;
      dofs[7] = 7;
      dofs[8] = 8;
      dofs[9] = 9;
      dofs[10] = 10;
      dofs[11] = 11;
      dofs[12] = 12;
      dofs[13] = 13;
      dofs[14] = 14;
      dofs[15] = 15;
      dofs[16] = 16;
      dofs[17] = 17;
      dofs[18] = 18;
      dofs[19] = 19;
      dofs[20] = 20;
      dofs[21] = 21;
      dofs[22] = 22;
      dofs[23] = 23;
      dofs[24] = 24;
      dofs[25] = 25;
      dofs[26] = 26;
      dofs[27] = 27;
      dofs[28] = 28;
      dofs[29] = 29;
      dofs[30] = 30;
      dofs[31] = 31;
      dofs[32] = 32;
      dofs[33] = 33;
      dofs[34] = 34;
      dofs[35] = 35;
      dofs[36] = 36;
      dofs[37] = 37;
      dofs[38] = 38;
      dofs[39] = 39;
      dofs[40] = 40;
      dofs[41] = 41;
      dofs[42] = 42;
      dofs[43] = 43;
      dofs[44] = 44;
      dofs[45] = 45;
      dofs[46] = 46;
      dofs[47] = 47;
      dofs[48] = 48;
      dofs[49] = 49;
      dofs[50] = 50;
      dofs[51] = 51;
      dofs[52] = 52;
      dofs[53] = 53;
      dofs[54] = 54;
      dofs[55] = 55;
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void errornormsgm_dofmap_1::tabulate_coordinates(double** dof_coordinates,
                                         const double* vertex_coordinates) const
{
    dof_coordinates[0][0] = vertex_coordinates[0];
    dof_coordinates[0][1] = vertex_coordinates[1];
    dof_coordinates[1][0] = vertex_coordinates[2];
    dof_coordinates[1][1] = vertex_coordinates[3];
    dof_coordinates[2][0] = vertex_coordinates[4];
    dof_coordinates[2][1] = vertex_coordinates[5];
    dof_coordinates[3][0] = 0.833333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[3][1] = 0.833333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[4][0] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[4][1] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[5][0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[5][1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[6][0] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    dof_coordinates[6][1] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    dof_coordinates[7][0] = 0.166666666666667*vertex_coordinates[2] + 0.833333333333333*vertex_coordinates[4];
    dof_coordinates[7][1] = 0.166666666666667*vertex_coordinates[3] + 0.833333333333333*vertex_coordinates[5];
    dof_coordinates[8][0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[8][1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[9][0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[9][1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[10][0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[10][1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[11][0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
    dof_coordinates[11][1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
    dof_coordinates[12][0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[4];
    dof_coordinates[12][1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[5];
    dof_coordinates[13][0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2];
    dof_coordinates[13][1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3];
    dof_coordinates[14][0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
    dof_coordinates[14][1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
    dof_coordinates[15][0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[15][1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[16][0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
    dof_coordinates[16][1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
    dof_coordinates[17][0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[2];
    dof_coordinates[17][1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[3];
    dof_coordinates[18][0] = 0.666666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[18][1] = 0.666666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[19][0] = 0.5*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[19][1] = 0.5*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[20][0] = 0.333333333333333*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[20][1] = 0.333333333333333*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[21][0] = 0.166666666666667*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[21][1] = 0.166666666666667*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[22][0] = 0.5*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[22][1] = 0.5*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[23][0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[23][1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[24][0] = 0.166666666666667*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[24][1] = 0.166666666666667*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[25][0] = 0.333333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[25][1] = 0.333333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[26][0] = 0.166666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[26][1] = 0.166666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[27][0] = 0.166666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    dof_coordinates[27][1] = 0.166666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    dof_coordinates[28][0] = vertex_coordinates[0];
    dof_coordinates[28][1] = vertex_coordinates[1];
    dof_coordinates[29][0] = vertex_coordinates[2];
    dof_coordinates[29][1] = vertex_coordinates[3];
    dof_coordinates[30][0] = vertex_coordinates[4];
    dof_coordinates[30][1] = vertex_coordinates[5];
    dof_coordinates[31][0] = 0.833333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[31][1] = 0.833333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[32][0] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[32][1] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[33][0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[33][1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[34][0] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    dof_coordinates[34][1] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    dof_coordinates[35][0] = 0.166666666666667*vertex_coordinates[2] + 0.833333333333333*vertex_coordinates[4];
    dof_coordinates[35][1] = 0.166666666666667*vertex_coordinates[3] + 0.833333333333333*vertex_coordinates[5];
    dof_coordinates[36][0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[36][1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[37][0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[37][1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[38][0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[38][1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[39][0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
    dof_coordinates[39][1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
    dof_coordinates[40][0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[4];
    dof_coordinates[40][1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[5];
    dof_coordinates[41][0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2];
    dof_coordinates[41][1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3];
    dof_coordinates[42][0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
    dof_coordinates[42][1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
    dof_coordinates[43][0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[43][1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[44][0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
    dof_coordinates[44][1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
    dof_coordinates[45][0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[2];
    dof_coordinates[45][1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[3];
    dof_coordinates[46][0] = 0.666666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[46][1] = 0.666666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[47][0] = 0.5*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[47][1] = 0.5*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[48][0] = 0.333333333333333*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[48][1] = 0.333333333333333*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[49][0] = 0.166666666666667*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[49][1] = 0.166666666666667*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[50][0] = 0.5*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[50][1] = 0.5*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[51][0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[51][1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[52][0] = 0.166666666666667*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[52][1] = 0.166666666666667*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[53][0] = 0.333333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[53][1] = 0.333333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[54][0] = 0.166666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[54][1] = 0.166666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[55][0] = 0.166666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    dof_coordinates[55][1] = 0.166666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
}

/// Return the number of sub dofmaps (for a mixed element)
std::size_t errornormsgm_dofmap_1::num_sub_dofmaps() const
{
    return 2;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* errornormsgm_dofmap_1::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new errornormsgm_dofmap_0();
        break;
      }
    case 1:
      {
        return new errornormsgm_dofmap_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new class instance
ufc::dofmap* errornormsgm_dofmap_1::create() const
{
    return new errornormsgm_dofmap_1();
}

/// Constructor
errornormsgm_cell_integral_0_otherwise::errornormsgm_cell_integral_0_otherwise() : ufc::cell_integral()
{
    // Do nothing
}

/// Destructor
errornormsgm_cell_integral_0_otherwise::~errornormsgm_cell_integral_0_otherwise()
{
    // Do nothing
}

/// Tabulate which form coefficients are used by this integral
const std::vector<bool> & errornormsgm_cell_integral_0_otherwise::enabled_coefficients() const
{
    static const std::vector<bool> enabled({true});
    return enabled;
}

/// Tabulate the tensor for the contribution from a local cell
void errornormsgm_cell_integral_0_otherwise::tabulate_tensor(double*  A,
                                    const double * const *  w,
                                    const double*  vertex_coordinates,
                                    int cell_orientation) const
{
    // Number of operations (multiply-add pairs) for Jacobian data:      3
    // Number of operations (multiply-add pairs) for geometry tensor:    2352
    // Number of operations (multiply-add pairs) for tensor contraction: 1567
    // Total number of operations (multiply-add pairs):                  3922
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0 = det*w[0][0]*w[0][0]*(1.0);
    const double G0_0_1 = det*w[0][0]*w[0][1]*(1.0);
    const double G0_0_2 = det*w[0][0]*w[0][2]*(1.0);
    const double G0_0_3 = det*w[0][0]*w[0][3]*(1.0);
    const double G0_0_4 = det*w[0][0]*w[0][4]*(1.0);
    const double G0_0_5 = det*w[0][0]*w[0][5]*(1.0);
    const double G0_0_6 = det*w[0][0]*w[0][6]*(1.0);
    const double G0_0_7 = det*w[0][0]*w[0][7]*(1.0);
    const double G0_0_8 = det*w[0][0]*w[0][8]*(1.0);
    const double G0_0_9 = det*w[0][0]*w[0][9]*(1.0);
    const double G0_0_10 = det*w[0][0]*w[0][10]*(1.0);
    const double G0_0_11 = det*w[0][0]*w[0][11]*(1.0);
    const double G0_0_12 = det*w[0][0]*w[0][12]*(1.0);
    const double G0_0_13 = det*w[0][0]*w[0][13]*(1.0);
    const double G0_0_14 = det*w[0][0]*w[0][14]*(1.0);
    const double G0_0_15 = det*w[0][0]*w[0][15]*(1.0);
    const double G0_0_16 = det*w[0][0]*w[0][16]*(1.0);
    const double G0_0_17 = det*w[0][0]*w[0][17]*(1.0);
    const double G0_0_18 = det*w[0][0]*w[0][18]*(1.0);
    const double G0_0_19 = det*w[0][0]*w[0][19]*(1.0);
    const double G0_0_20 = det*w[0][0]*w[0][20]*(1.0);
    const double G0_0_21 = det*w[0][0]*w[0][21]*(1.0);
    const double G0_0_22 = det*w[0][0]*w[0][22]*(1.0);
    const double G0_0_23 = det*w[0][0]*w[0][23]*(1.0);
    const double G0_0_24 = det*w[0][0]*w[0][24]*(1.0);
    const double G0_0_25 = det*w[0][0]*w[0][25]*(1.0);
    const double G0_0_26 = det*w[0][0]*w[0][26]*(1.0);
    const double G0_0_27 = det*w[0][0]*w[0][27]*(1.0);
    const double G0_1_0 = det*w[0][1]*w[0][0]*(1.0);
    const double G0_1_1 = det*w[0][1]*w[0][1]*(1.0);
    const double G0_1_2 = det*w[0][1]*w[0][2]*(1.0);
    const double G0_1_3 = det*w[0][1]*w[0][3]*(1.0);
    const double G0_1_4 = det*w[0][1]*w[0][4]*(1.0);
    const double G0_1_5 = det*w[0][1]*w[0][5]*(1.0);
    const double G0_1_6 = det*w[0][1]*w[0][6]*(1.0);
    const double G0_1_7 = det*w[0][1]*w[0][7]*(1.0);
    const double G0_1_8 = det*w[0][1]*w[0][8]*(1.0);
    const double G0_1_9 = det*w[0][1]*w[0][9]*(1.0);
    const double G0_1_10 = det*w[0][1]*w[0][10]*(1.0);
    const double G0_1_11 = det*w[0][1]*w[0][11]*(1.0);
    const double G0_1_12 = det*w[0][1]*w[0][12]*(1.0);
    const double G0_1_13 = det*w[0][1]*w[0][13]*(1.0);
    const double G0_1_14 = det*w[0][1]*w[0][14]*(1.0);
    const double G0_1_15 = det*w[0][1]*w[0][15]*(1.0);
    const double G0_1_16 = det*w[0][1]*w[0][16]*(1.0);
    const double G0_1_17 = det*w[0][1]*w[0][17]*(1.0);
    const double G0_1_18 = det*w[0][1]*w[0][18]*(1.0);
    const double G0_1_19 = det*w[0][1]*w[0][19]*(1.0);
    const double G0_1_20 = det*w[0][1]*w[0][20]*(1.0);
    const double G0_1_21 = det*w[0][1]*w[0][21]*(1.0);
    const double G0_1_22 = det*w[0][1]*w[0][22]*(1.0);
    const double G0_1_23 = det*w[0][1]*w[0][23]*(1.0);
    const double G0_1_24 = det*w[0][1]*w[0][24]*(1.0);
    const double G0_1_25 = det*w[0][1]*w[0][25]*(1.0);
    const double G0_1_26 = det*w[0][1]*w[0][26]*(1.0);
    const double G0_1_27 = det*w[0][1]*w[0][27]*(1.0);
    const double G0_2_0 = det*w[0][2]*w[0][0]*(1.0);
    const double G0_2_1 = det*w[0][2]*w[0][1]*(1.0);
    const double G0_2_2 = det*w[0][2]*w[0][2]*(1.0);
    const double G0_2_3 = det*w[0][2]*w[0][3]*(1.0);
    const double G0_2_4 = det*w[0][2]*w[0][4]*(1.0);
    const double G0_2_5 = det*w[0][2]*w[0][5]*(1.0);
    const double G0_2_6 = det*w[0][2]*w[0][6]*(1.0);
    const double G0_2_7 = det*w[0][2]*w[0][7]*(1.0);
    const double G0_2_8 = det*w[0][2]*w[0][8]*(1.0);
    const double G0_2_9 = det*w[0][2]*w[0][9]*(1.0);
    const double G0_2_10 = det*w[0][2]*w[0][10]*(1.0);
    const double G0_2_11 = det*w[0][2]*w[0][11]*(1.0);
    const double G0_2_12 = det*w[0][2]*w[0][12]*(1.0);
    const double G0_2_13 = det*w[0][2]*w[0][13]*(1.0);
    const double G0_2_14 = det*w[0][2]*w[0][14]*(1.0);
    const double G0_2_15 = det*w[0][2]*w[0][15]*(1.0);
    const double G0_2_16 = det*w[0][2]*w[0][16]*(1.0);
    const double G0_2_17 = det*w[0][2]*w[0][17]*(1.0);
    const double G0_2_18 = det*w[0][2]*w[0][18]*(1.0);
    const double G0_2_19 = det*w[0][2]*w[0][19]*(1.0);
    const double G0_2_20 = det*w[0][2]*w[0][20]*(1.0);
    const double G0_2_21 = det*w[0][2]*w[0][21]*(1.0);
    const double G0_2_22 = det*w[0][2]*w[0][22]*(1.0);
    const double G0_2_23 = det*w[0][2]*w[0][23]*(1.0);
    const double G0_2_24 = det*w[0][2]*w[0][24]*(1.0);
    const double G0_2_25 = det*w[0][2]*w[0][25]*(1.0);
    const double G0_2_26 = det*w[0][2]*w[0][26]*(1.0);
    const double G0_2_27 = det*w[0][2]*w[0][27]*(1.0);
    const double G0_3_0 = det*w[0][3]*w[0][0]*(1.0);
    const double G0_3_1 = det*w[0][3]*w[0][1]*(1.0);
    const double G0_3_2 = det*w[0][3]*w[0][2]*(1.0);
    const double G0_3_3 = det*w[0][3]*w[0][3]*(1.0);
    const double G0_3_4 = det*w[0][3]*w[0][4]*(1.0);
    const double G0_3_5 = det*w[0][3]*w[0][5]*(1.0);
    const double G0_3_6 = det*w[0][3]*w[0][6]*(1.0);
    const double G0_3_7 = det*w[0][3]*w[0][7]*(1.0);
    const double G0_3_8 = det*w[0][3]*w[0][8]*(1.0);
    const double G0_3_9 = det*w[0][3]*w[0][9]*(1.0);
    const double G0_3_10 = det*w[0][3]*w[0][10]*(1.0);
    const double G0_3_11 = det*w[0][3]*w[0][11]*(1.0);
    const double G0_3_12 = det*w[0][3]*w[0][12]*(1.0);
    const double G0_3_13 = det*w[0][3]*w[0][13]*(1.0);
    const double G0_3_14 = det*w[0][3]*w[0][14]*(1.0);
    const double G0_3_15 = det*w[0][3]*w[0][15]*(1.0);
    const double G0_3_16 = det*w[0][3]*w[0][16]*(1.0);
    const double G0_3_17 = det*w[0][3]*w[0][17]*(1.0);
    const double G0_3_18 = det*w[0][3]*w[0][18]*(1.0);
    const double G0_3_19 = det*w[0][3]*w[0][19]*(1.0);
    const double G0_3_20 = det*w[0][3]*w[0][20]*(1.0);
    const double G0_3_21 = det*w[0][3]*w[0][21]*(1.0);
    const double G0_3_22 = det*w[0][3]*w[0][22]*(1.0);
    const double G0_3_23 = det*w[0][3]*w[0][23]*(1.0);
    const double G0_3_24 = det*w[0][3]*w[0][24]*(1.0);
    const double G0_3_25 = det*w[0][3]*w[0][25]*(1.0);
    const double G0_3_26 = det*w[0][3]*w[0][26]*(1.0);
    const double G0_3_27 = det*w[0][3]*w[0][27]*(1.0);
    const double G0_4_0 = det*w[0][4]*w[0][0]*(1.0);
    const double G0_4_1 = det*w[0][4]*w[0][1]*(1.0);
    const double G0_4_2 = det*w[0][4]*w[0][2]*(1.0);
    const double G0_4_3 = det*w[0][4]*w[0][3]*(1.0);
    const double G0_4_4 = det*w[0][4]*w[0][4]*(1.0);
    const double G0_4_5 = det*w[0][4]*w[0][5]*(1.0);
    const double G0_4_6 = det*w[0][4]*w[0][6]*(1.0);
    const double G0_4_7 = det*w[0][4]*w[0][7]*(1.0);
    const double G0_4_8 = det*w[0][4]*w[0][8]*(1.0);
    const double G0_4_9 = det*w[0][4]*w[0][9]*(1.0);
    const double G0_4_10 = det*w[0][4]*w[0][10]*(1.0);
    const double G0_4_11 = det*w[0][4]*w[0][11]*(1.0);
    const double G0_4_12 = det*w[0][4]*w[0][12]*(1.0);
    const double G0_4_13 = det*w[0][4]*w[0][13]*(1.0);
    const double G0_4_14 = det*w[0][4]*w[0][14]*(1.0);
    const double G0_4_15 = det*w[0][4]*w[0][15]*(1.0);
    const double G0_4_16 = det*w[0][4]*w[0][16]*(1.0);
    const double G0_4_17 = det*w[0][4]*w[0][17]*(1.0);
    const double G0_4_18 = det*w[0][4]*w[0][18]*(1.0);
    const double G0_4_19 = det*w[0][4]*w[0][19]*(1.0);
    const double G0_4_20 = det*w[0][4]*w[0][20]*(1.0);
    const double G0_4_21 = det*w[0][4]*w[0][21]*(1.0);
    const double G0_4_22 = det*w[0][4]*w[0][22]*(1.0);
    const double G0_4_23 = det*w[0][4]*w[0][23]*(1.0);
    const double G0_4_24 = det*w[0][4]*w[0][24]*(1.0);
    const double G0_4_25 = det*w[0][4]*w[0][25]*(1.0);
    const double G0_4_26 = det*w[0][4]*w[0][26]*(1.0);
    const double G0_4_27 = det*w[0][4]*w[0][27]*(1.0);
    const double G0_5_0 = det*w[0][5]*w[0][0]*(1.0);
    const double G0_5_1 = det*w[0][5]*w[0][1]*(1.0);
    const double G0_5_2 = det*w[0][5]*w[0][2]*(1.0);
    const double G0_5_3 = det*w[0][5]*w[0][3]*(1.0);
    const double G0_5_4 = det*w[0][5]*w[0][4]*(1.0);
    const double G0_5_5 = det*w[0][5]*w[0][5]*(1.0);
    const double G0_5_6 = det*w[0][5]*w[0][6]*(1.0);
    const double G0_5_7 = det*w[0][5]*w[0][7]*(1.0);
    const double G0_5_8 = det*w[0][5]*w[0][8]*(1.0);
    const double G0_5_9 = det*w[0][5]*w[0][9]*(1.0);
    const double G0_5_10 = det*w[0][5]*w[0][10]*(1.0);
    const double G0_5_11 = det*w[0][5]*w[0][11]*(1.0);
    const double G0_5_12 = det*w[0][5]*w[0][12]*(1.0);
    const double G0_5_13 = det*w[0][5]*w[0][13]*(1.0);
    const double G0_5_14 = det*w[0][5]*w[0][14]*(1.0);
    const double G0_5_15 = det*w[0][5]*w[0][15]*(1.0);
    const double G0_5_16 = det*w[0][5]*w[0][16]*(1.0);
    const double G0_5_17 = det*w[0][5]*w[0][17]*(1.0);
    const double G0_5_18 = det*w[0][5]*w[0][18]*(1.0);
    const double G0_5_19 = det*w[0][5]*w[0][19]*(1.0);
    const double G0_5_20 = det*w[0][5]*w[0][20]*(1.0);
    const double G0_5_21 = det*w[0][5]*w[0][21]*(1.0);
    const double G0_5_22 = det*w[0][5]*w[0][22]*(1.0);
    const double G0_5_23 = det*w[0][5]*w[0][23]*(1.0);
    const double G0_5_24 = det*w[0][5]*w[0][24]*(1.0);
    const double G0_5_25 = det*w[0][5]*w[0][25]*(1.0);
    const double G0_5_26 = det*w[0][5]*w[0][26]*(1.0);
    const double G0_5_27 = det*w[0][5]*w[0][27]*(1.0);
    const double G0_6_0 = det*w[0][6]*w[0][0]*(1.0);
    const double G0_6_1 = det*w[0][6]*w[0][1]*(1.0);
    const double G0_6_2 = det*w[0][6]*w[0][2]*(1.0);
    const double G0_6_3 = det*w[0][6]*w[0][3]*(1.0);
    const double G0_6_4 = det*w[0][6]*w[0][4]*(1.0);
    const double G0_6_5 = det*w[0][6]*w[0][5]*(1.0);
    const double G0_6_6 = det*w[0][6]*w[0][6]*(1.0);
    const double G0_6_7 = det*w[0][6]*w[0][7]*(1.0);
    const double G0_6_8 = det*w[0][6]*w[0][8]*(1.0);
    const double G0_6_9 = det*w[0][6]*w[0][9]*(1.0);
    const double G0_6_10 = det*w[0][6]*w[0][10]*(1.0);
    const double G0_6_11 = det*w[0][6]*w[0][11]*(1.0);
    const double G0_6_12 = det*w[0][6]*w[0][12]*(1.0);
    const double G0_6_13 = det*w[0][6]*w[0][13]*(1.0);
    const double G0_6_14 = det*w[0][6]*w[0][14]*(1.0);
    const double G0_6_15 = det*w[0][6]*w[0][15]*(1.0);
    const double G0_6_16 = det*w[0][6]*w[0][16]*(1.0);
    const double G0_6_17 = det*w[0][6]*w[0][17]*(1.0);
    const double G0_6_18 = det*w[0][6]*w[0][18]*(1.0);
    const double G0_6_19 = det*w[0][6]*w[0][19]*(1.0);
    const double G0_6_20 = det*w[0][6]*w[0][20]*(1.0);
    const double G0_6_21 = det*w[0][6]*w[0][21]*(1.0);
    const double G0_6_22 = det*w[0][6]*w[0][22]*(1.0);
    const double G0_6_23 = det*w[0][6]*w[0][23]*(1.0);
    const double G0_6_24 = det*w[0][6]*w[0][24]*(1.0);
    const double G0_6_25 = det*w[0][6]*w[0][25]*(1.0);
    const double G0_6_26 = det*w[0][6]*w[0][26]*(1.0);
    const double G0_6_27 = det*w[0][6]*w[0][27]*(1.0);
    const double G0_7_0 = det*w[0][7]*w[0][0]*(1.0);
    const double G0_7_1 = det*w[0][7]*w[0][1]*(1.0);
    const double G0_7_2 = det*w[0][7]*w[0][2]*(1.0);
    const double G0_7_3 = det*w[0][7]*w[0][3]*(1.0);
    const double G0_7_4 = det*w[0][7]*w[0][4]*(1.0);
    const double G0_7_5 = det*w[0][7]*w[0][5]*(1.0);
    const double G0_7_6 = det*w[0][7]*w[0][6]*(1.0);
    const double G0_7_7 = det*w[0][7]*w[0][7]*(1.0);
    const double G0_7_8 = det*w[0][7]*w[0][8]*(1.0);
    const double G0_7_9 = det*w[0][7]*w[0][9]*(1.0);
    const double G0_7_10 = det*w[0][7]*w[0][10]*(1.0);
    const double G0_7_11 = det*w[0][7]*w[0][11]*(1.0);
    const double G0_7_12 = det*w[0][7]*w[0][12]*(1.0);
    const double G0_7_13 = det*w[0][7]*w[0][13]*(1.0);
    const double G0_7_14 = det*w[0][7]*w[0][14]*(1.0);
    const double G0_7_15 = det*w[0][7]*w[0][15]*(1.0);
    const double G0_7_16 = det*w[0][7]*w[0][16]*(1.0);
    const double G0_7_17 = det*w[0][7]*w[0][17]*(1.0);
    const double G0_7_18 = det*w[0][7]*w[0][18]*(1.0);
    const double G0_7_19 = det*w[0][7]*w[0][19]*(1.0);
    const double G0_7_20 = det*w[0][7]*w[0][20]*(1.0);
    const double G0_7_21 = det*w[0][7]*w[0][21]*(1.0);
    const double G0_7_22 = det*w[0][7]*w[0][22]*(1.0);
    const double G0_7_23 = det*w[0][7]*w[0][23]*(1.0);
    const double G0_7_24 = det*w[0][7]*w[0][24]*(1.0);
    const double G0_7_25 = det*w[0][7]*w[0][25]*(1.0);
    const double G0_7_26 = det*w[0][7]*w[0][26]*(1.0);
    const double G0_7_27 = det*w[0][7]*w[0][27]*(1.0);
    const double G0_8_0 = det*w[0][8]*w[0][0]*(1.0);
    const double G0_8_1 = det*w[0][8]*w[0][1]*(1.0);
    const double G0_8_2 = det*w[0][8]*w[0][2]*(1.0);
    const double G0_8_3 = det*w[0][8]*w[0][3]*(1.0);
    const double G0_8_4 = det*w[0][8]*w[0][4]*(1.0);
    const double G0_8_5 = det*w[0][8]*w[0][5]*(1.0);
    const double G0_8_6 = det*w[0][8]*w[0][6]*(1.0);
    const double G0_8_7 = det*w[0][8]*w[0][7]*(1.0);
    const double G0_8_8 = det*w[0][8]*w[0][8]*(1.0);
    const double G0_8_9 = det*w[0][8]*w[0][9]*(1.0);
    const double G0_8_10 = det*w[0][8]*w[0][10]*(1.0);
    const double G0_8_11 = det*w[0][8]*w[0][11]*(1.0);
    const double G0_8_12 = det*w[0][8]*w[0][12]*(1.0);
    const double G0_8_13 = det*w[0][8]*w[0][13]*(1.0);
    const double G0_8_14 = det*w[0][8]*w[0][14]*(1.0);
    const double G0_8_15 = det*w[0][8]*w[0][15]*(1.0);
    const double G0_8_16 = det*w[0][8]*w[0][16]*(1.0);
    const double G0_8_17 = det*w[0][8]*w[0][17]*(1.0);
    const double G0_8_18 = det*w[0][8]*w[0][18]*(1.0);
    const double G0_8_19 = det*w[0][8]*w[0][19]*(1.0);
    const double G0_8_20 = det*w[0][8]*w[0][20]*(1.0);
    const double G0_8_21 = det*w[0][8]*w[0][21]*(1.0);
    const double G0_8_22 = det*w[0][8]*w[0][22]*(1.0);
    const double G0_8_23 = det*w[0][8]*w[0][23]*(1.0);
    const double G0_8_24 = det*w[0][8]*w[0][24]*(1.0);
    const double G0_8_25 = det*w[0][8]*w[0][25]*(1.0);
    const double G0_8_26 = det*w[0][8]*w[0][26]*(1.0);
    const double G0_8_27 = det*w[0][8]*w[0][27]*(1.0);
    const double G0_9_0 = det*w[0][9]*w[0][0]*(1.0);
    const double G0_9_1 = det*w[0][9]*w[0][1]*(1.0);
    const double G0_9_2 = det*w[0][9]*w[0][2]*(1.0);
    const double G0_9_3 = det*w[0][9]*w[0][3]*(1.0);
    const double G0_9_4 = det*w[0][9]*w[0][4]*(1.0);
    const double G0_9_5 = det*w[0][9]*w[0][5]*(1.0);
    const double G0_9_6 = det*w[0][9]*w[0][6]*(1.0);
    const double G0_9_7 = det*w[0][9]*w[0][7]*(1.0);
    const double G0_9_8 = det*w[0][9]*w[0][8]*(1.0);
    const double G0_9_9 = det*w[0][9]*w[0][9]*(1.0);
    const double G0_9_10 = det*w[0][9]*w[0][10]*(1.0);
    const double G0_9_11 = det*w[0][9]*w[0][11]*(1.0);
    const double G0_9_12 = det*w[0][9]*w[0][12]*(1.0);
    const double G0_9_13 = det*w[0][9]*w[0][13]*(1.0);
    const double G0_9_14 = det*w[0][9]*w[0][14]*(1.0);
    const double G0_9_15 = det*w[0][9]*w[0][15]*(1.0);
    const double G0_9_16 = det*w[0][9]*w[0][16]*(1.0);
    const double G0_9_17 = det*w[0][9]*w[0][17]*(1.0);
    const double G0_9_18 = det*w[0][9]*w[0][18]*(1.0);
    const double G0_9_19 = det*w[0][9]*w[0][19]*(1.0);
    const double G0_9_20 = det*w[0][9]*w[0][20]*(1.0);
    const double G0_9_21 = det*w[0][9]*w[0][21]*(1.0);
    const double G0_9_22 = det*w[0][9]*w[0][22]*(1.0);
    const double G0_9_23 = det*w[0][9]*w[0][23]*(1.0);
    const double G0_9_24 = det*w[0][9]*w[0][24]*(1.0);
    const double G0_9_25 = det*w[0][9]*w[0][25]*(1.0);
    const double G0_9_26 = det*w[0][9]*w[0][26]*(1.0);
    const double G0_9_27 = det*w[0][9]*w[0][27]*(1.0);
    const double G0_10_0 = det*w[0][10]*w[0][0]*(1.0);
    const double G0_10_1 = det*w[0][10]*w[0][1]*(1.0);
    const double G0_10_2 = det*w[0][10]*w[0][2]*(1.0);
    const double G0_10_3 = det*w[0][10]*w[0][3]*(1.0);
    const double G0_10_4 = det*w[0][10]*w[0][4]*(1.0);
    const double G0_10_5 = det*w[0][10]*w[0][5]*(1.0);
    const double G0_10_6 = det*w[0][10]*w[0][6]*(1.0);
    const double G0_10_7 = det*w[0][10]*w[0][7]*(1.0);
    const double G0_10_8 = det*w[0][10]*w[0][8]*(1.0);
    const double G0_10_9 = det*w[0][10]*w[0][9]*(1.0);
    const double G0_10_10 = det*w[0][10]*w[0][10]*(1.0);
    const double G0_10_11 = det*w[0][10]*w[0][11]*(1.0);
    const double G0_10_12 = det*w[0][10]*w[0][12]*(1.0);
    const double G0_10_13 = det*w[0][10]*w[0][13]*(1.0);
    const double G0_10_14 = det*w[0][10]*w[0][14]*(1.0);
    const double G0_10_15 = det*w[0][10]*w[0][15]*(1.0);
    const double G0_10_16 = det*w[0][10]*w[0][16]*(1.0);
    const double G0_10_17 = det*w[0][10]*w[0][17]*(1.0);
    const double G0_10_18 = det*w[0][10]*w[0][18]*(1.0);
    const double G0_10_19 = det*w[0][10]*w[0][19]*(1.0);
    const double G0_10_20 = det*w[0][10]*w[0][20]*(1.0);
    const double G0_10_21 = det*w[0][10]*w[0][21]*(1.0);
    const double G0_10_22 = det*w[0][10]*w[0][22]*(1.0);
    const double G0_10_23 = det*w[0][10]*w[0][23]*(1.0);
    const double G0_10_24 = det*w[0][10]*w[0][24]*(1.0);
    const double G0_10_25 = det*w[0][10]*w[0][25]*(1.0);
    const double G0_10_26 = det*w[0][10]*w[0][26]*(1.0);
    const double G0_10_27 = det*w[0][10]*w[0][27]*(1.0);
    const double G0_11_0 = det*w[0][11]*w[0][0]*(1.0);
    const double G0_11_1 = det*w[0][11]*w[0][1]*(1.0);
    const double G0_11_2 = det*w[0][11]*w[0][2]*(1.0);
    const double G0_11_3 = det*w[0][11]*w[0][3]*(1.0);
    const double G0_11_4 = det*w[0][11]*w[0][4]*(1.0);
    const double G0_11_5 = det*w[0][11]*w[0][5]*(1.0);
    const double G0_11_6 = det*w[0][11]*w[0][6]*(1.0);
    const double G0_11_7 = det*w[0][11]*w[0][7]*(1.0);
    const double G0_11_8 = det*w[0][11]*w[0][8]*(1.0);
    const double G0_11_9 = det*w[0][11]*w[0][9]*(1.0);
    const double G0_11_10 = det*w[0][11]*w[0][10]*(1.0);
    const double G0_11_11 = det*w[0][11]*w[0][11]*(1.0);
    const double G0_11_12 = det*w[0][11]*w[0][12]*(1.0);
    const double G0_11_13 = det*w[0][11]*w[0][13]*(1.0);
    const double G0_11_14 = det*w[0][11]*w[0][14]*(1.0);
    const double G0_11_15 = det*w[0][11]*w[0][15]*(1.0);
    const double G0_11_16 = det*w[0][11]*w[0][16]*(1.0);
    const double G0_11_17 = det*w[0][11]*w[0][17]*(1.0);
    const double G0_11_18 = det*w[0][11]*w[0][18]*(1.0);
    const double G0_11_19 = det*w[0][11]*w[0][19]*(1.0);
    const double G0_11_20 = det*w[0][11]*w[0][20]*(1.0);
    const double G0_11_21 = det*w[0][11]*w[0][21]*(1.0);
    const double G0_11_22 = det*w[0][11]*w[0][22]*(1.0);
    const double G0_11_23 = det*w[0][11]*w[0][23]*(1.0);
    const double G0_11_24 = det*w[0][11]*w[0][24]*(1.0);
    const double G0_11_25 = det*w[0][11]*w[0][25]*(1.0);
    const double G0_11_26 = det*w[0][11]*w[0][26]*(1.0);
    const double G0_11_27 = det*w[0][11]*w[0][27]*(1.0);
    const double G0_12_0 = det*w[0][12]*w[0][0]*(1.0);
    const double G0_12_1 = det*w[0][12]*w[0][1]*(1.0);
    const double G0_12_2 = det*w[0][12]*w[0][2]*(1.0);
    const double G0_12_3 = det*w[0][12]*w[0][3]*(1.0);
    const double G0_12_4 = det*w[0][12]*w[0][4]*(1.0);
    const double G0_12_5 = det*w[0][12]*w[0][5]*(1.0);
    const double G0_12_6 = det*w[0][12]*w[0][6]*(1.0);
    const double G0_12_7 = det*w[0][12]*w[0][7]*(1.0);
    const double G0_12_8 = det*w[0][12]*w[0][8]*(1.0);
    const double G0_12_9 = det*w[0][12]*w[0][9]*(1.0);
    const double G0_12_10 = det*w[0][12]*w[0][10]*(1.0);
    const double G0_12_11 = det*w[0][12]*w[0][11]*(1.0);
    const double G0_12_12 = det*w[0][12]*w[0][12]*(1.0);
    const double G0_12_13 = det*w[0][12]*w[0][13]*(1.0);
    const double G0_12_14 = det*w[0][12]*w[0][14]*(1.0);
    const double G0_12_15 = det*w[0][12]*w[0][15]*(1.0);
    const double G0_12_16 = det*w[0][12]*w[0][16]*(1.0);
    const double G0_12_17 = det*w[0][12]*w[0][17]*(1.0);
    const double G0_12_18 = det*w[0][12]*w[0][18]*(1.0);
    const double G0_12_19 = det*w[0][12]*w[0][19]*(1.0);
    const double G0_12_20 = det*w[0][12]*w[0][20]*(1.0);
    const double G0_12_21 = det*w[0][12]*w[0][21]*(1.0);
    const double G0_12_22 = det*w[0][12]*w[0][22]*(1.0);
    const double G0_12_23 = det*w[0][12]*w[0][23]*(1.0);
    const double G0_12_24 = det*w[0][12]*w[0][24]*(1.0);
    const double G0_12_25 = det*w[0][12]*w[0][25]*(1.0);
    const double G0_12_26 = det*w[0][12]*w[0][26]*(1.0);
    const double G0_12_27 = det*w[0][12]*w[0][27]*(1.0);
    const double G0_13_0 = det*w[0][13]*w[0][0]*(1.0);
    const double G0_13_1 = det*w[0][13]*w[0][1]*(1.0);
    const double G0_13_2 = det*w[0][13]*w[0][2]*(1.0);
    const double G0_13_3 = det*w[0][13]*w[0][3]*(1.0);
    const double G0_13_4 = det*w[0][13]*w[0][4]*(1.0);
    const double G0_13_5 = det*w[0][13]*w[0][5]*(1.0);
    const double G0_13_6 = det*w[0][13]*w[0][6]*(1.0);
    const double G0_13_7 = det*w[0][13]*w[0][7]*(1.0);
    const double G0_13_8 = det*w[0][13]*w[0][8]*(1.0);
    const double G0_13_9 = det*w[0][13]*w[0][9]*(1.0);
    const double G0_13_10 = det*w[0][13]*w[0][10]*(1.0);
    const double G0_13_11 = det*w[0][13]*w[0][11]*(1.0);
    const double G0_13_12 = det*w[0][13]*w[0][12]*(1.0);
    const double G0_13_13 = det*w[0][13]*w[0][13]*(1.0);
    const double G0_13_14 = det*w[0][13]*w[0][14]*(1.0);
    const double G0_13_15 = det*w[0][13]*w[0][15]*(1.0);
    const double G0_13_16 = det*w[0][13]*w[0][16]*(1.0);
    const double G0_13_17 = det*w[0][13]*w[0][17]*(1.0);
    const double G0_13_18 = det*w[0][13]*w[0][18]*(1.0);
    const double G0_13_19 = det*w[0][13]*w[0][19]*(1.0);
    const double G0_13_20 = det*w[0][13]*w[0][20]*(1.0);
    const double G0_13_21 = det*w[0][13]*w[0][21]*(1.0);
    const double G0_13_22 = det*w[0][13]*w[0][22]*(1.0);
    const double G0_13_23 = det*w[0][13]*w[0][23]*(1.0);
    const double G0_13_24 = det*w[0][13]*w[0][24]*(1.0);
    const double G0_13_25 = det*w[0][13]*w[0][25]*(1.0);
    const double G0_13_26 = det*w[0][13]*w[0][26]*(1.0);
    const double G0_13_27 = det*w[0][13]*w[0][27]*(1.0);
    const double G0_14_0 = det*w[0][14]*w[0][0]*(1.0);
    const double G0_14_1 = det*w[0][14]*w[0][1]*(1.0);
    const double G0_14_2 = det*w[0][14]*w[0][2]*(1.0);
    const double G0_14_3 = det*w[0][14]*w[0][3]*(1.0);
    const double G0_14_4 = det*w[0][14]*w[0][4]*(1.0);
    const double G0_14_5 = det*w[0][14]*w[0][5]*(1.0);
    const double G0_14_6 = det*w[0][14]*w[0][6]*(1.0);
    const double G0_14_7 = det*w[0][14]*w[0][7]*(1.0);
    const double G0_14_8 = det*w[0][14]*w[0][8]*(1.0);
    const double G0_14_9 = det*w[0][14]*w[0][9]*(1.0);
    const double G0_14_10 = det*w[0][14]*w[0][10]*(1.0);
    const double G0_14_11 = det*w[0][14]*w[0][11]*(1.0);
    const double G0_14_12 = det*w[0][14]*w[0][12]*(1.0);
    const double G0_14_13 = det*w[0][14]*w[0][13]*(1.0);
    const double G0_14_14 = det*w[0][14]*w[0][14]*(1.0);
    const double G0_14_15 = det*w[0][14]*w[0][15]*(1.0);
    const double G0_14_16 = det*w[0][14]*w[0][16]*(1.0);
    const double G0_14_17 = det*w[0][14]*w[0][17]*(1.0);
    const double G0_14_18 = det*w[0][14]*w[0][18]*(1.0);
    const double G0_14_19 = det*w[0][14]*w[0][19]*(1.0);
    const double G0_14_20 = det*w[0][14]*w[0][20]*(1.0);
    const double G0_14_21 = det*w[0][14]*w[0][21]*(1.0);
    const double G0_14_22 = det*w[0][14]*w[0][22]*(1.0);
    const double G0_14_23 = det*w[0][14]*w[0][23]*(1.0);
    const double G0_14_24 = det*w[0][14]*w[0][24]*(1.0);
    const double G0_14_25 = det*w[0][14]*w[0][25]*(1.0);
    const double G0_14_26 = det*w[0][14]*w[0][26]*(1.0);
    const double G0_14_27 = det*w[0][14]*w[0][27]*(1.0);
    const double G0_15_0 = det*w[0][15]*w[0][0]*(1.0);
    const double G0_15_1 = det*w[0][15]*w[0][1]*(1.0);
    const double G0_15_2 = det*w[0][15]*w[0][2]*(1.0);
    const double G0_15_3 = det*w[0][15]*w[0][3]*(1.0);
    const double G0_15_4 = det*w[0][15]*w[0][4]*(1.0);
    const double G0_15_5 = det*w[0][15]*w[0][5]*(1.0);
    const double G0_15_6 = det*w[0][15]*w[0][6]*(1.0);
    const double G0_15_7 = det*w[0][15]*w[0][7]*(1.0);
    const double G0_15_8 = det*w[0][15]*w[0][8]*(1.0);
    const double G0_15_9 = det*w[0][15]*w[0][9]*(1.0);
    const double G0_15_10 = det*w[0][15]*w[0][10]*(1.0);
    const double G0_15_11 = det*w[0][15]*w[0][11]*(1.0);
    const double G0_15_12 = det*w[0][15]*w[0][12]*(1.0);
    const double G0_15_13 = det*w[0][15]*w[0][13]*(1.0);
    const double G0_15_14 = det*w[0][15]*w[0][14]*(1.0);
    const double G0_15_15 = det*w[0][15]*w[0][15]*(1.0);
    const double G0_15_16 = det*w[0][15]*w[0][16]*(1.0);
    const double G0_15_17 = det*w[0][15]*w[0][17]*(1.0);
    const double G0_15_18 = det*w[0][15]*w[0][18]*(1.0);
    const double G0_15_19 = det*w[0][15]*w[0][19]*(1.0);
    const double G0_15_20 = det*w[0][15]*w[0][20]*(1.0);
    const double G0_15_21 = det*w[0][15]*w[0][21]*(1.0);
    const double G0_15_22 = det*w[0][15]*w[0][22]*(1.0);
    const double G0_15_23 = det*w[0][15]*w[0][23]*(1.0);
    const double G0_15_24 = det*w[0][15]*w[0][24]*(1.0);
    const double G0_15_25 = det*w[0][15]*w[0][25]*(1.0);
    const double G0_15_26 = det*w[0][15]*w[0][26]*(1.0);
    const double G0_15_27 = det*w[0][15]*w[0][27]*(1.0);
    const double G0_16_0 = det*w[0][16]*w[0][0]*(1.0);
    const double G0_16_1 = det*w[0][16]*w[0][1]*(1.0);
    const double G0_16_2 = det*w[0][16]*w[0][2]*(1.0);
    const double G0_16_3 = det*w[0][16]*w[0][3]*(1.0);
    const double G0_16_4 = det*w[0][16]*w[0][4]*(1.0);
    const double G0_16_5 = det*w[0][16]*w[0][5]*(1.0);
    const double G0_16_6 = det*w[0][16]*w[0][6]*(1.0);
    const double G0_16_7 = det*w[0][16]*w[0][7]*(1.0);
    const double G0_16_8 = det*w[0][16]*w[0][8]*(1.0);
    const double G0_16_9 = det*w[0][16]*w[0][9]*(1.0);
    const double G0_16_10 = det*w[0][16]*w[0][10]*(1.0);
    const double G0_16_11 = det*w[0][16]*w[0][11]*(1.0);
    const double G0_16_12 = det*w[0][16]*w[0][12]*(1.0);
    const double G0_16_13 = det*w[0][16]*w[0][13]*(1.0);
    const double G0_16_14 = det*w[0][16]*w[0][14]*(1.0);
    const double G0_16_15 = det*w[0][16]*w[0][15]*(1.0);
    const double G0_16_16 = det*w[0][16]*w[0][16]*(1.0);
    const double G0_16_17 = det*w[0][16]*w[0][17]*(1.0);
    const double G0_16_18 = det*w[0][16]*w[0][18]*(1.0);
    const double G0_16_19 = det*w[0][16]*w[0][19]*(1.0);
    const double G0_16_20 = det*w[0][16]*w[0][20]*(1.0);
    const double G0_16_21 = det*w[0][16]*w[0][21]*(1.0);
    const double G0_16_22 = det*w[0][16]*w[0][22]*(1.0);
    const double G0_16_23 = det*w[0][16]*w[0][23]*(1.0);
    const double G0_16_24 = det*w[0][16]*w[0][24]*(1.0);
    const double G0_16_25 = det*w[0][16]*w[0][25]*(1.0);
    const double G0_16_26 = det*w[0][16]*w[0][26]*(1.0);
    const double G0_16_27 = det*w[0][16]*w[0][27]*(1.0);
    const double G0_17_0 = det*w[0][17]*w[0][0]*(1.0);
    const double G0_17_1 = det*w[0][17]*w[0][1]*(1.0);
    const double G0_17_2 = det*w[0][17]*w[0][2]*(1.0);
    const double G0_17_3 = det*w[0][17]*w[0][3]*(1.0);
    const double G0_17_4 = det*w[0][17]*w[0][4]*(1.0);
    const double G0_17_5 = det*w[0][17]*w[0][5]*(1.0);
    const double G0_17_6 = det*w[0][17]*w[0][6]*(1.0);
    const double G0_17_7 = det*w[0][17]*w[0][7]*(1.0);
    const double G0_17_8 = det*w[0][17]*w[0][8]*(1.0);
    const double G0_17_9 = det*w[0][17]*w[0][9]*(1.0);
    const double G0_17_10 = det*w[0][17]*w[0][10]*(1.0);
    const double G0_17_11 = det*w[0][17]*w[0][11]*(1.0);
    const double G0_17_12 = det*w[0][17]*w[0][12]*(1.0);
    const double G0_17_13 = det*w[0][17]*w[0][13]*(1.0);
    const double G0_17_14 = det*w[0][17]*w[0][14]*(1.0);
    const double G0_17_15 = det*w[0][17]*w[0][15]*(1.0);
    const double G0_17_16 = det*w[0][17]*w[0][16]*(1.0);
    const double G0_17_17 = det*w[0][17]*w[0][17]*(1.0);
    const double G0_17_18 = det*w[0][17]*w[0][18]*(1.0);
    const double G0_17_19 = det*w[0][17]*w[0][19]*(1.0);
    const double G0_17_20 = det*w[0][17]*w[0][20]*(1.0);
    const double G0_17_21 = det*w[0][17]*w[0][21]*(1.0);
    const double G0_17_22 = det*w[0][17]*w[0][22]*(1.0);
    const double G0_17_23 = det*w[0][17]*w[0][23]*(1.0);
    const double G0_17_24 = det*w[0][17]*w[0][24]*(1.0);
    const double G0_17_25 = det*w[0][17]*w[0][25]*(1.0);
    const double G0_17_26 = det*w[0][17]*w[0][26]*(1.0);
    const double G0_17_27 = det*w[0][17]*w[0][27]*(1.0);
    const double G0_18_0 = det*w[0][18]*w[0][0]*(1.0);
    const double G0_18_1 = det*w[0][18]*w[0][1]*(1.0);
    const double G0_18_2 = det*w[0][18]*w[0][2]*(1.0);
    const double G0_18_3 = det*w[0][18]*w[0][3]*(1.0);
    const double G0_18_4 = det*w[0][18]*w[0][4]*(1.0);
    const double G0_18_5 = det*w[0][18]*w[0][5]*(1.0);
    const double G0_18_6 = det*w[0][18]*w[0][6]*(1.0);
    const double G0_18_7 = det*w[0][18]*w[0][7]*(1.0);
    const double G0_18_8 = det*w[0][18]*w[0][8]*(1.0);
    const double G0_18_9 = det*w[0][18]*w[0][9]*(1.0);
    const double G0_18_10 = det*w[0][18]*w[0][10]*(1.0);
    const double G0_18_11 = det*w[0][18]*w[0][11]*(1.0);
    const double G0_18_12 = det*w[0][18]*w[0][12]*(1.0);
    const double G0_18_13 = det*w[0][18]*w[0][13]*(1.0);
    const double G0_18_14 = det*w[0][18]*w[0][14]*(1.0);
    const double G0_18_15 = det*w[0][18]*w[0][15]*(1.0);
    const double G0_18_16 = det*w[0][18]*w[0][16]*(1.0);
    const double G0_18_17 = det*w[0][18]*w[0][17]*(1.0);
    const double G0_18_18 = det*w[0][18]*w[0][18]*(1.0);
    const double G0_18_19 = det*w[0][18]*w[0][19]*(1.0);
    const double G0_18_20 = det*w[0][18]*w[0][20]*(1.0);
    const double G0_18_21 = det*w[0][18]*w[0][21]*(1.0);
    const double G0_18_22 = det*w[0][18]*w[0][22]*(1.0);
    const double G0_18_23 = det*w[0][18]*w[0][23]*(1.0);
    const double G0_18_24 = det*w[0][18]*w[0][24]*(1.0);
    const double G0_18_25 = det*w[0][18]*w[0][25]*(1.0);
    const double G0_18_26 = det*w[0][18]*w[0][26]*(1.0);
    const double G0_18_27 = det*w[0][18]*w[0][27]*(1.0);
    const double G0_19_0 = det*w[0][19]*w[0][0]*(1.0);
    const double G0_19_1 = det*w[0][19]*w[0][1]*(1.0);
    const double G0_19_2 = det*w[0][19]*w[0][2]*(1.0);
    const double G0_19_3 = det*w[0][19]*w[0][3]*(1.0);
    const double G0_19_4 = det*w[0][19]*w[0][4]*(1.0);
    const double G0_19_5 = det*w[0][19]*w[0][5]*(1.0);
    const double G0_19_6 = det*w[0][19]*w[0][6]*(1.0);
    const double G0_19_7 = det*w[0][19]*w[0][7]*(1.0);
    const double G0_19_8 = det*w[0][19]*w[0][8]*(1.0);
    const double G0_19_9 = det*w[0][19]*w[0][9]*(1.0);
    const double G0_19_10 = det*w[0][19]*w[0][10]*(1.0);
    const double G0_19_11 = det*w[0][19]*w[0][11]*(1.0);
    const double G0_19_12 = det*w[0][19]*w[0][12]*(1.0);
    const double G0_19_13 = det*w[0][19]*w[0][13]*(1.0);
    const double G0_19_14 = det*w[0][19]*w[0][14]*(1.0);
    const double G0_19_15 = det*w[0][19]*w[0][15]*(1.0);
    const double G0_19_16 = det*w[0][19]*w[0][16]*(1.0);
    const double G0_19_17 = det*w[0][19]*w[0][17]*(1.0);
    const double G0_19_18 = det*w[0][19]*w[0][18]*(1.0);
    const double G0_19_19 = det*w[0][19]*w[0][19]*(1.0);
    const double G0_19_20 = det*w[0][19]*w[0][20]*(1.0);
    const double G0_19_21 = det*w[0][19]*w[0][21]*(1.0);
    const double G0_19_22 = det*w[0][19]*w[0][22]*(1.0);
    const double G0_19_23 = det*w[0][19]*w[0][23]*(1.0);
    const double G0_19_24 = det*w[0][19]*w[0][24]*(1.0);
    const double G0_19_25 = det*w[0][19]*w[0][25]*(1.0);
    const double G0_19_26 = det*w[0][19]*w[0][26]*(1.0);
    const double G0_19_27 = det*w[0][19]*w[0][27]*(1.0);
    const double G0_20_0 = det*w[0][20]*w[0][0]*(1.0);
    const double G0_20_1 = det*w[0][20]*w[0][1]*(1.0);
    const double G0_20_2 = det*w[0][20]*w[0][2]*(1.0);
    const double G0_20_3 = det*w[0][20]*w[0][3]*(1.0);
    const double G0_20_4 = det*w[0][20]*w[0][4]*(1.0);
    const double G0_20_5 = det*w[0][20]*w[0][5]*(1.0);
    const double G0_20_6 = det*w[0][20]*w[0][6]*(1.0);
    const double G0_20_7 = det*w[0][20]*w[0][7]*(1.0);
    const double G0_20_8 = det*w[0][20]*w[0][8]*(1.0);
    const double G0_20_9 = det*w[0][20]*w[0][9]*(1.0);
    const double G0_20_10 = det*w[0][20]*w[0][10]*(1.0);
    const double G0_20_11 = det*w[0][20]*w[0][11]*(1.0);
    const double G0_20_12 = det*w[0][20]*w[0][12]*(1.0);
    const double G0_20_13 = det*w[0][20]*w[0][13]*(1.0);
    const double G0_20_14 = det*w[0][20]*w[0][14]*(1.0);
    const double G0_20_15 = det*w[0][20]*w[0][15]*(1.0);
    const double G0_20_16 = det*w[0][20]*w[0][16]*(1.0);
    const double G0_20_17 = det*w[0][20]*w[0][17]*(1.0);
    const double G0_20_18 = det*w[0][20]*w[0][18]*(1.0);
    const double G0_20_19 = det*w[0][20]*w[0][19]*(1.0);
    const double G0_20_20 = det*w[0][20]*w[0][20]*(1.0);
    const double G0_20_21 = det*w[0][20]*w[0][21]*(1.0);
    const double G0_20_22 = det*w[0][20]*w[0][22]*(1.0);
    const double G0_20_23 = det*w[0][20]*w[0][23]*(1.0);
    const double G0_20_24 = det*w[0][20]*w[0][24]*(1.0);
    const double G0_20_25 = det*w[0][20]*w[0][25]*(1.0);
    const double G0_20_26 = det*w[0][20]*w[0][26]*(1.0);
    const double G0_20_27 = det*w[0][20]*w[0][27]*(1.0);
    const double G0_21_0 = det*w[0][21]*w[0][0]*(1.0);
    const double G0_21_1 = det*w[0][21]*w[0][1]*(1.0);
    const double G0_21_2 = det*w[0][21]*w[0][2]*(1.0);
    const double G0_21_3 = det*w[0][21]*w[0][3]*(1.0);
    const double G0_21_4 = det*w[0][21]*w[0][4]*(1.0);
    const double G0_21_5 = det*w[0][21]*w[0][5]*(1.0);
    const double G0_21_6 = det*w[0][21]*w[0][6]*(1.0);
    const double G0_21_7 = det*w[0][21]*w[0][7]*(1.0);
    const double G0_21_8 = det*w[0][21]*w[0][8]*(1.0);
    const double G0_21_9 = det*w[0][21]*w[0][9]*(1.0);
    const double G0_21_10 = det*w[0][21]*w[0][10]*(1.0);
    const double G0_21_11 = det*w[0][21]*w[0][11]*(1.0);
    const double G0_21_12 = det*w[0][21]*w[0][12]*(1.0);
    const double G0_21_13 = det*w[0][21]*w[0][13]*(1.0);
    const double G0_21_14 = det*w[0][21]*w[0][14]*(1.0);
    const double G0_21_15 = det*w[0][21]*w[0][15]*(1.0);
    const double G0_21_16 = det*w[0][21]*w[0][16]*(1.0);
    const double G0_21_17 = det*w[0][21]*w[0][17]*(1.0);
    const double G0_21_18 = det*w[0][21]*w[0][18]*(1.0);
    const double G0_21_19 = det*w[0][21]*w[0][19]*(1.0);
    const double G0_21_20 = det*w[0][21]*w[0][20]*(1.0);
    const double G0_21_21 = det*w[0][21]*w[0][21]*(1.0);
    const double G0_21_22 = det*w[0][21]*w[0][22]*(1.0);
    const double G0_21_23 = det*w[0][21]*w[0][23]*(1.0);
    const double G0_21_24 = det*w[0][21]*w[0][24]*(1.0);
    const double G0_21_25 = det*w[0][21]*w[0][25]*(1.0);
    const double G0_21_26 = det*w[0][21]*w[0][26]*(1.0);
    const double G0_21_27 = det*w[0][21]*w[0][27]*(1.0);
    const double G0_22_0 = det*w[0][22]*w[0][0]*(1.0);
    const double G0_22_1 = det*w[0][22]*w[0][1]*(1.0);
    const double G0_22_2 = det*w[0][22]*w[0][2]*(1.0);
    const double G0_22_3 = det*w[0][22]*w[0][3]*(1.0);
    const double G0_22_4 = det*w[0][22]*w[0][4]*(1.0);
    const double G0_22_5 = det*w[0][22]*w[0][5]*(1.0);
    const double G0_22_6 = det*w[0][22]*w[0][6]*(1.0);
    const double G0_22_7 = det*w[0][22]*w[0][7]*(1.0);
    const double G0_22_8 = det*w[0][22]*w[0][8]*(1.0);
    const double G0_22_9 = det*w[0][22]*w[0][9]*(1.0);
    const double G0_22_10 = det*w[0][22]*w[0][10]*(1.0);
    const double G0_22_11 = det*w[0][22]*w[0][11]*(1.0);
    const double G0_22_12 = det*w[0][22]*w[0][12]*(1.0);
    const double G0_22_13 = det*w[0][22]*w[0][13]*(1.0);
    const double G0_22_14 = det*w[0][22]*w[0][14]*(1.0);
    const double G0_22_15 = det*w[0][22]*w[0][15]*(1.0);
    const double G0_22_16 = det*w[0][22]*w[0][16]*(1.0);
    const double G0_22_17 = det*w[0][22]*w[0][17]*(1.0);
    const double G0_22_18 = det*w[0][22]*w[0][18]*(1.0);
    const double G0_22_19 = det*w[0][22]*w[0][19]*(1.0);
    const double G0_22_20 = det*w[0][22]*w[0][20]*(1.0);
    const double G0_22_21 = det*w[0][22]*w[0][21]*(1.0);
    const double G0_22_22 = det*w[0][22]*w[0][22]*(1.0);
    const double G0_22_23 = det*w[0][22]*w[0][23]*(1.0);
    const double G0_22_24 = det*w[0][22]*w[0][24]*(1.0);
    const double G0_22_25 = det*w[0][22]*w[0][25]*(1.0);
    const double G0_22_26 = det*w[0][22]*w[0][26]*(1.0);
    const double G0_22_27 = det*w[0][22]*w[0][27]*(1.0);
    const double G0_23_0 = det*w[0][23]*w[0][0]*(1.0);
    const double G0_23_1 = det*w[0][23]*w[0][1]*(1.0);
    const double G0_23_2 = det*w[0][23]*w[0][2]*(1.0);
    const double G0_23_3 = det*w[0][23]*w[0][3]*(1.0);
    const double G0_23_4 = det*w[0][23]*w[0][4]*(1.0);
    const double G0_23_5 = det*w[0][23]*w[0][5]*(1.0);
    const double G0_23_6 = det*w[0][23]*w[0][6]*(1.0);
    const double G0_23_7 = det*w[0][23]*w[0][7]*(1.0);
    const double G0_23_8 = det*w[0][23]*w[0][8]*(1.0);
    const double G0_23_9 = det*w[0][23]*w[0][9]*(1.0);
    const double G0_23_10 = det*w[0][23]*w[0][10]*(1.0);
    const double G0_23_11 = det*w[0][23]*w[0][11]*(1.0);
    const double G0_23_12 = det*w[0][23]*w[0][12]*(1.0);
    const double G0_23_13 = det*w[0][23]*w[0][13]*(1.0);
    const double G0_23_14 = det*w[0][23]*w[0][14]*(1.0);
    const double G0_23_15 = det*w[0][23]*w[0][15]*(1.0);
    const double G0_23_16 = det*w[0][23]*w[0][16]*(1.0);
    const double G0_23_17 = det*w[0][23]*w[0][17]*(1.0);
    const double G0_23_18 = det*w[0][23]*w[0][18]*(1.0);
    const double G0_23_19 = det*w[0][23]*w[0][19]*(1.0);
    const double G0_23_20 = det*w[0][23]*w[0][20]*(1.0);
    const double G0_23_21 = det*w[0][23]*w[0][21]*(1.0);
    const double G0_23_22 = det*w[0][23]*w[0][22]*(1.0);
    const double G0_23_23 = det*w[0][23]*w[0][23]*(1.0);
    const double G0_23_24 = det*w[0][23]*w[0][24]*(1.0);
    const double G0_23_25 = det*w[0][23]*w[0][25]*(1.0);
    const double G0_23_26 = det*w[0][23]*w[0][26]*(1.0);
    const double G0_23_27 = det*w[0][23]*w[0][27]*(1.0);
    const double G0_24_0 = det*w[0][24]*w[0][0]*(1.0);
    const double G0_24_1 = det*w[0][24]*w[0][1]*(1.0);
    const double G0_24_2 = det*w[0][24]*w[0][2]*(1.0);
    const double G0_24_3 = det*w[0][24]*w[0][3]*(1.0);
    const double G0_24_4 = det*w[0][24]*w[0][4]*(1.0);
    const double G0_24_5 = det*w[0][24]*w[0][5]*(1.0);
    const double G0_24_6 = det*w[0][24]*w[0][6]*(1.0);
    const double G0_24_7 = det*w[0][24]*w[0][7]*(1.0);
    const double G0_24_8 = det*w[0][24]*w[0][8]*(1.0);
    const double G0_24_9 = det*w[0][24]*w[0][9]*(1.0);
    const double G0_24_10 = det*w[0][24]*w[0][10]*(1.0);
    const double G0_24_11 = det*w[0][24]*w[0][11]*(1.0);
    const double G0_24_12 = det*w[0][24]*w[0][12]*(1.0);
    const double G0_24_13 = det*w[0][24]*w[0][13]*(1.0);
    const double G0_24_14 = det*w[0][24]*w[0][14]*(1.0);
    const double G0_24_15 = det*w[0][24]*w[0][15]*(1.0);
    const double G0_24_16 = det*w[0][24]*w[0][16]*(1.0);
    const double G0_24_17 = det*w[0][24]*w[0][17]*(1.0);
    const double G0_24_18 = det*w[0][24]*w[0][18]*(1.0);
    const double G0_24_19 = det*w[0][24]*w[0][19]*(1.0);
    const double G0_24_20 = det*w[0][24]*w[0][20]*(1.0);
    const double G0_24_21 = det*w[0][24]*w[0][21]*(1.0);
    const double G0_24_22 = det*w[0][24]*w[0][22]*(1.0);
    const double G0_24_23 = det*w[0][24]*w[0][23]*(1.0);
    const double G0_24_24 = det*w[0][24]*w[0][24]*(1.0);
    const double G0_24_25 = det*w[0][24]*w[0][25]*(1.0);
    const double G0_24_26 = det*w[0][24]*w[0][26]*(1.0);
    const double G0_24_27 = det*w[0][24]*w[0][27]*(1.0);
    const double G0_25_0 = det*w[0][25]*w[0][0]*(1.0);
    const double G0_25_1 = det*w[0][25]*w[0][1]*(1.0);
    const double G0_25_2 = det*w[0][25]*w[0][2]*(1.0);
    const double G0_25_3 = det*w[0][25]*w[0][3]*(1.0);
    const double G0_25_4 = det*w[0][25]*w[0][4]*(1.0);
    const double G0_25_5 = det*w[0][25]*w[0][5]*(1.0);
    const double G0_25_6 = det*w[0][25]*w[0][6]*(1.0);
    const double G0_25_7 = det*w[0][25]*w[0][7]*(1.0);
    const double G0_25_8 = det*w[0][25]*w[0][8]*(1.0);
    const double G0_25_9 = det*w[0][25]*w[0][9]*(1.0);
    const double G0_25_10 = det*w[0][25]*w[0][10]*(1.0);
    const double G0_25_11 = det*w[0][25]*w[0][11]*(1.0);
    const double G0_25_12 = det*w[0][25]*w[0][12]*(1.0);
    const double G0_25_13 = det*w[0][25]*w[0][13]*(1.0);
    const double G0_25_14 = det*w[0][25]*w[0][14]*(1.0);
    const double G0_25_15 = det*w[0][25]*w[0][15]*(1.0);
    const double G0_25_16 = det*w[0][25]*w[0][16]*(1.0);
    const double G0_25_17 = det*w[0][25]*w[0][17]*(1.0);
    const double G0_25_18 = det*w[0][25]*w[0][18]*(1.0);
    const double G0_25_19 = det*w[0][25]*w[0][19]*(1.0);
    const double G0_25_20 = det*w[0][25]*w[0][20]*(1.0);
    const double G0_25_21 = det*w[0][25]*w[0][21]*(1.0);
    const double G0_25_22 = det*w[0][25]*w[0][22]*(1.0);
    const double G0_25_23 = det*w[0][25]*w[0][23]*(1.0);
    const double G0_25_24 = det*w[0][25]*w[0][24]*(1.0);
    const double G0_25_25 = det*w[0][25]*w[0][25]*(1.0);
    const double G0_25_26 = det*w[0][25]*w[0][26]*(1.0);
    const double G0_25_27 = det*w[0][25]*w[0][27]*(1.0);
    const double G0_26_0 = det*w[0][26]*w[0][0]*(1.0);
    const double G0_26_1 = det*w[0][26]*w[0][1]*(1.0);
    const double G0_26_2 = det*w[0][26]*w[0][2]*(1.0);
    const double G0_26_3 = det*w[0][26]*w[0][3]*(1.0);
    const double G0_26_4 = det*w[0][26]*w[0][4]*(1.0);
    const double G0_26_5 = det*w[0][26]*w[0][5]*(1.0);
    const double G0_26_6 = det*w[0][26]*w[0][6]*(1.0);
    const double G0_26_7 = det*w[0][26]*w[0][7]*(1.0);
    const double G0_26_8 = det*w[0][26]*w[0][8]*(1.0);
    const double G0_26_9 = det*w[0][26]*w[0][9]*(1.0);
    const double G0_26_10 = det*w[0][26]*w[0][10]*(1.0);
    const double G0_26_11 = det*w[0][26]*w[0][11]*(1.0);
    const double G0_26_12 = det*w[0][26]*w[0][12]*(1.0);
    const double G0_26_13 = det*w[0][26]*w[0][13]*(1.0);
    const double G0_26_14 = det*w[0][26]*w[0][14]*(1.0);
    const double G0_26_15 = det*w[0][26]*w[0][15]*(1.0);
    const double G0_26_16 = det*w[0][26]*w[0][16]*(1.0);
    const double G0_26_17 = det*w[0][26]*w[0][17]*(1.0);
    const double G0_26_18 = det*w[0][26]*w[0][18]*(1.0);
    const double G0_26_19 = det*w[0][26]*w[0][19]*(1.0);
    const double G0_26_20 = det*w[0][26]*w[0][20]*(1.0);
    const double G0_26_21 = det*w[0][26]*w[0][21]*(1.0);
    const double G0_26_22 = det*w[0][26]*w[0][22]*(1.0);
    const double G0_26_23 = det*w[0][26]*w[0][23]*(1.0);
    const double G0_26_24 = det*w[0][26]*w[0][24]*(1.0);
    const double G0_26_25 = det*w[0][26]*w[0][25]*(1.0);
    const double G0_26_26 = det*w[0][26]*w[0][26]*(1.0);
    const double G0_26_27 = det*w[0][26]*w[0][27]*(1.0);
    const double G0_27_0 = det*w[0][27]*w[0][0]*(1.0);
    const double G0_27_1 = det*w[0][27]*w[0][1]*(1.0);
    const double G0_27_2 = det*w[0][27]*w[0][2]*(1.0);
    const double G0_27_3 = det*w[0][27]*w[0][3]*(1.0);
    const double G0_27_4 = det*w[0][27]*w[0][4]*(1.0);
    const double G0_27_5 = det*w[0][27]*w[0][5]*(1.0);
    const double G0_27_6 = det*w[0][27]*w[0][6]*(1.0);
    const double G0_27_7 = det*w[0][27]*w[0][7]*(1.0);
    const double G0_27_8 = det*w[0][27]*w[0][8]*(1.0);
    const double G0_27_9 = det*w[0][27]*w[0][9]*(1.0);
    const double G0_27_10 = det*w[0][27]*w[0][10]*(1.0);
    const double G0_27_11 = det*w[0][27]*w[0][11]*(1.0);
    const double G0_27_12 = det*w[0][27]*w[0][12]*(1.0);
    const double G0_27_13 = det*w[0][27]*w[0][13]*(1.0);
    const double G0_27_14 = det*w[0][27]*w[0][14]*(1.0);
    const double G0_27_15 = det*w[0][27]*w[0][15]*(1.0);
    const double G0_27_16 = det*w[0][27]*w[0][16]*(1.0);
    const double G0_27_17 = det*w[0][27]*w[0][17]*(1.0);
    const double G0_27_18 = det*w[0][27]*w[0][18]*(1.0);
    const double G0_27_19 = det*w[0][27]*w[0][19]*(1.0);
    const double G0_27_20 = det*w[0][27]*w[0][20]*(1.0);
    const double G0_27_21 = det*w[0][27]*w[0][21]*(1.0);
    const double G0_27_22 = det*w[0][27]*w[0][22]*(1.0);
    const double G0_27_23 = det*w[0][27]*w[0][23]*(1.0);
    const double G0_27_24 = det*w[0][27]*w[0][24]*(1.0);
    const double G0_27_25 = det*w[0][27]*w[0][25]*(1.0);
    const double G0_27_26 = det*w[0][27]*w[0][26]*(1.0);
    const double G0_27_27 = det*w[0][27]*w[0][27]*(1.0);
    const double G0_28_28 = det*w[0][28]*w[0][28]*(1.0);
    const double G0_28_29 = det*w[0][28]*w[0][29]*(1.0);
    const double G0_28_30 = det*w[0][28]*w[0][30]*(1.0);
    const double G0_28_31 = det*w[0][28]*w[0][31]*(1.0);
    const double G0_28_32 = det*w[0][28]*w[0][32]*(1.0);
    const double G0_28_33 = det*w[0][28]*w[0][33]*(1.0);
    const double G0_28_34 = det*w[0][28]*w[0][34]*(1.0);
    const double G0_28_35 = det*w[0][28]*w[0][35]*(1.0);
    const double G0_28_36 = det*w[0][28]*w[0][36]*(1.0);
    const double G0_28_37 = det*w[0][28]*w[0][37]*(1.0);
    const double G0_28_38 = det*w[0][28]*w[0][38]*(1.0);
    const double G0_28_39 = det*w[0][28]*w[0][39]*(1.0);
    const double G0_28_40 = det*w[0][28]*w[0][40]*(1.0);
    const double G0_28_41 = det*w[0][28]*w[0][41]*(1.0);
    const double G0_28_42 = det*w[0][28]*w[0][42]*(1.0);
    const double G0_28_43 = det*w[0][28]*w[0][43]*(1.0);
    const double G0_28_44 = det*w[0][28]*w[0][44]*(1.0);
    const double G0_28_45 = det*w[0][28]*w[0][45]*(1.0);
    const double G0_28_46 = det*w[0][28]*w[0][46]*(1.0);
    const double G0_28_47 = det*w[0][28]*w[0][47]*(1.0);
    const double G0_28_48 = det*w[0][28]*w[0][48]*(1.0);
    const double G0_28_49 = det*w[0][28]*w[0][49]*(1.0);
    const double G0_28_50 = det*w[0][28]*w[0][50]*(1.0);
    const double G0_28_51 = det*w[0][28]*w[0][51]*(1.0);
    const double G0_28_52 = det*w[0][28]*w[0][52]*(1.0);
    const double G0_28_53 = det*w[0][28]*w[0][53]*(1.0);
    const double G0_28_54 = det*w[0][28]*w[0][54]*(1.0);
    const double G0_28_55 = det*w[0][28]*w[0][55]*(1.0);
    const double G0_29_28 = det*w[0][29]*w[0][28]*(1.0);
    const double G0_29_29 = det*w[0][29]*w[0][29]*(1.0);
    const double G0_29_30 = det*w[0][29]*w[0][30]*(1.0);
    const double G0_29_31 = det*w[0][29]*w[0][31]*(1.0);
    const double G0_29_32 = det*w[0][29]*w[0][32]*(1.0);
    const double G0_29_33 = det*w[0][29]*w[0][33]*(1.0);
    const double G0_29_34 = det*w[0][29]*w[0][34]*(1.0);
    const double G0_29_35 = det*w[0][29]*w[0][35]*(1.0);
    const double G0_29_36 = det*w[0][29]*w[0][36]*(1.0);
    const double G0_29_37 = det*w[0][29]*w[0][37]*(1.0);
    const double G0_29_38 = det*w[0][29]*w[0][38]*(1.0);
    const double G0_29_39 = det*w[0][29]*w[0][39]*(1.0);
    const double G0_29_40 = det*w[0][29]*w[0][40]*(1.0);
    const double G0_29_41 = det*w[0][29]*w[0][41]*(1.0);
    const double G0_29_42 = det*w[0][29]*w[0][42]*(1.0);
    const double G0_29_43 = det*w[0][29]*w[0][43]*(1.0);
    const double G0_29_44 = det*w[0][29]*w[0][44]*(1.0);
    const double G0_29_45 = det*w[0][29]*w[0][45]*(1.0);
    const double G0_29_46 = det*w[0][29]*w[0][46]*(1.0);
    const double G0_29_47 = det*w[0][29]*w[0][47]*(1.0);
    const double G0_29_48 = det*w[0][29]*w[0][48]*(1.0);
    const double G0_29_49 = det*w[0][29]*w[0][49]*(1.0);
    const double G0_29_50 = det*w[0][29]*w[0][50]*(1.0);
    const double G0_29_51 = det*w[0][29]*w[0][51]*(1.0);
    const double G0_29_52 = det*w[0][29]*w[0][52]*(1.0);
    const double G0_29_53 = det*w[0][29]*w[0][53]*(1.0);
    const double G0_29_54 = det*w[0][29]*w[0][54]*(1.0);
    const double G0_29_55 = det*w[0][29]*w[0][55]*(1.0);
    const double G0_30_28 = det*w[0][30]*w[0][28]*(1.0);
    const double G0_30_29 = det*w[0][30]*w[0][29]*(1.0);
    const double G0_30_30 = det*w[0][30]*w[0][30]*(1.0);
    const double G0_30_31 = det*w[0][30]*w[0][31]*(1.0);
    const double G0_30_32 = det*w[0][30]*w[0][32]*(1.0);
    const double G0_30_33 = det*w[0][30]*w[0][33]*(1.0);
    const double G0_30_34 = det*w[0][30]*w[0][34]*(1.0);
    const double G0_30_35 = det*w[0][30]*w[0][35]*(1.0);
    const double G0_30_36 = det*w[0][30]*w[0][36]*(1.0);
    const double G0_30_37 = det*w[0][30]*w[0][37]*(1.0);
    const double G0_30_38 = det*w[0][30]*w[0][38]*(1.0);
    const double G0_30_39 = det*w[0][30]*w[0][39]*(1.0);
    const double G0_30_40 = det*w[0][30]*w[0][40]*(1.0);
    const double G0_30_41 = det*w[0][30]*w[0][41]*(1.0);
    const double G0_30_42 = det*w[0][30]*w[0][42]*(1.0);
    const double G0_30_43 = det*w[0][30]*w[0][43]*(1.0);
    const double G0_30_44 = det*w[0][30]*w[0][44]*(1.0);
    const double G0_30_45 = det*w[0][30]*w[0][45]*(1.0);
    const double G0_30_46 = det*w[0][30]*w[0][46]*(1.0);
    const double G0_30_47 = det*w[0][30]*w[0][47]*(1.0);
    const double G0_30_48 = det*w[0][30]*w[0][48]*(1.0);
    const double G0_30_49 = det*w[0][30]*w[0][49]*(1.0);
    const double G0_30_50 = det*w[0][30]*w[0][50]*(1.0);
    const double G0_30_51 = det*w[0][30]*w[0][51]*(1.0);
    const double G0_30_52 = det*w[0][30]*w[0][52]*(1.0);
    const double G0_30_53 = det*w[0][30]*w[0][53]*(1.0);
    const double G0_30_54 = det*w[0][30]*w[0][54]*(1.0);
    const double G0_30_55 = det*w[0][30]*w[0][55]*(1.0);
    const double G0_31_28 = det*w[0][31]*w[0][28]*(1.0);
    const double G0_31_29 = det*w[0][31]*w[0][29]*(1.0);
    const double G0_31_30 = det*w[0][31]*w[0][30]*(1.0);
    const double G0_31_31 = det*w[0][31]*w[0][31]*(1.0);
    const double G0_31_32 = det*w[0][31]*w[0][32]*(1.0);
    const double G0_31_33 = det*w[0][31]*w[0][33]*(1.0);
    const double G0_31_34 = det*w[0][31]*w[0][34]*(1.0);
    const double G0_31_35 = det*w[0][31]*w[0][35]*(1.0);
    const double G0_31_36 = det*w[0][31]*w[0][36]*(1.0);
    const double G0_31_37 = det*w[0][31]*w[0][37]*(1.0);
    const double G0_31_38 = det*w[0][31]*w[0][38]*(1.0);
    const double G0_31_39 = det*w[0][31]*w[0][39]*(1.0);
    const double G0_31_40 = det*w[0][31]*w[0][40]*(1.0);
    const double G0_31_41 = det*w[0][31]*w[0][41]*(1.0);
    const double G0_31_42 = det*w[0][31]*w[0][42]*(1.0);
    const double G0_31_43 = det*w[0][31]*w[0][43]*(1.0);
    const double G0_31_44 = det*w[0][31]*w[0][44]*(1.0);
    const double G0_31_45 = det*w[0][31]*w[0][45]*(1.0);
    const double G0_31_46 = det*w[0][31]*w[0][46]*(1.0);
    const double G0_31_47 = det*w[0][31]*w[0][47]*(1.0);
    const double G0_31_48 = det*w[0][31]*w[0][48]*(1.0);
    const double G0_31_49 = det*w[0][31]*w[0][49]*(1.0);
    const double G0_31_50 = det*w[0][31]*w[0][50]*(1.0);
    const double G0_31_51 = det*w[0][31]*w[0][51]*(1.0);
    const double G0_31_52 = det*w[0][31]*w[0][52]*(1.0);
    const double G0_31_53 = det*w[0][31]*w[0][53]*(1.0);
    const double G0_31_54 = det*w[0][31]*w[0][54]*(1.0);
    const double G0_31_55 = det*w[0][31]*w[0][55]*(1.0);
    const double G0_32_28 = det*w[0][32]*w[0][28]*(1.0);
    const double G0_32_29 = det*w[0][32]*w[0][29]*(1.0);
    const double G0_32_30 = det*w[0][32]*w[0][30]*(1.0);
    const double G0_32_31 = det*w[0][32]*w[0][31]*(1.0);
    const double G0_32_32 = det*w[0][32]*w[0][32]*(1.0);
    const double G0_32_33 = det*w[0][32]*w[0][33]*(1.0);
    const double G0_32_34 = det*w[0][32]*w[0][34]*(1.0);
    const double G0_32_35 = det*w[0][32]*w[0][35]*(1.0);
    const double G0_32_36 = det*w[0][32]*w[0][36]*(1.0);
    const double G0_32_37 = det*w[0][32]*w[0][37]*(1.0);
    const double G0_32_38 = det*w[0][32]*w[0][38]*(1.0);
    const double G0_32_39 = det*w[0][32]*w[0][39]*(1.0);
    const double G0_32_40 = det*w[0][32]*w[0][40]*(1.0);
    const double G0_32_41 = det*w[0][32]*w[0][41]*(1.0);
    const double G0_32_42 = det*w[0][32]*w[0][42]*(1.0);
    const double G0_32_43 = det*w[0][32]*w[0][43]*(1.0);
    const double G0_32_44 = det*w[0][32]*w[0][44]*(1.0);
    const double G0_32_45 = det*w[0][32]*w[0][45]*(1.0);
    const double G0_32_46 = det*w[0][32]*w[0][46]*(1.0);
    const double G0_32_47 = det*w[0][32]*w[0][47]*(1.0);
    const double G0_32_48 = det*w[0][32]*w[0][48]*(1.0);
    const double G0_32_49 = det*w[0][32]*w[0][49]*(1.0);
    const double G0_32_50 = det*w[0][32]*w[0][50]*(1.0);
    const double G0_32_51 = det*w[0][32]*w[0][51]*(1.0);
    const double G0_32_52 = det*w[0][32]*w[0][52]*(1.0);
    const double G0_32_53 = det*w[0][32]*w[0][53]*(1.0);
    const double G0_32_54 = det*w[0][32]*w[0][54]*(1.0);
    const double G0_32_55 = det*w[0][32]*w[0][55]*(1.0);
    const double G0_33_28 = det*w[0][33]*w[0][28]*(1.0);
    const double G0_33_29 = det*w[0][33]*w[0][29]*(1.0);
    const double G0_33_30 = det*w[0][33]*w[0][30]*(1.0);
    const double G0_33_31 = det*w[0][33]*w[0][31]*(1.0);
    const double G0_33_32 = det*w[0][33]*w[0][32]*(1.0);
    const double G0_33_33 = det*w[0][33]*w[0][33]*(1.0);
    const double G0_33_34 = det*w[0][33]*w[0][34]*(1.0);
    const double G0_33_35 = det*w[0][33]*w[0][35]*(1.0);
    const double G0_33_36 = det*w[0][33]*w[0][36]*(1.0);
    const double G0_33_37 = det*w[0][33]*w[0][37]*(1.0);
    const double G0_33_38 = det*w[0][33]*w[0][38]*(1.0);
    const double G0_33_39 = det*w[0][33]*w[0][39]*(1.0);
    const double G0_33_40 = det*w[0][33]*w[0][40]*(1.0);
    const double G0_33_41 = det*w[0][33]*w[0][41]*(1.0);
    const double G0_33_42 = det*w[0][33]*w[0][42]*(1.0);
    const double G0_33_43 = det*w[0][33]*w[0][43]*(1.0);
    const double G0_33_44 = det*w[0][33]*w[0][44]*(1.0);
    const double G0_33_45 = det*w[0][33]*w[0][45]*(1.0);
    const double G0_33_46 = det*w[0][33]*w[0][46]*(1.0);
    const double G0_33_47 = det*w[0][33]*w[0][47]*(1.0);
    const double G0_33_48 = det*w[0][33]*w[0][48]*(1.0);
    const double G0_33_49 = det*w[0][33]*w[0][49]*(1.0);
    const double G0_33_50 = det*w[0][33]*w[0][50]*(1.0);
    const double G0_33_51 = det*w[0][33]*w[0][51]*(1.0);
    const double G0_33_52 = det*w[0][33]*w[0][52]*(1.0);
    const double G0_33_53 = det*w[0][33]*w[0][53]*(1.0);
    const double G0_33_54 = det*w[0][33]*w[0][54]*(1.0);
    const double G0_33_55 = det*w[0][33]*w[0][55]*(1.0);
    const double G0_34_28 = det*w[0][34]*w[0][28]*(1.0);
    const double G0_34_29 = det*w[0][34]*w[0][29]*(1.0);
    const double G0_34_30 = det*w[0][34]*w[0][30]*(1.0);
    const double G0_34_31 = det*w[0][34]*w[0][31]*(1.0);
    const double G0_34_32 = det*w[0][34]*w[0][32]*(1.0);
    const double G0_34_33 = det*w[0][34]*w[0][33]*(1.0);
    const double G0_34_34 = det*w[0][34]*w[0][34]*(1.0);
    const double G0_34_35 = det*w[0][34]*w[0][35]*(1.0);
    const double G0_34_36 = det*w[0][34]*w[0][36]*(1.0);
    const double G0_34_37 = det*w[0][34]*w[0][37]*(1.0);
    const double G0_34_38 = det*w[0][34]*w[0][38]*(1.0);
    const double G0_34_39 = det*w[0][34]*w[0][39]*(1.0);
    const double G0_34_40 = det*w[0][34]*w[0][40]*(1.0);
    const double G0_34_41 = det*w[0][34]*w[0][41]*(1.0);
    const double G0_34_42 = det*w[0][34]*w[0][42]*(1.0);
    const double G0_34_43 = det*w[0][34]*w[0][43]*(1.0);
    const double G0_34_44 = det*w[0][34]*w[0][44]*(1.0);
    const double G0_34_45 = det*w[0][34]*w[0][45]*(1.0);
    const double G0_34_46 = det*w[0][34]*w[0][46]*(1.0);
    const double G0_34_47 = det*w[0][34]*w[0][47]*(1.0);
    const double G0_34_48 = det*w[0][34]*w[0][48]*(1.0);
    const double G0_34_49 = det*w[0][34]*w[0][49]*(1.0);
    const double G0_34_50 = det*w[0][34]*w[0][50]*(1.0);
    const double G0_34_51 = det*w[0][34]*w[0][51]*(1.0);
    const double G0_34_52 = det*w[0][34]*w[0][52]*(1.0);
    const double G0_34_53 = det*w[0][34]*w[0][53]*(1.0);
    const double G0_34_54 = det*w[0][34]*w[0][54]*(1.0);
    const double G0_34_55 = det*w[0][34]*w[0][55]*(1.0);
    const double G0_35_28 = det*w[0][35]*w[0][28]*(1.0);
    const double G0_35_29 = det*w[0][35]*w[0][29]*(1.0);
    const double G0_35_30 = det*w[0][35]*w[0][30]*(1.0);
    const double G0_35_31 = det*w[0][35]*w[0][31]*(1.0);
    const double G0_35_32 = det*w[0][35]*w[0][32]*(1.0);
    const double G0_35_33 = det*w[0][35]*w[0][33]*(1.0);
    const double G0_35_34 = det*w[0][35]*w[0][34]*(1.0);
    const double G0_35_35 = det*w[0][35]*w[0][35]*(1.0);
    const double G0_35_36 = det*w[0][35]*w[0][36]*(1.0);
    const double G0_35_37 = det*w[0][35]*w[0][37]*(1.0);
    const double G0_35_38 = det*w[0][35]*w[0][38]*(1.0);
    const double G0_35_39 = det*w[0][35]*w[0][39]*(1.0);
    const double G0_35_40 = det*w[0][35]*w[0][40]*(1.0);
    const double G0_35_41 = det*w[0][35]*w[0][41]*(1.0);
    const double G0_35_42 = det*w[0][35]*w[0][42]*(1.0);
    const double G0_35_43 = det*w[0][35]*w[0][43]*(1.0);
    const double G0_35_44 = det*w[0][35]*w[0][44]*(1.0);
    const double G0_35_45 = det*w[0][35]*w[0][45]*(1.0);
    const double G0_35_46 = det*w[0][35]*w[0][46]*(1.0);
    const double G0_35_47 = det*w[0][35]*w[0][47]*(1.0);
    const double G0_35_48 = det*w[0][35]*w[0][48]*(1.0);
    const double G0_35_49 = det*w[0][35]*w[0][49]*(1.0);
    const double G0_35_50 = det*w[0][35]*w[0][50]*(1.0);
    const double G0_35_51 = det*w[0][35]*w[0][51]*(1.0);
    const double G0_35_52 = det*w[0][35]*w[0][52]*(1.0);
    const double G0_35_53 = det*w[0][35]*w[0][53]*(1.0);
    const double G0_35_54 = det*w[0][35]*w[0][54]*(1.0);
    const double G0_35_55 = det*w[0][35]*w[0][55]*(1.0);
    const double G0_36_28 = det*w[0][36]*w[0][28]*(1.0);
    const double G0_36_29 = det*w[0][36]*w[0][29]*(1.0);
    const double G0_36_30 = det*w[0][36]*w[0][30]*(1.0);
    const double G0_36_31 = det*w[0][36]*w[0][31]*(1.0);
    const double G0_36_32 = det*w[0][36]*w[0][32]*(1.0);
    const double G0_36_33 = det*w[0][36]*w[0][33]*(1.0);
    const double G0_36_34 = det*w[0][36]*w[0][34]*(1.0);
    const double G0_36_35 = det*w[0][36]*w[0][35]*(1.0);
    const double G0_36_36 = det*w[0][36]*w[0][36]*(1.0);
    const double G0_36_37 = det*w[0][36]*w[0][37]*(1.0);
    const double G0_36_38 = det*w[0][36]*w[0][38]*(1.0);
    const double G0_36_39 = det*w[0][36]*w[0][39]*(1.0);
    const double G0_36_40 = det*w[0][36]*w[0][40]*(1.0);
    const double G0_36_41 = det*w[0][36]*w[0][41]*(1.0);
    const double G0_36_42 = det*w[0][36]*w[0][42]*(1.0);
    const double G0_36_43 = det*w[0][36]*w[0][43]*(1.0);
    const double G0_36_44 = det*w[0][36]*w[0][44]*(1.0);
    const double G0_36_45 = det*w[0][36]*w[0][45]*(1.0);
    const double G0_36_46 = det*w[0][36]*w[0][46]*(1.0);
    const double G0_36_47 = det*w[0][36]*w[0][47]*(1.0);
    const double G0_36_48 = det*w[0][36]*w[0][48]*(1.0);
    const double G0_36_49 = det*w[0][36]*w[0][49]*(1.0);
    const double G0_36_50 = det*w[0][36]*w[0][50]*(1.0);
    const double G0_36_51 = det*w[0][36]*w[0][51]*(1.0);
    const double G0_36_52 = det*w[0][36]*w[0][52]*(1.0);
    const double G0_36_53 = det*w[0][36]*w[0][53]*(1.0);
    const double G0_36_54 = det*w[0][36]*w[0][54]*(1.0);
    const double G0_36_55 = det*w[0][36]*w[0][55]*(1.0);
    const double G0_37_28 = det*w[0][37]*w[0][28]*(1.0);
    const double G0_37_29 = det*w[0][37]*w[0][29]*(1.0);
    const double G0_37_30 = det*w[0][37]*w[0][30]*(1.0);
    const double G0_37_31 = det*w[0][37]*w[0][31]*(1.0);
    const double G0_37_32 = det*w[0][37]*w[0][32]*(1.0);
    const double G0_37_33 = det*w[0][37]*w[0][33]*(1.0);
    const double G0_37_34 = det*w[0][37]*w[0][34]*(1.0);
    const double G0_37_35 = det*w[0][37]*w[0][35]*(1.0);
    const double G0_37_36 = det*w[0][37]*w[0][36]*(1.0);
    const double G0_37_37 = det*w[0][37]*w[0][37]*(1.0);
    const double G0_37_38 = det*w[0][37]*w[0][38]*(1.0);
    const double G0_37_39 = det*w[0][37]*w[0][39]*(1.0);
    const double G0_37_40 = det*w[0][37]*w[0][40]*(1.0);
    const double G0_37_41 = det*w[0][37]*w[0][41]*(1.0);
    const double G0_37_42 = det*w[0][37]*w[0][42]*(1.0);
    const double G0_37_43 = det*w[0][37]*w[0][43]*(1.0);
    const double G0_37_44 = det*w[0][37]*w[0][44]*(1.0);
    const double G0_37_45 = det*w[0][37]*w[0][45]*(1.0);
    const double G0_37_46 = det*w[0][37]*w[0][46]*(1.0);
    const double G0_37_47 = det*w[0][37]*w[0][47]*(1.0);
    const double G0_37_48 = det*w[0][37]*w[0][48]*(1.0);
    const double G0_37_49 = det*w[0][37]*w[0][49]*(1.0);
    const double G0_37_50 = det*w[0][37]*w[0][50]*(1.0);
    const double G0_37_51 = det*w[0][37]*w[0][51]*(1.0);
    const double G0_37_52 = det*w[0][37]*w[0][52]*(1.0);
    const double G0_37_53 = det*w[0][37]*w[0][53]*(1.0);
    const double G0_37_54 = det*w[0][37]*w[0][54]*(1.0);
    const double G0_37_55 = det*w[0][37]*w[0][55]*(1.0);
    const double G0_38_28 = det*w[0][38]*w[0][28]*(1.0);
    const double G0_38_29 = det*w[0][38]*w[0][29]*(1.0);
    const double G0_38_30 = det*w[0][38]*w[0][30]*(1.0);
    const double G0_38_31 = det*w[0][38]*w[0][31]*(1.0);
    const double G0_38_32 = det*w[0][38]*w[0][32]*(1.0);
    const double G0_38_33 = det*w[0][38]*w[0][33]*(1.0);
    const double G0_38_34 = det*w[0][38]*w[0][34]*(1.0);
    const double G0_38_35 = det*w[0][38]*w[0][35]*(1.0);
    const double G0_38_36 = det*w[0][38]*w[0][36]*(1.0);
    const double G0_38_37 = det*w[0][38]*w[0][37]*(1.0);
    const double G0_38_38 = det*w[0][38]*w[0][38]*(1.0);
    const double G0_38_39 = det*w[0][38]*w[0][39]*(1.0);
    const double G0_38_40 = det*w[0][38]*w[0][40]*(1.0);
    const double G0_38_41 = det*w[0][38]*w[0][41]*(1.0);
    const double G0_38_42 = det*w[0][38]*w[0][42]*(1.0);
    const double G0_38_43 = det*w[0][38]*w[0][43]*(1.0);
    const double G0_38_44 = det*w[0][38]*w[0][44]*(1.0);
    const double G0_38_45 = det*w[0][38]*w[0][45]*(1.0);
    const double G0_38_46 = det*w[0][38]*w[0][46]*(1.0);
    const double G0_38_47 = det*w[0][38]*w[0][47]*(1.0);
    const double G0_38_48 = det*w[0][38]*w[0][48]*(1.0);
    const double G0_38_49 = det*w[0][38]*w[0][49]*(1.0);
    const double G0_38_50 = det*w[0][38]*w[0][50]*(1.0);
    const double G0_38_51 = det*w[0][38]*w[0][51]*(1.0);
    const double G0_38_52 = det*w[0][38]*w[0][52]*(1.0);
    const double G0_38_53 = det*w[0][38]*w[0][53]*(1.0);
    const double G0_38_54 = det*w[0][38]*w[0][54]*(1.0);
    const double G0_38_55 = det*w[0][38]*w[0][55]*(1.0);
    const double G0_39_28 = det*w[0][39]*w[0][28]*(1.0);
    const double G0_39_29 = det*w[0][39]*w[0][29]*(1.0);
    const double G0_39_30 = det*w[0][39]*w[0][30]*(1.0);
    const double G0_39_31 = det*w[0][39]*w[0][31]*(1.0);
    const double G0_39_32 = det*w[0][39]*w[0][32]*(1.0);
    const double G0_39_33 = det*w[0][39]*w[0][33]*(1.0);
    const double G0_39_34 = det*w[0][39]*w[0][34]*(1.0);
    const double G0_39_35 = det*w[0][39]*w[0][35]*(1.0);
    const double G0_39_36 = det*w[0][39]*w[0][36]*(1.0);
    const double G0_39_37 = det*w[0][39]*w[0][37]*(1.0);
    const double G0_39_38 = det*w[0][39]*w[0][38]*(1.0);
    const double G0_39_39 = det*w[0][39]*w[0][39]*(1.0);
    const double G0_39_40 = det*w[0][39]*w[0][40]*(1.0);
    const double G0_39_41 = det*w[0][39]*w[0][41]*(1.0);
    const double G0_39_42 = det*w[0][39]*w[0][42]*(1.0);
    const double G0_39_43 = det*w[0][39]*w[0][43]*(1.0);
    const double G0_39_44 = det*w[0][39]*w[0][44]*(1.0);
    const double G0_39_45 = det*w[0][39]*w[0][45]*(1.0);
    const double G0_39_46 = det*w[0][39]*w[0][46]*(1.0);
    const double G0_39_47 = det*w[0][39]*w[0][47]*(1.0);
    const double G0_39_48 = det*w[0][39]*w[0][48]*(1.0);
    const double G0_39_49 = det*w[0][39]*w[0][49]*(1.0);
    const double G0_39_50 = det*w[0][39]*w[0][50]*(1.0);
    const double G0_39_51 = det*w[0][39]*w[0][51]*(1.0);
    const double G0_39_52 = det*w[0][39]*w[0][52]*(1.0);
    const double G0_39_53 = det*w[0][39]*w[0][53]*(1.0);
    const double G0_39_54 = det*w[0][39]*w[0][54]*(1.0);
    const double G0_39_55 = det*w[0][39]*w[0][55]*(1.0);
    const double G0_40_28 = det*w[0][40]*w[0][28]*(1.0);
    const double G0_40_29 = det*w[0][40]*w[0][29]*(1.0);
    const double G0_40_30 = det*w[0][40]*w[0][30]*(1.0);
    const double G0_40_31 = det*w[0][40]*w[0][31]*(1.0);
    const double G0_40_32 = det*w[0][40]*w[0][32]*(1.0);
    const double G0_40_33 = det*w[0][40]*w[0][33]*(1.0);
    const double G0_40_34 = det*w[0][40]*w[0][34]*(1.0);
    const double G0_40_35 = det*w[0][40]*w[0][35]*(1.0);
    const double G0_40_36 = det*w[0][40]*w[0][36]*(1.0);
    const double G0_40_37 = det*w[0][40]*w[0][37]*(1.0);
    const double G0_40_38 = det*w[0][40]*w[0][38]*(1.0);
    const double G0_40_39 = det*w[0][40]*w[0][39]*(1.0);
    const double G0_40_40 = det*w[0][40]*w[0][40]*(1.0);
    const double G0_40_41 = det*w[0][40]*w[0][41]*(1.0);
    const double G0_40_42 = det*w[0][40]*w[0][42]*(1.0);
    const double G0_40_43 = det*w[0][40]*w[0][43]*(1.0);
    const double G0_40_44 = det*w[0][40]*w[0][44]*(1.0);
    const double G0_40_45 = det*w[0][40]*w[0][45]*(1.0);
    const double G0_40_46 = det*w[0][40]*w[0][46]*(1.0);
    const double G0_40_47 = det*w[0][40]*w[0][47]*(1.0);
    const double G0_40_48 = det*w[0][40]*w[0][48]*(1.0);
    const double G0_40_49 = det*w[0][40]*w[0][49]*(1.0);
    const double G0_40_50 = det*w[0][40]*w[0][50]*(1.0);
    const double G0_40_51 = det*w[0][40]*w[0][51]*(1.0);
    const double G0_40_52 = det*w[0][40]*w[0][52]*(1.0);
    const double G0_40_53 = det*w[0][40]*w[0][53]*(1.0);
    const double G0_40_54 = det*w[0][40]*w[0][54]*(1.0);
    const double G0_40_55 = det*w[0][40]*w[0][55]*(1.0);
    const double G0_41_28 = det*w[0][41]*w[0][28]*(1.0);
    const double G0_41_29 = det*w[0][41]*w[0][29]*(1.0);
    const double G0_41_30 = det*w[0][41]*w[0][30]*(1.0);
    const double G0_41_31 = det*w[0][41]*w[0][31]*(1.0);
    const double G0_41_32 = det*w[0][41]*w[0][32]*(1.0);
    const double G0_41_33 = det*w[0][41]*w[0][33]*(1.0);
    const double G0_41_34 = det*w[0][41]*w[0][34]*(1.0);
    const double G0_41_35 = det*w[0][41]*w[0][35]*(1.0);
    const double G0_41_36 = det*w[0][41]*w[0][36]*(1.0);
    const double G0_41_37 = det*w[0][41]*w[0][37]*(1.0);
    const double G0_41_38 = det*w[0][41]*w[0][38]*(1.0);
    const double G0_41_39 = det*w[0][41]*w[0][39]*(1.0);
    const double G0_41_40 = det*w[0][41]*w[0][40]*(1.0);
    const double G0_41_41 = det*w[0][41]*w[0][41]*(1.0);
    const double G0_41_42 = det*w[0][41]*w[0][42]*(1.0);
    const double G0_41_43 = det*w[0][41]*w[0][43]*(1.0);
    const double G0_41_44 = det*w[0][41]*w[0][44]*(1.0);
    const double G0_41_45 = det*w[0][41]*w[0][45]*(1.0);
    const double G0_41_46 = det*w[0][41]*w[0][46]*(1.0);
    const double G0_41_47 = det*w[0][41]*w[0][47]*(1.0);
    const double G0_41_48 = det*w[0][41]*w[0][48]*(1.0);
    const double G0_41_49 = det*w[0][41]*w[0][49]*(1.0);
    const double G0_41_50 = det*w[0][41]*w[0][50]*(1.0);
    const double G0_41_51 = det*w[0][41]*w[0][51]*(1.0);
    const double G0_41_52 = det*w[0][41]*w[0][52]*(1.0);
    const double G0_41_53 = det*w[0][41]*w[0][53]*(1.0);
    const double G0_41_54 = det*w[0][41]*w[0][54]*(1.0);
    const double G0_41_55 = det*w[0][41]*w[0][55]*(1.0);
    const double G0_42_28 = det*w[0][42]*w[0][28]*(1.0);
    const double G0_42_29 = det*w[0][42]*w[0][29]*(1.0);
    const double G0_42_30 = det*w[0][42]*w[0][30]*(1.0);
    const double G0_42_31 = det*w[0][42]*w[0][31]*(1.0);
    const double G0_42_32 = det*w[0][42]*w[0][32]*(1.0);
    const double G0_42_33 = det*w[0][42]*w[0][33]*(1.0);
    const double G0_42_34 = det*w[0][42]*w[0][34]*(1.0);
    const double G0_42_35 = det*w[0][42]*w[0][35]*(1.0);
    const double G0_42_36 = det*w[0][42]*w[0][36]*(1.0);
    const double G0_42_37 = det*w[0][42]*w[0][37]*(1.0);
    const double G0_42_38 = det*w[0][42]*w[0][38]*(1.0);
    const double G0_42_39 = det*w[0][42]*w[0][39]*(1.0);
    const double G0_42_40 = det*w[0][42]*w[0][40]*(1.0);
    const double G0_42_41 = det*w[0][42]*w[0][41]*(1.0);
    const double G0_42_42 = det*w[0][42]*w[0][42]*(1.0);
    const double G0_42_43 = det*w[0][42]*w[0][43]*(1.0);
    const double G0_42_44 = det*w[0][42]*w[0][44]*(1.0);
    const double G0_42_45 = det*w[0][42]*w[0][45]*(1.0);
    const double G0_42_46 = det*w[0][42]*w[0][46]*(1.0);
    const double G0_42_47 = det*w[0][42]*w[0][47]*(1.0);
    const double G0_42_48 = det*w[0][42]*w[0][48]*(1.0);
    const double G0_42_49 = det*w[0][42]*w[0][49]*(1.0);
    const double G0_42_50 = det*w[0][42]*w[0][50]*(1.0);
    const double G0_42_51 = det*w[0][42]*w[0][51]*(1.0);
    const double G0_42_52 = det*w[0][42]*w[0][52]*(1.0);
    const double G0_42_53 = det*w[0][42]*w[0][53]*(1.0);
    const double G0_42_54 = det*w[0][42]*w[0][54]*(1.0);
    const double G0_42_55 = det*w[0][42]*w[0][55]*(1.0);
    const double G0_43_28 = det*w[0][43]*w[0][28]*(1.0);
    const double G0_43_29 = det*w[0][43]*w[0][29]*(1.0);
    const double G0_43_30 = det*w[0][43]*w[0][30]*(1.0);
    const double G0_43_31 = det*w[0][43]*w[0][31]*(1.0);
    const double G0_43_32 = det*w[0][43]*w[0][32]*(1.0);
    const double G0_43_33 = det*w[0][43]*w[0][33]*(1.0);
    const double G0_43_34 = det*w[0][43]*w[0][34]*(1.0);
    const double G0_43_35 = det*w[0][43]*w[0][35]*(1.0);
    const double G0_43_36 = det*w[0][43]*w[0][36]*(1.0);
    const double G0_43_37 = det*w[0][43]*w[0][37]*(1.0);
    const double G0_43_38 = det*w[0][43]*w[0][38]*(1.0);
    const double G0_43_39 = det*w[0][43]*w[0][39]*(1.0);
    const double G0_43_40 = det*w[0][43]*w[0][40]*(1.0);
    const double G0_43_41 = det*w[0][43]*w[0][41]*(1.0);
    const double G0_43_42 = det*w[0][43]*w[0][42]*(1.0);
    const double G0_43_43 = det*w[0][43]*w[0][43]*(1.0);
    const double G0_43_44 = det*w[0][43]*w[0][44]*(1.0);
    const double G0_43_45 = det*w[0][43]*w[0][45]*(1.0);
    const double G0_43_46 = det*w[0][43]*w[0][46]*(1.0);
    const double G0_43_47 = det*w[0][43]*w[0][47]*(1.0);
    const double G0_43_48 = det*w[0][43]*w[0][48]*(1.0);
    const double G0_43_49 = det*w[0][43]*w[0][49]*(1.0);
    const double G0_43_50 = det*w[0][43]*w[0][50]*(1.0);
    const double G0_43_51 = det*w[0][43]*w[0][51]*(1.0);
    const double G0_43_52 = det*w[0][43]*w[0][52]*(1.0);
    const double G0_43_53 = det*w[0][43]*w[0][53]*(1.0);
    const double G0_43_54 = det*w[0][43]*w[0][54]*(1.0);
    const double G0_43_55 = det*w[0][43]*w[0][55]*(1.0);
    const double G0_44_28 = det*w[0][44]*w[0][28]*(1.0);
    const double G0_44_29 = det*w[0][44]*w[0][29]*(1.0);
    const double G0_44_30 = det*w[0][44]*w[0][30]*(1.0);
    const double G0_44_31 = det*w[0][44]*w[0][31]*(1.0);
    const double G0_44_32 = det*w[0][44]*w[0][32]*(1.0);
    const double G0_44_33 = det*w[0][44]*w[0][33]*(1.0);
    const double G0_44_34 = det*w[0][44]*w[0][34]*(1.0);
    const double G0_44_35 = det*w[0][44]*w[0][35]*(1.0);
    const double G0_44_36 = det*w[0][44]*w[0][36]*(1.0);
    const double G0_44_37 = det*w[0][44]*w[0][37]*(1.0);
    const double G0_44_38 = det*w[0][44]*w[0][38]*(1.0);
    const double G0_44_39 = det*w[0][44]*w[0][39]*(1.0);
    const double G0_44_40 = det*w[0][44]*w[0][40]*(1.0);
    const double G0_44_41 = det*w[0][44]*w[0][41]*(1.0);
    const double G0_44_42 = det*w[0][44]*w[0][42]*(1.0);
    const double G0_44_43 = det*w[0][44]*w[0][43]*(1.0);
    const double G0_44_44 = det*w[0][44]*w[0][44]*(1.0);
    const double G0_44_45 = det*w[0][44]*w[0][45]*(1.0);
    const double G0_44_46 = det*w[0][44]*w[0][46]*(1.0);
    const double G0_44_47 = det*w[0][44]*w[0][47]*(1.0);
    const double G0_44_48 = det*w[0][44]*w[0][48]*(1.0);
    const double G0_44_49 = det*w[0][44]*w[0][49]*(1.0);
    const double G0_44_50 = det*w[0][44]*w[0][50]*(1.0);
    const double G0_44_51 = det*w[0][44]*w[0][51]*(1.0);
    const double G0_44_52 = det*w[0][44]*w[0][52]*(1.0);
    const double G0_44_53 = det*w[0][44]*w[0][53]*(1.0);
    const double G0_44_54 = det*w[0][44]*w[0][54]*(1.0);
    const double G0_44_55 = det*w[0][44]*w[0][55]*(1.0);
    const double G0_45_28 = det*w[0][45]*w[0][28]*(1.0);
    const double G0_45_29 = det*w[0][45]*w[0][29]*(1.0);
    const double G0_45_30 = det*w[0][45]*w[0][30]*(1.0);
    const double G0_45_31 = det*w[0][45]*w[0][31]*(1.0);
    const double G0_45_32 = det*w[0][45]*w[0][32]*(1.0);
    const double G0_45_33 = det*w[0][45]*w[0][33]*(1.0);
    const double G0_45_34 = det*w[0][45]*w[0][34]*(1.0);
    const double G0_45_35 = det*w[0][45]*w[0][35]*(1.0);
    const double G0_45_36 = det*w[0][45]*w[0][36]*(1.0);
    const double G0_45_37 = det*w[0][45]*w[0][37]*(1.0);
    const double G0_45_38 = det*w[0][45]*w[0][38]*(1.0);
    const double G0_45_39 = det*w[0][45]*w[0][39]*(1.0);
    const double G0_45_40 = det*w[0][45]*w[0][40]*(1.0);
    const double G0_45_41 = det*w[0][45]*w[0][41]*(1.0);
    const double G0_45_42 = det*w[0][45]*w[0][42]*(1.0);
    const double G0_45_43 = det*w[0][45]*w[0][43]*(1.0);
    const double G0_45_44 = det*w[0][45]*w[0][44]*(1.0);
    const double G0_45_45 = det*w[0][45]*w[0][45]*(1.0);
    const double G0_45_46 = det*w[0][45]*w[0][46]*(1.0);
    const double G0_45_47 = det*w[0][45]*w[0][47]*(1.0);
    const double G0_45_48 = det*w[0][45]*w[0][48]*(1.0);
    const double G0_45_49 = det*w[0][45]*w[0][49]*(1.0);
    const double G0_45_50 = det*w[0][45]*w[0][50]*(1.0);
    const double G0_45_51 = det*w[0][45]*w[0][51]*(1.0);
    const double G0_45_52 = det*w[0][45]*w[0][52]*(1.0);
    const double G0_45_53 = det*w[0][45]*w[0][53]*(1.0);
    const double G0_45_54 = det*w[0][45]*w[0][54]*(1.0);
    const double G0_45_55 = det*w[0][45]*w[0][55]*(1.0);
    const double G0_46_28 = det*w[0][46]*w[0][28]*(1.0);
    const double G0_46_29 = det*w[0][46]*w[0][29]*(1.0);
    const double G0_46_30 = det*w[0][46]*w[0][30]*(1.0);
    const double G0_46_31 = det*w[0][46]*w[0][31]*(1.0);
    const double G0_46_32 = det*w[0][46]*w[0][32]*(1.0);
    const double G0_46_33 = det*w[0][46]*w[0][33]*(1.0);
    const double G0_46_34 = det*w[0][46]*w[0][34]*(1.0);
    const double G0_46_35 = det*w[0][46]*w[0][35]*(1.0);
    const double G0_46_36 = det*w[0][46]*w[0][36]*(1.0);
    const double G0_46_37 = det*w[0][46]*w[0][37]*(1.0);
    const double G0_46_38 = det*w[0][46]*w[0][38]*(1.0);
    const double G0_46_39 = det*w[0][46]*w[0][39]*(1.0);
    const double G0_46_40 = det*w[0][46]*w[0][40]*(1.0);
    const double G0_46_41 = det*w[0][46]*w[0][41]*(1.0);
    const double G0_46_42 = det*w[0][46]*w[0][42]*(1.0);
    const double G0_46_43 = det*w[0][46]*w[0][43]*(1.0);
    const double G0_46_44 = det*w[0][46]*w[0][44]*(1.0);
    const double G0_46_45 = det*w[0][46]*w[0][45]*(1.0);
    const double G0_46_46 = det*w[0][46]*w[0][46]*(1.0);
    const double G0_46_47 = det*w[0][46]*w[0][47]*(1.0);
    const double G0_46_48 = det*w[0][46]*w[0][48]*(1.0);
    const double G0_46_49 = det*w[0][46]*w[0][49]*(1.0);
    const double G0_46_50 = det*w[0][46]*w[0][50]*(1.0);
    const double G0_46_51 = det*w[0][46]*w[0][51]*(1.0);
    const double G0_46_52 = det*w[0][46]*w[0][52]*(1.0);
    const double G0_46_53 = det*w[0][46]*w[0][53]*(1.0);
    const double G0_46_54 = det*w[0][46]*w[0][54]*(1.0);
    const double G0_46_55 = det*w[0][46]*w[0][55]*(1.0);
    const double G0_47_28 = det*w[0][47]*w[0][28]*(1.0);
    const double G0_47_29 = det*w[0][47]*w[0][29]*(1.0);
    const double G0_47_30 = det*w[0][47]*w[0][30]*(1.0);
    const double G0_47_31 = det*w[0][47]*w[0][31]*(1.0);
    const double G0_47_32 = det*w[0][47]*w[0][32]*(1.0);
    const double G0_47_33 = det*w[0][47]*w[0][33]*(1.0);
    const double G0_47_34 = det*w[0][47]*w[0][34]*(1.0);
    const double G0_47_35 = det*w[0][47]*w[0][35]*(1.0);
    const double G0_47_36 = det*w[0][47]*w[0][36]*(1.0);
    const double G0_47_37 = det*w[0][47]*w[0][37]*(1.0);
    const double G0_47_38 = det*w[0][47]*w[0][38]*(1.0);
    const double G0_47_39 = det*w[0][47]*w[0][39]*(1.0);
    const double G0_47_40 = det*w[0][47]*w[0][40]*(1.0);
    const double G0_47_41 = det*w[0][47]*w[0][41]*(1.0);
    const double G0_47_42 = det*w[0][47]*w[0][42]*(1.0);
    const double G0_47_43 = det*w[0][47]*w[0][43]*(1.0);
    const double G0_47_44 = det*w[0][47]*w[0][44]*(1.0);
    const double G0_47_45 = det*w[0][47]*w[0][45]*(1.0);
    const double G0_47_46 = det*w[0][47]*w[0][46]*(1.0);
    const double G0_47_47 = det*w[0][47]*w[0][47]*(1.0);
    const double G0_47_48 = det*w[0][47]*w[0][48]*(1.0);
    const double G0_47_49 = det*w[0][47]*w[0][49]*(1.0);
    const double G0_47_50 = det*w[0][47]*w[0][50]*(1.0);
    const double G0_47_51 = det*w[0][47]*w[0][51]*(1.0);
    const double G0_47_52 = det*w[0][47]*w[0][52]*(1.0);
    const double G0_47_53 = det*w[0][47]*w[0][53]*(1.0);
    const double G0_47_54 = det*w[0][47]*w[0][54]*(1.0);
    const double G0_47_55 = det*w[0][47]*w[0][55]*(1.0);
    const double G0_48_28 = det*w[0][48]*w[0][28]*(1.0);
    const double G0_48_29 = det*w[0][48]*w[0][29]*(1.0);
    const double G0_48_30 = det*w[0][48]*w[0][30]*(1.0);
    const double G0_48_31 = det*w[0][48]*w[0][31]*(1.0);
    const double G0_48_32 = det*w[0][48]*w[0][32]*(1.0);
    const double G0_48_33 = det*w[0][48]*w[0][33]*(1.0);
    const double G0_48_34 = det*w[0][48]*w[0][34]*(1.0);
    const double G0_48_35 = det*w[0][48]*w[0][35]*(1.0);
    const double G0_48_36 = det*w[0][48]*w[0][36]*(1.0);
    const double G0_48_37 = det*w[0][48]*w[0][37]*(1.0);
    const double G0_48_38 = det*w[0][48]*w[0][38]*(1.0);
    const double G0_48_39 = det*w[0][48]*w[0][39]*(1.0);
    const double G0_48_40 = det*w[0][48]*w[0][40]*(1.0);
    const double G0_48_41 = det*w[0][48]*w[0][41]*(1.0);
    const double G0_48_42 = det*w[0][48]*w[0][42]*(1.0);
    const double G0_48_43 = det*w[0][48]*w[0][43]*(1.0);
    const double G0_48_44 = det*w[0][48]*w[0][44]*(1.0);
    const double G0_48_45 = det*w[0][48]*w[0][45]*(1.0);
    const double G0_48_46 = det*w[0][48]*w[0][46]*(1.0);
    const double G0_48_47 = det*w[0][48]*w[0][47]*(1.0);
    const double G0_48_48 = det*w[0][48]*w[0][48]*(1.0);
    const double G0_48_49 = det*w[0][48]*w[0][49]*(1.0);
    const double G0_48_50 = det*w[0][48]*w[0][50]*(1.0);
    const double G0_48_51 = det*w[0][48]*w[0][51]*(1.0);
    const double G0_48_52 = det*w[0][48]*w[0][52]*(1.0);
    const double G0_48_53 = det*w[0][48]*w[0][53]*(1.0);
    const double G0_48_54 = det*w[0][48]*w[0][54]*(1.0);
    const double G0_48_55 = det*w[0][48]*w[0][55]*(1.0);
    const double G0_49_28 = det*w[0][49]*w[0][28]*(1.0);
    const double G0_49_29 = det*w[0][49]*w[0][29]*(1.0);
    const double G0_49_30 = det*w[0][49]*w[0][30]*(1.0);
    const double G0_49_31 = det*w[0][49]*w[0][31]*(1.0);
    const double G0_49_32 = det*w[0][49]*w[0][32]*(1.0);
    const double G0_49_33 = det*w[0][49]*w[0][33]*(1.0);
    const double G0_49_34 = det*w[0][49]*w[0][34]*(1.0);
    const double G0_49_35 = det*w[0][49]*w[0][35]*(1.0);
    const double G0_49_36 = det*w[0][49]*w[0][36]*(1.0);
    const double G0_49_37 = det*w[0][49]*w[0][37]*(1.0);
    const double G0_49_38 = det*w[0][49]*w[0][38]*(1.0);
    const double G0_49_39 = det*w[0][49]*w[0][39]*(1.0);
    const double G0_49_40 = det*w[0][49]*w[0][40]*(1.0);
    const double G0_49_41 = det*w[0][49]*w[0][41]*(1.0);
    const double G0_49_42 = det*w[0][49]*w[0][42]*(1.0);
    const double G0_49_43 = det*w[0][49]*w[0][43]*(1.0);
    const double G0_49_44 = det*w[0][49]*w[0][44]*(1.0);
    const double G0_49_45 = det*w[0][49]*w[0][45]*(1.0);
    const double G0_49_46 = det*w[0][49]*w[0][46]*(1.0);
    const double G0_49_47 = det*w[0][49]*w[0][47]*(1.0);
    const double G0_49_48 = det*w[0][49]*w[0][48]*(1.0);
    const double G0_49_49 = det*w[0][49]*w[0][49]*(1.0);
    const double G0_49_50 = det*w[0][49]*w[0][50]*(1.0);
    const double G0_49_51 = det*w[0][49]*w[0][51]*(1.0);
    const double G0_49_52 = det*w[0][49]*w[0][52]*(1.0);
    const double G0_49_53 = det*w[0][49]*w[0][53]*(1.0);
    const double G0_49_54 = det*w[0][49]*w[0][54]*(1.0);
    const double G0_49_55 = det*w[0][49]*w[0][55]*(1.0);
    const double G0_50_28 = det*w[0][50]*w[0][28]*(1.0);
    const double G0_50_29 = det*w[0][50]*w[0][29]*(1.0);
    const double G0_50_30 = det*w[0][50]*w[0][30]*(1.0);
    const double G0_50_31 = det*w[0][50]*w[0][31]*(1.0);
    const double G0_50_32 = det*w[0][50]*w[0][32]*(1.0);
    const double G0_50_33 = det*w[0][50]*w[0][33]*(1.0);
    const double G0_50_34 = det*w[0][50]*w[0][34]*(1.0);
    const double G0_50_35 = det*w[0][50]*w[0][35]*(1.0);
    const double G0_50_36 = det*w[0][50]*w[0][36]*(1.0);
    const double G0_50_37 = det*w[0][50]*w[0][37]*(1.0);
    const double G0_50_38 = det*w[0][50]*w[0][38]*(1.0);
    const double G0_50_39 = det*w[0][50]*w[0][39]*(1.0);
    const double G0_50_40 = det*w[0][50]*w[0][40]*(1.0);
    const double G0_50_41 = det*w[0][50]*w[0][41]*(1.0);
    const double G0_50_42 = det*w[0][50]*w[0][42]*(1.0);
    const double G0_50_43 = det*w[0][50]*w[0][43]*(1.0);
    const double G0_50_44 = det*w[0][50]*w[0][44]*(1.0);
    const double G0_50_45 = det*w[0][50]*w[0][45]*(1.0);
    const double G0_50_46 = det*w[0][50]*w[0][46]*(1.0);
    const double G0_50_47 = det*w[0][50]*w[0][47]*(1.0);
    const double G0_50_48 = det*w[0][50]*w[0][48]*(1.0);
    const double G0_50_49 = det*w[0][50]*w[0][49]*(1.0);
    const double G0_50_50 = det*w[0][50]*w[0][50]*(1.0);
    const double G0_50_51 = det*w[0][50]*w[0][51]*(1.0);
    const double G0_50_52 = det*w[0][50]*w[0][52]*(1.0);
    const double G0_50_53 = det*w[0][50]*w[0][53]*(1.0);
    const double G0_50_54 = det*w[0][50]*w[0][54]*(1.0);
    const double G0_50_55 = det*w[0][50]*w[0][55]*(1.0);
    const double G0_51_28 = det*w[0][51]*w[0][28]*(1.0);
    const double G0_51_29 = det*w[0][51]*w[0][29]*(1.0);
    const double G0_51_30 = det*w[0][51]*w[0][30]*(1.0);
    const double G0_51_31 = det*w[0][51]*w[0][31]*(1.0);
    const double G0_51_32 = det*w[0][51]*w[0][32]*(1.0);
    const double G0_51_33 = det*w[0][51]*w[0][33]*(1.0);
    const double G0_51_34 = det*w[0][51]*w[0][34]*(1.0);
    const double G0_51_35 = det*w[0][51]*w[0][35]*(1.0);
    const double G0_51_36 = det*w[0][51]*w[0][36]*(1.0);
    const double G0_51_37 = det*w[0][51]*w[0][37]*(1.0);
    const double G0_51_38 = det*w[0][51]*w[0][38]*(1.0);
    const double G0_51_39 = det*w[0][51]*w[0][39]*(1.0);
    const double G0_51_40 = det*w[0][51]*w[0][40]*(1.0);
    const double G0_51_41 = det*w[0][51]*w[0][41]*(1.0);
    const double G0_51_42 = det*w[0][51]*w[0][42]*(1.0);
    const double G0_51_43 = det*w[0][51]*w[0][43]*(1.0);
    const double G0_51_44 = det*w[0][51]*w[0][44]*(1.0);
    const double G0_51_45 = det*w[0][51]*w[0][45]*(1.0);
    const double G0_51_46 = det*w[0][51]*w[0][46]*(1.0);
    const double G0_51_47 = det*w[0][51]*w[0][47]*(1.0);
    const double G0_51_48 = det*w[0][51]*w[0][48]*(1.0);
    const double G0_51_49 = det*w[0][51]*w[0][49]*(1.0);
    const double G0_51_50 = det*w[0][51]*w[0][50]*(1.0);
    const double G0_51_51 = det*w[0][51]*w[0][51]*(1.0);
    const double G0_51_52 = det*w[0][51]*w[0][52]*(1.0);
    const double G0_51_53 = det*w[0][51]*w[0][53]*(1.0);
    const double G0_51_54 = det*w[0][51]*w[0][54]*(1.0);
    const double G0_51_55 = det*w[0][51]*w[0][55]*(1.0);
    const double G0_52_28 = det*w[0][52]*w[0][28]*(1.0);
    const double G0_52_29 = det*w[0][52]*w[0][29]*(1.0);
    const double G0_52_30 = det*w[0][52]*w[0][30]*(1.0);
    const double G0_52_31 = det*w[0][52]*w[0][31]*(1.0);
    const double G0_52_32 = det*w[0][52]*w[0][32]*(1.0);
    const double G0_52_33 = det*w[0][52]*w[0][33]*(1.0);
    const double G0_52_34 = det*w[0][52]*w[0][34]*(1.0);
    const double G0_52_35 = det*w[0][52]*w[0][35]*(1.0);
    const double G0_52_36 = det*w[0][52]*w[0][36]*(1.0);
    const double G0_52_37 = det*w[0][52]*w[0][37]*(1.0);
    const double G0_52_38 = det*w[0][52]*w[0][38]*(1.0);
    const double G0_52_39 = det*w[0][52]*w[0][39]*(1.0);
    const double G0_52_40 = det*w[0][52]*w[0][40]*(1.0);
    const double G0_52_41 = det*w[0][52]*w[0][41]*(1.0);
    const double G0_52_42 = det*w[0][52]*w[0][42]*(1.0);
    const double G0_52_43 = det*w[0][52]*w[0][43]*(1.0);
    const double G0_52_44 = det*w[0][52]*w[0][44]*(1.0);
    const double G0_52_45 = det*w[0][52]*w[0][45]*(1.0);
    const double G0_52_46 = det*w[0][52]*w[0][46]*(1.0);
    const double G0_52_47 = det*w[0][52]*w[0][47]*(1.0);
    const double G0_52_48 = det*w[0][52]*w[0][48]*(1.0);
    const double G0_52_49 = det*w[0][52]*w[0][49]*(1.0);
    const double G0_52_50 = det*w[0][52]*w[0][50]*(1.0);
    const double G0_52_51 = det*w[0][52]*w[0][51]*(1.0);
    const double G0_52_52 = det*w[0][52]*w[0][52]*(1.0);
    const double G0_52_53 = det*w[0][52]*w[0][53]*(1.0);
    const double G0_52_54 = det*w[0][52]*w[0][54]*(1.0);
    const double G0_52_55 = det*w[0][52]*w[0][55]*(1.0);
    const double G0_53_28 = det*w[0][53]*w[0][28]*(1.0);
    const double G0_53_29 = det*w[0][53]*w[0][29]*(1.0);
    const double G0_53_30 = det*w[0][53]*w[0][30]*(1.0);
    const double G0_53_31 = det*w[0][53]*w[0][31]*(1.0);
    const double G0_53_32 = det*w[0][53]*w[0][32]*(1.0);
    const double G0_53_33 = det*w[0][53]*w[0][33]*(1.0);
    const double G0_53_34 = det*w[0][53]*w[0][34]*(1.0);
    const double G0_53_35 = det*w[0][53]*w[0][35]*(1.0);
    const double G0_53_36 = det*w[0][53]*w[0][36]*(1.0);
    const double G0_53_37 = det*w[0][53]*w[0][37]*(1.0);
    const double G0_53_38 = det*w[0][53]*w[0][38]*(1.0);
    const double G0_53_39 = det*w[0][53]*w[0][39]*(1.0);
    const double G0_53_40 = det*w[0][53]*w[0][40]*(1.0);
    const double G0_53_41 = det*w[0][53]*w[0][41]*(1.0);
    const double G0_53_42 = det*w[0][53]*w[0][42]*(1.0);
    const double G0_53_43 = det*w[0][53]*w[0][43]*(1.0);
    const double G0_53_44 = det*w[0][53]*w[0][44]*(1.0);
    const double G0_53_45 = det*w[0][53]*w[0][45]*(1.0);
    const double G0_53_46 = det*w[0][53]*w[0][46]*(1.0);
    const double G0_53_47 = det*w[0][53]*w[0][47]*(1.0);
    const double G0_53_48 = det*w[0][53]*w[0][48]*(1.0);
    const double G0_53_49 = det*w[0][53]*w[0][49]*(1.0);
    const double G0_53_50 = det*w[0][53]*w[0][50]*(1.0);
    const double G0_53_51 = det*w[0][53]*w[0][51]*(1.0);
    const double G0_53_52 = det*w[0][53]*w[0][52]*(1.0);
    const double G0_53_53 = det*w[0][53]*w[0][53]*(1.0);
    const double G0_53_54 = det*w[0][53]*w[0][54]*(1.0);
    const double G0_53_55 = det*w[0][53]*w[0][55]*(1.0);
    const double G0_54_28 = det*w[0][54]*w[0][28]*(1.0);
    const double G0_54_29 = det*w[0][54]*w[0][29]*(1.0);
    const double G0_54_30 = det*w[0][54]*w[0][30]*(1.0);
    const double G0_54_31 = det*w[0][54]*w[0][31]*(1.0);
    const double G0_54_32 = det*w[0][54]*w[0][32]*(1.0);
    const double G0_54_33 = det*w[0][54]*w[0][33]*(1.0);
    const double G0_54_34 = det*w[0][54]*w[0][34]*(1.0);
    const double G0_54_35 = det*w[0][54]*w[0][35]*(1.0);
    const double G0_54_36 = det*w[0][54]*w[0][36]*(1.0);
    const double G0_54_37 = det*w[0][54]*w[0][37]*(1.0);
    const double G0_54_38 = det*w[0][54]*w[0][38]*(1.0);
    const double G0_54_39 = det*w[0][54]*w[0][39]*(1.0);
    const double G0_54_40 = det*w[0][54]*w[0][40]*(1.0);
    const double G0_54_41 = det*w[0][54]*w[0][41]*(1.0);
    const double G0_54_42 = det*w[0][54]*w[0][42]*(1.0);
    const double G0_54_43 = det*w[0][54]*w[0][43]*(1.0);
    const double G0_54_44 = det*w[0][54]*w[0][44]*(1.0);
    const double G0_54_45 = det*w[0][54]*w[0][45]*(1.0);
    const double G0_54_46 = det*w[0][54]*w[0][46]*(1.0);
    const double G0_54_47 = det*w[0][54]*w[0][47]*(1.0);
    const double G0_54_48 = det*w[0][54]*w[0][48]*(1.0);
    const double G0_54_49 = det*w[0][54]*w[0][49]*(1.0);
    const double G0_54_50 = det*w[0][54]*w[0][50]*(1.0);
    const double G0_54_51 = det*w[0][54]*w[0][51]*(1.0);
    const double G0_54_52 = det*w[0][54]*w[0][52]*(1.0);
    const double G0_54_53 = det*w[0][54]*w[0][53]*(1.0);
    const double G0_54_54 = det*w[0][54]*w[0][54]*(1.0);
    const double G0_54_55 = det*w[0][54]*w[0][55]*(1.0);
    const double G0_55_28 = det*w[0][55]*w[0][28]*(1.0);
    const double G0_55_29 = det*w[0][55]*w[0][29]*(1.0);
    const double G0_55_30 = det*w[0][55]*w[0][30]*(1.0);
    const double G0_55_31 = det*w[0][55]*w[0][31]*(1.0);
    const double G0_55_32 = det*w[0][55]*w[0][32]*(1.0);
    const double G0_55_33 = det*w[0][55]*w[0][33]*(1.0);
    const double G0_55_34 = det*w[0][55]*w[0][34]*(1.0);
    const double G0_55_35 = det*w[0][55]*w[0][35]*(1.0);
    const double G0_55_36 = det*w[0][55]*w[0][36]*(1.0);
    const double G0_55_37 = det*w[0][55]*w[0][37]*(1.0);
    const double G0_55_38 = det*w[0][55]*w[0][38]*(1.0);
    const double G0_55_39 = det*w[0][55]*w[0][39]*(1.0);
    const double G0_55_40 = det*w[0][55]*w[0][40]*(1.0);
    const double G0_55_41 = det*w[0][55]*w[0][41]*(1.0);
    const double G0_55_42 = det*w[0][55]*w[0][42]*(1.0);
    const double G0_55_43 = det*w[0][55]*w[0][43]*(1.0);
    const double G0_55_44 = det*w[0][55]*w[0][44]*(1.0);
    const double G0_55_45 = det*w[0][55]*w[0][45]*(1.0);
    const double G0_55_46 = det*w[0][55]*w[0][46]*(1.0);
    const double G0_55_47 = det*w[0][55]*w[0][47]*(1.0);
    const double G0_55_48 = det*w[0][55]*w[0][48]*(1.0);
    const double G0_55_49 = det*w[0][55]*w[0][49]*(1.0);
    const double G0_55_50 = det*w[0][55]*w[0][50]*(1.0);
    const double G0_55_51 = det*w[0][55]*w[0][51]*(1.0);
    const double G0_55_52 = det*w[0][55]*w[0][52]*(1.0);
    const double G0_55_53 = det*w[0][55]*w[0][53]*(1.0);
    const double G0_55_54 = det*w[0][55]*w[0][54]*(1.0);
    const double G0_55_55 = det*w[0][55]*w[0][55]*(1.0);
    
    // Compute element tensor
    A[0] = 0.000852231102231247*G0_0_0 - 5.62760652046458e-05*G0_0_1 - 5.62760652046465e-05*G0_0_2 - 0.000250713572142185*G0_0_3 + 7.31500642215044e-05*G0_0_4 - 0.000384551955980592*G0_0_5 + 7.3150064221504e-05*G0_0_6 - 0.000250713572142186*G0_0_7 + 0.000947052947053107*G0_0_8 - 0.00101336163836181*G0_0_9 + 0.000789210789210923*G0_0_10 - 0.000350399600399659*G0_0_11 + 2.27272727272771e-05*G0_0_12 + 0.000947052947053108*G0_0_13 - 0.00101336163836181*G0_0_14 + 0.000789210789210923*G0_0_15 - 0.000350399600399658*G0_0_16 + 2.27272727272782e-05*G0_0_17 + 0.000681818181818304*G0_0_18 - 0.000789210789210919*G0_0_19 + 0.000719780219780348*G0_0_20 - 0.00054170829170838*G0_0_21 - 0.000789210789210922*G0_0_22 + 0.000606143856143955*G0_0_23 - 0.000428071928072001*G0_0_24 + 0.00071978021978035*G0_0_25 - 0.000428071928071995*G0_0_26 - 0.000541708291708385*G0_0_27 - 5.62760652046458e-05*G0_1_0 + 0.000852231102231248*G0_1_1 - 5.62760652046458e-05*G0_1_2 + 0.000947052947053108*G0_1_3 - 0.00101336163836182*G0_1_4 + 0.000789210789210928*G0_1_5 - 0.000350399600399664*G0_1_6 + 2.27272727272781e-05*G0_1_7 - 0.000250713572142186*G0_1_8 + 7.31500642215037e-05*G0_1_9 - 0.00038455195598059*G0_1_10 + 7.3150064221504e-05*G0_1_11 - 0.000250713572142185*G0_1_12 + 2.2727272727279e-05*G0_1_13 - 0.000350399600399664*G0_1_14 + 0.000789210789210929*G0_1_15 - 0.00101336163836182*G0_1_16 + 0.000947052947053114*G0_1_17 - 0.000541708291708381*G0_1_18 + 0.000719780219780339*G0_1_19 - 0.000789210789210925*G0_1_20 + 0.000681818181818298*G0_1_21 - 0.000428071928072002*G0_1_22 + 0.000606143856143957*G0_1_23 - 0.000789210789210925*G0_1_24 - 0.000428071928071997*G0_1_25 + 0.000719780219780339*G0_1_26 - 0.000541708291708382*G0_1_27 - 5.62760652046465e-05*G0_2_0 - 5.62760652046458e-05*G0_2_1 + 0.000852231102231245*G0_2_2 + 2.27272727272775e-05*G0_2_3 - 0.000350399600399659*G0_2_4 + 0.000789210789210923*G0_2_5 - 0.00101336163836181*G0_2_6 + 0.000947052947053105*G0_2_7 + 2.27272727272751e-05*G0_2_8 - 0.000350399600399657*G0_2_9 + 0.000789210789210917*G0_2_10 - 0.00101336163836181*G0_2_11 + 0.000947052947053103*G0_2_12 - 0.000250713572142186*G0_2_13 + 7.31500642215034e-05*G0_2_14 - 0.000384551955980591*G0_2_15 + 7.31500642215049e-05*G0_2_16 - 0.000250713572142185*G0_2_17 - 0.000541708291708382*G0_2_18 - 0.000428071928071998*G0_2_19 - 0.000428071928071999*G0_2_20 - 0.000541708291708377*G0_2_21 + 0.000719780219780338*G0_2_22 + 0.000606143856143957*G0_2_23 + 0.000719780219780338*G0_2_24 - 0.000789210789210921*G0_2_25 - 0.000789210789210917*G0_2_26 + 0.000681818181818287*G0_2_27 - 0.000250713572142185*G0_3_0 + 0.000947052947053108*G0_3_1 + 2.27272727272775e-05*G0_3_2 + 0.0105734265734284*G0_3_3 - 0.00865384615384761*G0_3_4 + 0.00876523476523623*G0_3_5 - 0.00587787212787311*G0_3_6 + 0.00259069501926689*G0_3_7 + 0.000533038390181333*G0_3_8 - 0.0001961966604824*G0_3_9 + 0.0014317111459971*G0_3_10 - 0.000252069359212248*G0_3_11 + 0.001590124161553*G0_3_12 + 0.001590124161553*G0_3_13 - 0.00436738261738337*G0_3_14 + 0.00681918081918199*G0_3_15 - 0.00660839160839275*G0_3_16 + 0.00528671328671419*G0_3_17 - 0.000586984444127391*G0_3_18 + 0.00239160839160879*G0_3_19 - 0.00487312687312771*G0_3_20 + 0.00912587412587567*G0_3_21 + 0.00120993292421885*G0_3_22 - 0.000930569430569584*G0_3_23 - 0.00124075924075946*G0_3_24 + 0.00125360353931804*G0_3_25 - 0.00133066933066956*G0_3_26 + 0.00246610532324859*G0_3_27 + 7.31500642215044e-05*G0_4_0 - 0.00101336163836182*G0_4_1 - 0.000350399600399659*G0_4_2 - 0.00865384615384761*G0_4_3 + 0.0194767732267765*G0_4_4 - 0.016223776223779*G0_4_5 + 0.0117834397745132*G0_4_6 - 0.00587787212787312*G0_4_7 - 0.000196196660482402*G0_4_8 + 0.00113270657913533*G0_4_9 - 0.00326887398316025*G0_4_10 + 0.00149435386042554*G0_4_11 - 0.00436738261738335*G0_4_12 - 0.000252069359212257*G0_4_13 + 0.00149435386042554*G0_4_14 - 0.00373626373626438*G0_4_15 + 0.0046697052947061*G0_4_16 - 0.00660839160839273*G0_4_17 - 0.00138557870700752*G0_4_18 + 0.00336199514771001*G0_4_19 - 0.00373126873126936*G0_4_20 - 0.00422577422577493*G0_4_21 - 0.000478450121307367*G0_4_22 - 0.001081329384901*G0_4_23 + 0.006833166833168*G0_4_24 - 0.00162159269302151*G0_4_25 + 0.0029573997431145*G0_4_26 - 0.00627604538318929*G0_4_27 - 0.000384551955980592*G0_5_0 + 0.000789210789210928*G0_5_1 + 0.000789210789210923*G0_5_2 + 0.00876523476523623*G0_5_3 - 0.016223776223779*G0_5_4 + 0.0251469165754922*G0_5_5 - 0.016223776223779*G0_5_6 + 0.00876523476523624*G0_5_7 + 0.00143171114599709*G0_5_8 - 0.00326887398316024*G0_5_9 + 0.00500959358102298*G0_5_10 - 0.00373626373626436*G0_5_11 + 0.00681918081918196*G0_5_12 + 0.00143171114599709*G0_5_13 - 0.00326887398316026*G0_5_14 + 0.00500959358102302*G0_5_15 - 0.00373626373626438*G0_5_16 + 0.00681918081918197*G0_5_17 - 0.00250891965177724*G0_5_18 + 0.0036078207506785*G0_5_19 - 0.000476666190952017*G0_5_20 + 0.00812187812187948*G0_5_21 + 0.00360782075067853*G0_5_22 - 0.00615027829313647*G0_5_23 + 0.000156985871271599*G0_5_24 - 0.000476666190952047*G0_5_25 + 0.000156985871271642*G0_5_26 + 0.00812187812187947*G0_5_27 + 7.3150064221504e-05*G0_6_0 - 0.000350399600399664*G0_6_1 - 0.00101336163836181*G0_6_2 - 0.00587787212787311*G0_6_3 + 0.0117834397745132*G0_6_4 - 0.016223776223779*G0_6_5 + 0.0194767732267765*G0_6_6 - 0.00865384615384762*G0_6_7 - 0.000252069359212249*G0_6_8 + 0.00149435386042554*G0_6_9 - 0.00373626373626436*G0_6_10 + 0.00466970529470608*G0_6_11 - 0.00660839160839272*G0_6_12 - 0.000196196660482408*G0_6_13 + 0.00113270657913535*G0_6_14 - 0.00326887398316026*G0_6_15 + 0.00149435386042555*G0_6_16 - 0.00436738261738336*G0_6_17 - 0.00138557870700752*G0_6_18 - 0.000478450121307342*G0_6_19 - 0.00162159269302154*G0_6_20 - 0.00627604538318928*G0_6_21 + 0.00336199514771*G0_6_22 - 0.001081329384901*G0_6_23 + 0.00295739974311455*G0_6_24 - 0.00373126873126933*G0_6_25 + 0.00683316683316796*G0_6_26 - 0.00422577422577493*G0_6_27 - 0.000250713572142186*G0_7_0 + 2.27272727272781e-05*G0_7_1 + 0.000947052947053105*G0_7_2 + 0.00259069501926688*G0_7_3 - 0.00587787212787312*G0_7_4 + 0.00876523476523624*G0_7_5 - 0.00865384615384762*G0_7_6 + 0.0105734265734284*G0_7_7 + 0.001590124161553*G0_7_8 - 0.00436738261738335*G0_7_9 + 0.00681918081918197*G0_7_10 - 0.00660839160839272*G0_7_11 + 0.00528671328671418*G0_7_12 + 0.000533038390181335*G0_7_13 - 0.00019619666048242*G0_7_14 + 0.00143171114599711*G0_7_15 - 0.000252069359212267*G0_7_16 + 0.001590124161553*G0_7_17 - 0.0005869844441274*G0_7_18 + 0.00120993292421883*G0_7_19 + 0.00125360353931803*G0_7_20 + 0.00246610532324859*G0_7_21 + 0.00239160839160881*G0_7_22 - 0.000930569430569576*G0_7_23 - 0.00133066933066955*G0_7_24 - 0.00487312687312771*G0_7_25 - 0.00124075924075945*G0_7_26 + 0.00912587412587566*G0_7_27 + 0.000947052947053107*G0_8_0 - 0.000250713572142186*G0_8_1 + 2.27272727272751e-05*G0_8_2 + 0.000533038390181333*G0_8_3 - 0.000196196660482402*G0_8_4 + 0.00143171114599709*G0_8_5 - 0.000252069359212249*G0_8_6 + 0.001590124161553*G0_8_7 + 0.0105734265734284*G0_8_8 - 0.00865384615384761*G0_8_9 + 0.00876523476523623*G0_8_10 - 0.00587787212787311*G0_8_11 + 0.00259069501926689*G0_8_12 + 0.00528671328671417*G0_8_13 - 0.00660839160839272*G0_8_14 + 0.00681918081918196*G0_8_15 - 0.00436738261738335*G0_8_16 + 0.001590124161553*G0_8_17 + 0.00912587412587563*G0_8_18 - 0.00487312687312768*G0_8_19 + 0.00239160839160879*G0_8_20 - 0.0005869844441274*G0_8_21 - 0.00124075924075941*G0_8_22 - 0.000930569430569591*G0_8_23 + 0.00120993292421885*G0_8_24 - 0.00133066933066958*G0_8_25 + 0.00125360353931804*G0_8_26 + 0.00246610532324861*G0_8_27 - 0.00101336163836181*G0_9_0 + 7.31500642215037e-05*G0_9_1 - 0.000350399600399657*G0_9_2 - 0.0001961966604824*G0_9_3 + 0.00113270657913533*G0_9_4 - 0.00326887398316024*G0_9_5 + 0.00149435386042554*G0_9_6 - 0.00436738261738335*G0_9_7 - 0.00865384615384761*G0_9_8 + 0.0194767732267765*G0_9_9 - 0.016223776223779*G0_9_10 + 0.0117834397745132*G0_9_11 - 0.00587787212787312*G0_9_12 - 0.00660839160839272*G0_9_13 + 0.00466970529470608*G0_9_14 - 0.00373626373626437*G0_9_15 + 0.00149435386042554*G0_9_16 - 0.000252069359212258*G0_9_17 - 0.00422577422577493*G0_9_18 - 0.00373126873126935*G0_9_19 + 0.00336199514770999*G0_9_20 - 0.00138557870700751*G0_9_21 + 0.00683316683316794*G0_9_22 - 0.00108132938490101*G0_9_23 - 0.000478450121307361*G0_9_24 + 0.00295739974311456*G0_9_25 - 0.00162159269302153*G0_9_26 - 0.00627604538318932*G0_9_27 + 0.000789210789210923*G0_10_0 - 0.00038455195598059*G0_10_1 + 0.000789210789210917*G0_10_2 + 0.0014317111459971*G0_10_3 - 0.00326887398316025*G0_10_4 + 0.00500959358102298*G0_10_5 - 0.00373626373626436*G0_10_6 + 0.00681918081918197*G0_10_7 + 0.00876523476523623*G0_10_8 - 0.016223776223779*G0_10_9 + 0.0251469165754922*G0_10_10 - 0.016223776223779*G0_10_11 + 0.00876523476523625*G0_10_12 + 0.00681918081918196*G0_10_13 - 0.00373626373626436*G0_10_14 + 0.00500959358102299*G0_10_15 - 0.00326887398316024*G0_10_16 + 0.0014317111459971*G0_10_17 + 0.00812187812187946*G0_10_18 - 0.000476666190951971*G0_10_19 + 0.0036078207506785*G0_10_20 - 0.00250891965177721*G0_10_21 + 0.000156985871271633*G0_10_22 - 0.00615027829313643*G0_10_23 + 0.0036078207506785*G0_10_24 + 0.000156985871271551*G0_10_25 - 0.000476666190951975*G0_10_26 + 0.00812187812187952*G0_10_27 - 0.000350399600399659*G0_11_0 + 7.3150064221504e-05*G0_11_1 - 0.00101336163836181*G0_11_2 - 0.000252069359212248*G0_11_3 + 0.00149435386042554*G0_11_4 - 0.00373626373626436*G0_11_5 + 0.00466970529470608*G0_11_6 - 0.00660839160839272*G0_11_7 - 0.00587787212787311*G0_11_8 + 0.0117834397745132*G0_11_9 - 0.016223776223779*G0_11_10 + 0.0194767732267765*G0_11_11 - 0.00865384615384762*G0_11_12 - 0.00436738261738334*G0_11_13 + 0.00149435386042554*G0_11_14 - 0.00326887398316023*G0_11_15 + 0.00113270657913533*G0_11_16 - 0.000196196660482404*G0_11_17 - 0.00627604538318926*G0_11_18 - 0.00162159269302155*G0_11_19 - 0.000478450121307327*G0_11_20 - 0.00138557870700751*G0_11_21 + 0.00295739974311451*G0_11_22 - 0.00108132938490102*G0_11_23 + 0.00336199514770999*G0_11_24 + 0.00683316683316804*G0_11_25 - 0.00373126873126935*G0_11_26 - 0.00422577422577497*G0_11_27 + 2.27272727272771e-05*G0_12_0 - 0.000250713572142185*G0_12_1 + 0.000947052947053103*G0_12_2 + 0.001590124161553*G0_12_3 - 0.00436738261738335*G0_12_4 + 0.00681918081918196*G0_12_5 - 0.00660839160839272*G0_12_6 + 0.00528671328671418*G0_12_7 + 0.00259069501926689*G0_12_8 - 0.00587787212787312*G0_12_9 + 0.00876523476523625*G0_12_10 - 0.00865384615384762*G0_12_11 + 0.0105734265734284*G0_12_12 + 0.001590124161553*G0_12_13 - 0.00025206935921227*G0_12_14 + 0.00143171114599711*G0_12_15 - 0.000196196660482411*G0_12_16 + 0.000533038390181337*G0_12_17 + 0.0024661053232486*G0_12_18 + 0.00125360353931803*G0_12_19 + 0.00120993292421884*G0_12_20 - 0.000586984444127403*G0_12_21 - 0.00133066933066954*G0_12_22 - 0.000930569430569577*G0_12_23 + 0.00239160839160881*G0_12_24 - 0.00124075924075947*G0_12_25 - 0.00487312687312769*G0_12_26 + 0.00912587412587567*G0_12_27 + 0.000947052947053108*G0_13_0 + 2.2727272727279e-05*G0_13_1 - 0.000250713572142186*G0_13_2 + 0.001590124161553*G0_13_3 - 0.000252069359212257*G0_13_4 + 0.00143171114599709*G0_13_5 - 0.000196196660482408*G0_13_6 + 0.000533038390181335*G0_13_7 + 0.00528671328671417*G0_13_8 - 0.00660839160839272*G0_13_9 + 0.00681918081918196*G0_13_10 - 0.00436738261738335*G0_13_11 + 0.001590124161553*G0_13_12 + 0.0105734265734283*G0_13_13 - 0.0086538461538476*G0_13_14 + 0.00876523476523624*G0_13_15 - 0.00587787212787312*G0_13_16 + 0.00259069501926689*G0_13_17 + 0.00912587412587564*G0_13_18 - 0.00124075924075943*G0_13_19 - 0.00133066933066959*G0_13_20 + 0.00246610532324861*G0_13_21 - 0.00487312687312769*G0_13_22 - 0.000930569430569578*G0_13_23 + 0.00125360353931804*G0_13_24 + 0.00239160839160878*G0_13_25 + 0.00120993292421884*G0_13_26 - 0.000586984444127402*G0_13_27 - 0.00101336163836181*G0_14_0 - 0.000350399600399664*G0_14_1 + 7.31500642215035e-05*G0_14_2 - 0.00436738261738337*G0_14_3 + 0.00149435386042554*G0_14_4 - 0.00326887398316026*G0_14_5 + 0.00113270657913535*G0_14_6 - 0.00019619666048242*G0_14_7 - 0.00660839160839272*G0_14_8 + 0.00466970529470608*G0_14_9 - 0.00373626373626436*G0_14_10 + 0.00149435386042554*G0_14_11 - 0.00025206935921227*G0_14_12 - 0.0086538461538476*G0_14_13 + 0.0194767732267765*G0_14_14 - 0.016223776223779*G0_14_15 + 0.0117834397745132*G0_14_16 - 0.00587787212787313*G0_14_17 - 0.00422577422577489*G0_14_18 + 0.00683316683316791*G0_14_19 + 0.00295739974311459*G0_14_20 - 0.00627604538318936*G0_14_21 - 0.00373126873126939*G0_14_22 - 0.00108132938490097*G0_14_23 - 0.00162159269302155*G0_14_24 + 0.00336199514771002*G0_14_25 - 0.000478450121307362*G0_14_26 - 0.00138557870700754*G0_14_27 + 0.000789210789210923*G0_15_0 + 0.000789210789210929*G0_15_1 - 0.000384551955980591*G0_15_2 + 0.00681918081918199*G0_15_3 - 0.00373626373626438*G0_15_4 + 0.00500959358102302*G0_15_5 - 0.00326887398316026*G0_15_6 + 0.00143171114599711*G0_15_7 + 0.00681918081918196*G0_15_8 - 0.00373626373626437*G0_15_9 + 0.00500959358102299*G0_15_10 - 0.00326887398316023*G0_15_11 + 0.00143171114599711*G0_15_12 + 0.00876523476523624*G0_15_13 - 0.016223776223779*G0_15_14 + 0.0251469165754923*G0_15_15 - 0.016223776223779*G0_15_16 + 0.00876523476523627*G0_15_17 + 0.00812187812187943*G0_15_18 + 0.000156985871271685*G0_15_19 + 0.00015698587127154*G0_15_20 + 0.00812187812187958*G0_15_21 - 0.000476666190951936*G0_15_22 - 0.00615027829313647*G0_15_23 - 0.000476666190951984*G0_15_24 + 0.00360782075067847*G0_15_25 + 0.00360782075067853*G0_15_26 - 0.0025089196517772*G0_15_27 - 0.000350399600399658*G0_16_0 - 0.00101336163836182*G0_16_1 + 7.31500642215049e-05*G0_16_2 - 0.00660839160839275*G0_16_3 + 0.0046697052947061*G0_16_4 - 0.00373626373626438*G0_16_5 + 0.00149435386042555*G0_16_6 - 0.000252069359212267*G0_16_7 - 0.00436738261738335*G0_16_8 + 0.00149435386042554*G0_16_9 - 0.00326887398316024*G0_16_10 + 0.00113270657913533*G0_16_11 - 0.000196196660482411*G0_16_12 - 0.00587787212787312*G0_16_13 + 0.0117834397745132*G0_16_14 - 0.016223776223779*G0_16_15 + 0.0194767732267765*G0_16_16 - 0.00865384615384764*G0_16_17 - 0.00627604538318926*G0_16_18 + 0.00295739974311449*G0_16_19 + 0.00683316683316806*G0_16_20 - 0.00422577422577501*G0_16_21 - 0.00162159269302156*G0_16_22 - 0.00108132938490101*G0_16_23 - 0.00373126873126936*G0_16_24 - 0.00047845012130732*G0_16_25 + 0.00336199514770998*G0_16_26 - 0.00138557870700752*G0_16_27 + 2.27272727272782e-05*G0_17_0 + 0.000947052947053114*G0_17_1 - 0.000250713572142185*G0_17_2 + 0.00528671328671419*G0_17_3 - 0.00660839160839273*G0_17_4 + 0.00681918081918197*G0_17_5 - 0.00436738261738336*G0_17_6 + 0.001590124161553*G0_17_7 + 0.001590124161553*G0_17_8 - 0.000252069359212258*G0_17_9 + 0.0014317111459971*G0_17_10 - 0.000196196660482403*G0_17_11 + 0.000533038390181337*G0_17_12 + 0.00259069501926689*G0_17_13 - 0.00587787212787313*G0_17_14 + 0.00876523476523627*G0_17_15 - 0.00865384615384764*G0_17_16 + 0.0105734265734284*G0_17_17 + 0.00246610532324859*G0_17_18 - 0.00133066933066954*G0_17_19 - 0.00124075924075948*G0_17_20 + 0.00912587412587568*G0_17_21 + 0.00125360353931804*G0_17_22 - 0.000930569430569585*G0_17_23 - 0.00487312687312771*G0_17_24 + 0.00120993292421883*G0_17_25 + 0.00239160839160881*G0_17_26 - 0.000586984444127409*G0_17_27 + 0.000681818181818304*G0_18_0 - 0.000541708291708381*G0_18_1 - 0.000541708291708382*G0_18_2 - 0.000586984444127391*G0_18_3 - 0.00138557870700752*G0_18_4 - 0.00250891965177724*G0_18_5 - 0.00138557870700752*G0_18_6 - 0.0005869844441274*G0_18_7 + 0.00912587412587563*G0_18_8 - 0.00422577422577493*G0_18_9 + 0.00812187812187946*G0_18_10 - 0.00627604538318926*G0_18_11 + 0.0024661053232486*G0_18_12 + 0.00912587412587564*G0_18_13 - 0.00422577422577489*G0_18_14 + 0.00812187812187943*G0_18_15 - 0.00627604538318925*G0_18_16 + 0.00246610532324859*G0_18_17 + 0.0574525474525571*G0_18_18 - 0.0181618381618412*G0_18_19 + 0.0162480376766118*G0_18_20 - 0.00807264164407156*G0_18_21 - 0.0181618381618412*G0_18_22 + 0.00354502640216989*G0_18_23 - 0.00486798915370427*G0_18_24 + 0.0162480376766118*G0_18_25 - 0.00486798915370426*G0_18_26 - 0.00807264164407157*G0_18_27 - 0.000789210789210919*G0_19_0 + 0.000719780219780339*G0_19_1 - 0.000428071928071998*G0_19_2 + 0.00239160839160879*G0_19_3 + 0.00336199514771001*G0_19_4 + 0.0036078207506785*G0_19_5 - 0.000478450121307342*G0_19_6 + 0.00120993292421883*G0_19_7 - 0.00487312687312768*G0_19_8 - 0.00373126873126935*G0_19_9 - 0.000476666190951971*G0_19_10 - 0.00162159269302155*G0_19_11 + 0.00125360353931803*G0_19_12 - 0.00124075924075943*G0_19_13 + 0.00683316683316791*G0_19_14 + 0.000156985871271685*G0_19_15 + 0.00295739974311448*G0_19_16 - 0.00133066933066954*G0_19_17 - 0.0181618381618412*G0_19_18 + 0.0682802911374454*G0_19_19 - 0.0236591979449162*G0_19_20 + 0.0162480376766119*G0_19_21 - 0.0100185528756974*G0_19_22 - 0.0146039674611127*G0_19_23 + 0.00500927643784871*G0_19_24 + 0.00500927643784868*G0_19_25 + 0.0120993292421884*G0_19_26 - 0.00486798915370425*G0_19_27 + 0.000719780219780348*G0_20_0 - 0.000789210789210925*G0_20_1 - 0.000428071928071999*G0_20_2 - 0.00487312687312771*G0_20_3 - 0.00373126873126936*G0_20_4 - 0.000476666190952017*G0_20_5 - 0.00162159269302153*G0_20_6 + 0.00125360353931803*G0_20_7 + 0.00239160839160879*G0_20_8 + 0.00336199514770999*G0_20_9 + 0.0036078207506785*G0_20_10 - 0.000478450121307327*G0_20_11 + 0.00120993292421884*G0_20_12 - 0.00133066933066959*G0_20_13 + 0.00295739974311459*G0_20_14 + 0.00015698587127154*G0_20_15 + 0.00683316683316806*G0_20_16 - 0.00124075924075948*G0_20_17 + 0.0162480376766118*G0_20_18 - 0.0236591979449162*G0_20_19 + 0.0682802911374455*G0_20_20 - 0.0181618381618413*G0_20_21 + 0.0050092764378487*G0_20_22 - 0.0146039674611128*G0_20_23 - 0.0100185528756975*G0_20_24 + 0.0120993292421884*G0_20_25 + 0.00500927643784872*G0_20_26 - 0.00486798915370427*G0_20_27 - 0.00054170829170838*G0_21_0 + 0.000681818181818298*G0_21_1 - 0.000541708291708377*G0_21_2 + 0.00912587412587567*G0_21_3 - 0.00422577422577493*G0_21_4 + 0.00812187812187948*G0_21_5 - 0.00627604538318928*G0_21_6 + 0.00246610532324859*G0_21_7 - 0.0005869844441274*G0_21_8 - 0.00138557870700751*G0_21_9 - 0.00250891965177721*G0_21_10 - 0.00138557870700751*G0_21_11 - 0.000586984444127402*G0_21_12 + 0.00246610532324861*G0_21_13 - 0.00627604538318936*G0_21_14 + 0.00812187812187958*G0_21_15 - 0.00422577422577501*G0_21_16 + 0.00912587412587568*G0_21_17 - 0.00807264164407156*G0_21_18 + 0.0162480376766119*G0_21_19 - 0.0181618381618413*G0_21_20 + 0.0574525474525572*G0_21_21 - 0.00486798915370424*G0_21_22 + 0.00354502640216982*G0_21_23 - 0.0181618381618412*G0_21_24 - 0.00486798915370424*G0_21_25 + 0.0162480376766119*G0_21_26 - 0.00807264164407158*G0_21_27 - 0.000789210789210922*G0_22_0 - 0.000428071928072002*G0_22_1 + 0.000719780219780338*G0_22_2 + 0.00120993292421885*G0_22_3 - 0.000478450121307367*G0_22_4 + 0.00360782075067853*G0_22_5 + 0.00336199514771*G0_22_6 + 0.00239160839160881*G0_22_7 - 0.00124075924075941*G0_22_8 + 0.00683316683316794*G0_22_9 + 0.000156985871271635*G0_22_10 + 0.00295739974311451*G0_22_11 - 0.00133066933066954*G0_22_12 - 0.00487312687312769*G0_22_13 - 0.00373126873126939*G0_22_14 - 0.000476666190951936*G0_22_15 - 0.00162159269302156*G0_22_16 + 0.00125360353931804*G0_22_17 - 0.0181618381618412*G0_22_18 - 0.0100185528756974*G0_22_19 + 0.0050092764378487*G0_22_20 - 0.00486798915370424*G0_22_21 + 0.0682802911374454*G0_22_22 - 0.0146039674611127*G0_22_23 + 0.0120993292421884*G0_22_24 - 0.0236591979449162*G0_22_25 + 0.0050092764378487*G0_22_26 + 0.0162480376766118*G0_22_27 + 0.000606143856143955*G0_23_0 + 0.000606143856143957*G0_23_1 + 0.000606143856143957*G0_23_2 - 0.000930569430569584*G0_23_3 - 0.001081329384901*G0_23_4 - 0.00615027829313647*G0_23_5 - 0.001081329384901*G0_23_6 - 0.000930569430569576*G0_23_7 - 0.00093056943056959*G0_23_8 - 0.00108132938490101*G0_23_9 - 0.00615027829313643*G0_23_10 - 0.00108132938490102*G0_23_11 - 0.000930569430569577*G0_23_12 - 0.000930569430569578*G0_23_13 - 0.00108132938490097*G0_23_14 - 0.00615027829313647*G0_23_15 - 0.00108132938490101*G0_23_16 - 0.000930569430569585*G0_23_17 + 0.00354502640216989*G0_23_18 - 0.0146039674611127*G0_23_19 - 0.0146039674611128*G0_23_20 + 0.00354502640216982*G0_23_21 - 0.0146039674611127*G0_23_22 + 0.0735496646211055*G0_23_23 - 0.0146039674611127*G0_23_24 - 0.0146039674611127*G0_23_25 - 0.0146039674611127*G0_23_26 + 0.00354502640216985*G0_23_27 - 0.000428071928072001*G0_24_0 - 0.000789210789210925*G0_24_1 + 0.000719780219780338*G0_24_2 - 0.00124075924075946*G0_24_3 + 0.006833166833168*G0_24_4 + 0.000156985871271598*G0_24_5 + 0.00295739974311455*G0_24_6 - 0.00133066933066955*G0_24_7 + 0.00120993292421885*G0_24_8 - 0.000478450121307361*G0_24_9 + 0.0036078207506785*G0_24_10 + 0.00336199514770999*G0_24_11 + 0.00239160839160881*G0_24_12 + 0.00125360353931804*G0_24_13 - 0.00162159269302155*G0_24_14 - 0.000476666190951984*G0_24_15 - 0.00373126873126936*G0_24_16 - 0.00487312687312771*G0_24_17 - 0.00486798915370427*G0_24_18 + 0.00500927643784871*G0_24_19 - 0.0100185528756975*G0_24_20 - 0.0181618381618412*G0_24_21 + 0.0120993292421884*G0_24_22 - 0.0146039674611127*G0_24_23 + 0.0682802911374455*G0_24_24 + 0.00500927643784867*G0_24_25 - 0.0236591979449162*G0_24_26 + 0.0162480376766118*G0_24_27 + 0.00071978021978035*G0_25_0 - 0.000428071928071997*G0_25_1 - 0.000789210789210921*G0_25_2 + 0.00125360353931804*G0_25_3 - 0.00162159269302151*G0_25_4 - 0.000476666190952046*G0_25_5 - 0.00373126873126933*G0_25_6 - 0.00487312687312771*G0_25_7 - 0.00133066933066958*G0_25_8 + 0.00295739974311456*G0_25_9 + 0.000156985871271552*G0_25_10 + 0.00683316683316804*G0_25_11 - 0.00124075924075947*G0_25_12 + 0.00239160839160878*G0_25_13 + 0.00336199514771002*G0_25_14 + 0.00360782075067847*G0_25_15 - 0.00047845012130732*G0_25_16 + 0.00120993292421883*G0_25_17 + 0.0162480376766118*G0_25_18 + 0.00500927643784868*G0_25_19 + 0.0120993292421884*G0_25_20 - 0.00486798915370424*G0_25_21 - 0.0236591979449162*G0_25_22 - 0.0146039674611127*G0_25_23 + 0.00500927643784867*G0_25_24 + 0.0682802911374454*G0_25_25 - 0.0100185528756974*G0_25_26 - 0.0181618381618413*G0_25_27 - 0.000428071928071995*G0_26_0 + 0.000719780219780339*G0_26_1 - 0.000789210789210917*G0_26_2 - 0.00133066933066956*G0_26_3 + 0.0029573997431145*G0_26_4 + 0.000156985871271641*G0_26_5 + 0.00683316683316796*G0_26_6 - 0.00124075924075945*G0_26_7 + 0.00125360353931804*G0_26_8 - 0.00162159269302153*G0_26_9 - 0.000476666190951975*G0_26_10 - 0.00373126873126935*G0_26_11 - 0.00487312687312769*G0_26_12 + 0.00120993292421884*G0_26_13 - 0.000478450121307362*G0_26_14 + 0.00360782075067853*G0_26_15 + 0.00336199514770998*G0_26_16 + 0.00239160839160881*G0_26_17 - 0.00486798915370426*G0_26_18 + 0.0120993292421884*G0_26_19 + 0.00500927643784872*G0_26_20 + 0.0162480376766119*G0_26_21 + 0.0050092764378487*G0_26_22 - 0.0146039674611127*G0_26_23 - 0.0236591979449162*G0_26_24 - 0.0100185528756974*G0_26_25 + 0.0682802911374455*G0_26_26 - 0.0181618381618412*G0_26_27 - 0.000541708291708385*G0_27_0 - 0.000541708291708382*G0_27_1 + 0.000681818181818287*G0_27_2 + 0.00246610532324859*G0_27_3 - 0.00627604538318929*G0_27_4 + 0.00812187812187947*G0_27_5 - 0.00422577422577493*G0_27_6 + 0.00912587412587566*G0_27_7 + 0.00246610532324861*G0_27_8 - 0.00627604538318932*G0_27_9 + 0.00812187812187952*G0_27_10 - 0.00422577422577497*G0_27_11 + 0.00912587412587567*G0_27_12 - 0.000586984444127402*G0_27_13 - 0.00138557870700754*G0_27_14 - 0.0025089196517772*G0_27_15 - 0.00138557870700752*G0_27_16 - 0.000586984444127409*G0_27_17 - 0.00807264164407157*G0_27_18 - 0.00486798915370425*G0_27_19 - 0.00486798915370427*G0_27_20 - 0.00807264164407158*G0_27_21 + 0.0162480376766118*G0_27_22 + 0.00354502640216985*G0_27_23 + 0.0162480376766118*G0_27_24 - 0.0181618381618413*G0_27_25 - 0.0181618381618412*G0_27_26 + 0.0574525474525571*G0_27_27 + 0.000852231102231247*G0_28_28 - 5.62760652046458e-05*G0_28_29 - 5.62760652046465e-05*G0_28_30 - 0.000250713572142185*G0_28_31 + 7.31500642215044e-05*G0_28_32 - 0.000384551955980592*G0_28_33 + 7.3150064221504e-05*G0_28_34 - 0.000250713572142186*G0_28_35 + 0.000947052947053107*G0_28_36 - 0.00101336163836181*G0_28_37 + 0.000789210789210923*G0_28_38 - 0.000350399600399659*G0_28_39 + 2.27272727272771e-05*G0_28_40 + 0.000947052947053108*G0_28_41 - 0.00101336163836181*G0_28_42 + 0.000789210789210923*G0_28_43 - 0.000350399600399658*G0_28_44 + 2.27272727272782e-05*G0_28_45 + 0.000681818181818304*G0_28_46 - 0.000789210789210919*G0_28_47 + 0.000719780219780348*G0_28_48 - 0.00054170829170838*G0_28_49 - 0.000789210789210922*G0_28_50 + 0.000606143856143955*G0_28_51 - 0.000428071928072001*G0_28_52 + 0.00071978021978035*G0_28_53 - 0.000428071928071995*G0_28_54 - 0.000541708291708385*G0_28_55 - 5.62760652046458e-05*G0_29_28 + 0.000852231102231248*G0_29_29 - 5.62760652046458e-05*G0_29_30 + 0.000947052947053108*G0_29_31 - 0.00101336163836182*G0_29_32 + 0.000789210789210928*G0_29_33 - 0.000350399600399664*G0_29_34 + 2.27272727272781e-05*G0_29_35 - 0.000250713572142186*G0_29_36 + 7.31500642215037e-05*G0_29_37 - 0.00038455195598059*G0_29_38 + 7.3150064221504e-05*G0_29_39 - 0.000250713572142185*G0_29_40 + 2.2727272727279e-05*G0_29_41 - 0.000350399600399664*G0_29_42 + 0.000789210789210929*G0_29_43 - 0.00101336163836182*G0_29_44 + 0.000947052947053114*G0_29_45 - 0.000541708291708381*G0_29_46 + 0.000719780219780339*G0_29_47 - 0.000789210789210925*G0_29_48 + 0.000681818181818298*G0_29_49 - 0.000428071928072002*G0_29_50 + 0.000606143856143957*G0_29_51 - 0.000789210789210925*G0_29_52 - 0.000428071928071997*G0_29_53 + 0.000719780219780339*G0_29_54 - 0.000541708291708382*G0_29_55 - 5.62760652046465e-05*G0_30_28 - 5.62760652046458e-05*G0_30_29 + 0.000852231102231245*G0_30_30 + 2.27272727272775e-05*G0_30_31 - 0.000350399600399659*G0_30_32 + 0.000789210789210923*G0_30_33 - 0.00101336163836181*G0_30_34 + 0.000947052947053105*G0_30_35 + 2.27272727272751e-05*G0_30_36 - 0.000350399600399657*G0_30_37 + 0.000789210789210917*G0_30_38 - 0.00101336163836181*G0_30_39 + 0.000947052947053103*G0_30_40 - 0.000250713572142186*G0_30_41 + 7.31500642215034e-05*G0_30_42 - 0.000384551955980591*G0_30_43 + 7.31500642215049e-05*G0_30_44 - 0.000250713572142185*G0_30_45 - 0.000541708291708382*G0_30_46 - 0.000428071928071998*G0_30_47 - 0.000428071928071999*G0_30_48 - 0.000541708291708377*G0_30_49 + 0.000719780219780338*G0_30_50 + 0.000606143856143957*G0_30_51 + 0.000719780219780338*G0_30_52 - 0.000789210789210921*G0_30_53 - 0.000789210789210917*G0_30_54 + 0.000681818181818287*G0_30_55 - 0.000250713572142185*G0_31_28 + 0.000947052947053108*G0_31_29 + 2.27272727272775e-05*G0_31_30 + 0.0105734265734284*G0_31_31 - 0.00865384615384761*G0_31_32 + 0.00876523476523623*G0_31_33 - 0.00587787212787311*G0_31_34 + 0.00259069501926689*G0_31_35 + 0.000533038390181333*G0_31_36 - 0.0001961966604824*G0_31_37 + 0.0014317111459971*G0_31_38 - 0.000252069359212248*G0_31_39 + 0.001590124161553*G0_31_40 + 0.001590124161553*G0_31_41 - 0.00436738261738337*G0_31_42 + 0.00681918081918199*G0_31_43 - 0.00660839160839275*G0_31_44 + 0.00528671328671419*G0_31_45 - 0.000586984444127391*G0_31_46 + 0.00239160839160879*G0_31_47 - 0.00487312687312771*G0_31_48 + 0.00912587412587567*G0_31_49 + 0.00120993292421885*G0_31_50 - 0.000930569430569584*G0_31_51 - 0.00124075924075946*G0_31_52 + 0.00125360353931804*G0_31_53 - 0.00133066933066956*G0_31_54 + 0.00246610532324859*G0_31_55 + 7.31500642215044e-05*G0_32_28 - 0.00101336163836182*G0_32_29 - 0.000350399600399659*G0_32_30 - 0.00865384615384761*G0_32_31 + 0.0194767732267765*G0_32_32 - 0.016223776223779*G0_32_33 + 0.0117834397745132*G0_32_34 - 0.00587787212787312*G0_32_35 - 0.000196196660482402*G0_32_36 + 0.00113270657913533*G0_32_37 - 0.00326887398316025*G0_32_38 + 0.00149435386042554*G0_32_39 - 0.00436738261738335*G0_32_40 - 0.000252069359212257*G0_32_41 + 0.00149435386042554*G0_32_42 - 0.00373626373626438*G0_32_43 + 0.0046697052947061*G0_32_44 - 0.00660839160839273*G0_32_45 - 0.00138557870700752*G0_32_46 + 0.00336199514771001*G0_32_47 - 0.00373126873126936*G0_32_48 - 0.00422577422577493*G0_32_49 - 0.000478450121307367*G0_32_50 - 0.001081329384901*G0_32_51 + 0.006833166833168*G0_32_52 - 0.00162159269302151*G0_32_53 + 0.0029573997431145*G0_32_54 - 0.00627604538318929*G0_32_55 - 0.000384551955980592*G0_33_28 + 0.000789210789210928*G0_33_29 + 0.000789210789210923*G0_33_30 + 0.00876523476523623*G0_33_31 - 0.016223776223779*G0_33_32 + 0.0251469165754922*G0_33_33 - 0.016223776223779*G0_33_34 + 0.00876523476523624*G0_33_35 + 0.00143171114599709*G0_33_36 - 0.00326887398316024*G0_33_37 + 0.00500959358102298*G0_33_38 - 0.00373626373626436*G0_33_39 + 0.00681918081918196*G0_33_40 + 0.00143171114599709*G0_33_41 - 0.00326887398316026*G0_33_42 + 0.00500959358102302*G0_33_43 - 0.00373626373626438*G0_33_44 + 0.00681918081918197*G0_33_45 - 0.00250891965177724*G0_33_46 + 0.0036078207506785*G0_33_47 - 0.000476666190952017*G0_33_48 + 0.00812187812187948*G0_33_49 + 0.00360782075067853*G0_33_50 - 0.00615027829313647*G0_33_51 + 0.000156985871271599*G0_33_52 - 0.000476666190952047*G0_33_53 + 0.000156985871271642*G0_33_54 + 0.00812187812187947*G0_33_55 + 7.3150064221504e-05*G0_34_28 - 0.000350399600399664*G0_34_29 - 0.00101336163836181*G0_34_30 - 0.00587787212787311*G0_34_31 + 0.0117834397745132*G0_34_32 - 0.016223776223779*G0_34_33 + 0.0194767732267765*G0_34_34 - 0.00865384615384762*G0_34_35 - 0.000252069359212249*G0_34_36 + 0.00149435386042554*G0_34_37 - 0.00373626373626436*G0_34_38 + 0.00466970529470608*G0_34_39 - 0.00660839160839272*G0_34_40 - 0.000196196660482408*G0_34_41 + 0.00113270657913535*G0_34_42 - 0.00326887398316026*G0_34_43 + 0.00149435386042555*G0_34_44 - 0.00436738261738336*G0_34_45 - 0.00138557870700752*G0_34_46 - 0.000478450121307342*G0_34_47 - 0.00162159269302154*G0_34_48 - 0.00627604538318928*G0_34_49 + 0.00336199514771*G0_34_50 - 0.001081329384901*G0_34_51 + 0.00295739974311455*G0_34_52 - 0.00373126873126933*G0_34_53 + 0.00683316683316796*G0_34_54 - 0.00422577422577493*G0_34_55 - 0.000250713572142186*G0_35_28 + 2.27272727272781e-05*G0_35_29 + 0.000947052947053105*G0_35_30 + 0.00259069501926688*G0_35_31 - 0.00587787212787312*G0_35_32 + 0.00876523476523624*G0_35_33 - 0.00865384615384762*G0_35_34 + 0.0105734265734284*G0_35_35 + 0.001590124161553*G0_35_36 - 0.00436738261738335*G0_35_37 + 0.00681918081918197*G0_35_38 - 0.00660839160839272*G0_35_39 + 0.00528671328671418*G0_35_40 + 0.000533038390181335*G0_35_41 - 0.00019619666048242*G0_35_42 + 0.00143171114599711*G0_35_43 - 0.000252069359212267*G0_35_44 + 0.001590124161553*G0_35_45 - 0.0005869844441274*G0_35_46 + 0.00120993292421883*G0_35_47 + 0.00125360353931803*G0_35_48 + 0.00246610532324859*G0_35_49 + 0.00239160839160881*G0_35_50 - 0.000930569430569576*G0_35_51 - 0.00133066933066955*G0_35_52 - 0.00487312687312771*G0_35_53 - 0.00124075924075945*G0_35_54 + 0.00912587412587566*G0_35_55 + 0.000947052947053107*G0_36_28 - 0.000250713572142186*G0_36_29 + 2.27272727272751e-05*G0_36_30 + 0.000533038390181333*G0_36_31 - 0.000196196660482402*G0_36_32 + 0.00143171114599709*G0_36_33 - 0.000252069359212249*G0_36_34 + 0.001590124161553*G0_36_35 + 0.0105734265734284*G0_36_36 - 0.00865384615384761*G0_36_37 + 0.00876523476523623*G0_36_38 - 0.00587787212787311*G0_36_39 + 0.00259069501926689*G0_36_40 + 0.00528671328671417*G0_36_41 - 0.00660839160839272*G0_36_42 + 0.00681918081918196*G0_36_43 - 0.00436738261738335*G0_36_44 + 0.001590124161553*G0_36_45 + 0.00912587412587563*G0_36_46 - 0.00487312687312768*G0_36_47 + 0.00239160839160879*G0_36_48 - 0.0005869844441274*G0_36_49 - 0.00124075924075941*G0_36_50 - 0.000930569430569591*G0_36_51 + 0.00120993292421885*G0_36_52 - 0.00133066933066958*G0_36_53 + 0.00125360353931804*G0_36_54 + 0.00246610532324861*G0_36_55 - 0.00101336163836181*G0_37_28 + 7.31500642215037e-05*G0_37_29 - 0.000350399600399657*G0_37_30 - 0.0001961966604824*G0_37_31 + 0.00113270657913533*G0_37_32 - 0.00326887398316024*G0_37_33 + 0.00149435386042554*G0_37_34 - 0.00436738261738335*G0_37_35 - 0.00865384615384761*G0_37_36 + 0.0194767732267765*G0_37_37 - 0.016223776223779*G0_37_38 + 0.0117834397745132*G0_37_39 - 0.00587787212787312*G0_37_40 - 0.00660839160839272*G0_37_41 + 0.00466970529470608*G0_37_42 - 0.00373626373626437*G0_37_43 + 0.00149435386042554*G0_37_44 - 0.000252069359212258*G0_37_45 - 0.00422577422577493*G0_37_46 - 0.00373126873126935*G0_37_47 + 0.00336199514770999*G0_37_48 - 0.00138557870700751*G0_37_49 + 0.00683316683316794*G0_37_50 - 0.00108132938490101*G0_37_51 - 0.000478450121307361*G0_37_52 + 0.00295739974311456*G0_37_53 - 0.00162159269302153*G0_37_54 - 0.00627604538318932*G0_37_55 + 0.000789210789210923*G0_38_28 - 0.00038455195598059*G0_38_29 + 0.000789210789210917*G0_38_30 + 0.0014317111459971*G0_38_31 - 0.00326887398316025*G0_38_32 + 0.00500959358102298*G0_38_33 - 0.00373626373626436*G0_38_34 + 0.00681918081918197*G0_38_35 + 0.00876523476523623*G0_38_36 - 0.016223776223779*G0_38_37 + 0.0251469165754922*G0_38_38 - 0.016223776223779*G0_38_39 + 0.00876523476523625*G0_38_40 + 0.00681918081918196*G0_38_41 - 0.00373626373626436*G0_38_42 + 0.00500959358102299*G0_38_43 - 0.00326887398316024*G0_38_44 + 0.0014317111459971*G0_38_45 + 0.00812187812187946*G0_38_46 - 0.000476666190951971*G0_38_47 + 0.0036078207506785*G0_38_48 - 0.00250891965177721*G0_38_49 + 0.000156985871271633*G0_38_50 - 0.00615027829313643*G0_38_51 + 0.0036078207506785*G0_38_52 + 0.000156985871271551*G0_38_53 - 0.000476666190951975*G0_38_54 + 0.00812187812187952*G0_38_55 - 0.000350399600399659*G0_39_28 + 7.3150064221504e-05*G0_39_29 - 0.00101336163836181*G0_39_30 - 0.000252069359212248*G0_39_31 + 0.00149435386042554*G0_39_32 - 0.00373626373626436*G0_39_33 + 0.00466970529470608*G0_39_34 - 0.00660839160839272*G0_39_35 - 0.00587787212787311*G0_39_36 + 0.0117834397745132*G0_39_37 - 0.016223776223779*G0_39_38 + 0.0194767732267765*G0_39_39 - 0.00865384615384762*G0_39_40 - 0.00436738261738334*G0_39_41 + 0.00149435386042554*G0_39_42 - 0.00326887398316023*G0_39_43 + 0.00113270657913533*G0_39_44 - 0.000196196660482404*G0_39_45 - 0.00627604538318926*G0_39_46 - 0.00162159269302155*G0_39_47 - 0.000478450121307327*G0_39_48 - 0.00138557870700751*G0_39_49 + 0.00295739974311451*G0_39_50 - 0.00108132938490102*G0_39_51 + 0.00336199514770999*G0_39_52 + 0.00683316683316804*G0_39_53 - 0.00373126873126935*G0_39_54 - 0.00422577422577497*G0_39_55 + 2.27272727272771e-05*G0_40_28 - 0.000250713572142185*G0_40_29 + 0.000947052947053103*G0_40_30 + 0.001590124161553*G0_40_31 - 0.00436738261738335*G0_40_32 + 0.00681918081918196*G0_40_33 - 0.00660839160839272*G0_40_34 + 0.00528671328671418*G0_40_35 + 0.00259069501926689*G0_40_36 - 0.00587787212787312*G0_40_37 + 0.00876523476523625*G0_40_38 - 0.00865384615384762*G0_40_39 + 0.0105734265734284*G0_40_40 + 0.001590124161553*G0_40_41 - 0.00025206935921227*G0_40_42 + 0.00143171114599711*G0_40_43 - 0.000196196660482411*G0_40_44 + 0.000533038390181337*G0_40_45 + 0.0024661053232486*G0_40_46 + 0.00125360353931803*G0_40_47 + 0.00120993292421884*G0_40_48 - 0.000586984444127403*G0_40_49 - 0.00133066933066954*G0_40_50 - 0.000930569430569577*G0_40_51 + 0.00239160839160881*G0_40_52 - 0.00124075924075947*G0_40_53 - 0.00487312687312769*G0_40_54 + 0.00912587412587567*G0_40_55 + 0.000947052947053108*G0_41_28 + 2.2727272727279e-05*G0_41_29 - 0.000250713572142186*G0_41_30 + 0.001590124161553*G0_41_31 - 0.000252069359212257*G0_41_32 + 0.00143171114599709*G0_41_33 - 0.000196196660482408*G0_41_34 + 0.000533038390181335*G0_41_35 + 0.00528671328671417*G0_41_36 - 0.00660839160839272*G0_41_37 + 0.00681918081918196*G0_41_38 - 0.00436738261738335*G0_41_39 + 0.001590124161553*G0_41_40 + 0.0105734265734283*G0_41_41 - 0.0086538461538476*G0_41_42 + 0.00876523476523624*G0_41_43 - 0.00587787212787312*G0_41_44 + 0.00259069501926689*G0_41_45 + 0.00912587412587564*G0_41_46 - 0.00124075924075943*G0_41_47 - 0.00133066933066959*G0_41_48 + 0.00246610532324861*G0_41_49 - 0.00487312687312769*G0_41_50 - 0.000930569430569578*G0_41_51 + 0.00125360353931804*G0_41_52 + 0.00239160839160878*G0_41_53 + 0.00120993292421884*G0_41_54 - 0.000586984444127402*G0_41_55 - 0.00101336163836181*G0_42_28 - 0.000350399600399664*G0_42_29 + 7.31500642215035e-05*G0_42_30 - 0.00436738261738337*G0_42_31 + 0.00149435386042554*G0_42_32 - 0.00326887398316026*G0_42_33 + 0.00113270657913535*G0_42_34 - 0.00019619666048242*G0_42_35 - 0.00660839160839272*G0_42_36 + 0.00466970529470608*G0_42_37 - 0.00373626373626436*G0_42_38 + 0.00149435386042554*G0_42_39 - 0.00025206935921227*G0_42_40 - 0.0086538461538476*G0_42_41 + 0.0194767732267765*G0_42_42 - 0.016223776223779*G0_42_43 + 0.0117834397745132*G0_42_44 - 0.00587787212787313*G0_42_45 - 0.00422577422577489*G0_42_46 + 0.00683316683316791*G0_42_47 + 0.00295739974311459*G0_42_48 - 0.00627604538318936*G0_42_49 - 0.00373126873126939*G0_42_50 - 0.00108132938490097*G0_42_51 - 0.00162159269302155*G0_42_52 + 0.00336199514771002*G0_42_53 - 0.000478450121307362*G0_42_54 - 0.00138557870700754*G0_42_55 + 0.000789210789210923*G0_43_28 + 0.000789210789210929*G0_43_29 - 0.000384551955980591*G0_43_30 + 0.00681918081918199*G0_43_31 - 0.00373626373626438*G0_43_32 + 0.00500959358102302*G0_43_33 - 0.00326887398316026*G0_43_34 + 0.00143171114599711*G0_43_35 + 0.00681918081918196*G0_43_36 - 0.00373626373626437*G0_43_37 + 0.00500959358102299*G0_43_38 - 0.00326887398316023*G0_43_39 + 0.00143171114599711*G0_43_40 + 0.00876523476523624*G0_43_41 - 0.016223776223779*G0_43_42 + 0.0251469165754923*G0_43_43 - 0.016223776223779*G0_43_44 + 0.00876523476523627*G0_43_45 + 0.00812187812187943*G0_43_46 + 0.000156985871271685*G0_43_47 + 0.00015698587127154*G0_43_48 + 0.00812187812187958*G0_43_49 - 0.000476666190951936*G0_43_50 - 0.00615027829313647*G0_43_51 - 0.000476666190951984*G0_43_52 + 0.00360782075067847*G0_43_53 + 0.00360782075067853*G0_43_54 - 0.0025089196517772*G0_43_55 - 0.000350399600399658*G0_44_28 - 0.00101336163836182*G0_44_29 + 7.31500642215049e-05*G0_44_30 - 0.00660839160839275*G0_44_31 + 0.0046697052947061*G0_44_32 - 0.00373626373626438*G0_44_33 + 0.00149435386042555*G0_44_34 - 0.000252069359212267*G0_44_35 - 0.00436738261738335*G0_44_36 + 0.00149435386042554*G0_44_37 - 0.00326887398316024*G0_44_38 + 0.00113270657913533*G0_44_39 - 0.000196196660482411*G0_44_40 - 0.00587787212787312*G0_44_41 + 0.0117834397745132*G0_44_42 - 0.016223776223779*G0_44_43 + 0.0194767732267765*G0_44_44 - 0.00865384615384764*G0_44_45 - 0.00627604538318926*G0_44_46 + 0.00295739974311449*G0_44_47 + 0.00683316683316806*G0_44_48 - 0.00422577422577501*G0_44_49 - 0.00162159269302156*G0_44_50 - 0.00108132938490101*G0_44_51 - 0.00373126873126936*G0_44_52 - 0.00047845012130732*G0_44_53 + 0.00336199514770998*G0_44_54 - 0.00138557870700752*G0_44_55 + 2.27272727272782e-05*G0_45_28 + 0.000947052947053114*G0_45_29 - 0.000250713572142185*G0_45_30 + 0.00528671328671419*G0_45_31 - 0.00660839160839273*G0_45_32 + 0.00681918081918197*G0_45_33 - 0.00436738261738336*G0_45_34 + 0.001590124161553*G0_45_35 + 0.001590124161553*G0_45_36 - 0.000252069359212258*G0_45_37 + 0.0014317111459971*G0_45_38 - 0.000196196660482403*G0_45_39 + 0.000533038390181337*G0_45_40 + 0.00259069501926689*G0_45_41 - 0.00587787212787313*G0_45_42 + 0.00876523476523627*G0_45_43 - 0.00865384615384764*G0_45_44 + 0.0105734265734284*G0_45_45 + 0.00246610532324859*G0_45_46 - 0.00133066933066954*G0_45_47 - 0.00124075924075948*G0_45_48 + 0.00912587412587568*G0_45_49 + 0.00125360353931804*G0_45_50 - 0.000930569430569585*G0_45_51 - 0.00487312687312771*G0_45_52 + 0.00120993292421883*G0_45_53 + 0.00239160839160881*G0_45_54 - 0.000586984444127409*G0_45_55 + 0.000681818181818304*G0_46_28 - 0.000541708291708381*G0_46_29 - 0.000541708291708382*G0_46_30 - 0.000586984444127391*G0_46_31 - 0.00138557870700752*G0_46_32 - 0.00250891965177724*G0_46_33 - 0.00138557870700752*G0_46_34 - 0.0005869844441274*G0_46_35 + 0.00912587412587563*G0_46_36 - 0.00422577422577493*G0_46_37 + 0.00812187812187946*G0_46_38 - 0.00627604538318926*G0_46_39 + 0.0024661053232486*G0_46_40 + 0.00912587412587564*G0_46_41 - 0.00422577422577489*G0_46_42 + 0.00812187812187943*G0_46_43 - 0.00627604538318925*G0_46_44 + 0.00246610532324859*G0_46_45 + 0.0574525474525571*G0_46_46 - 0.0181618381618412*G0_46_47 + 0.0162480376766118*G0_46_48 - 0.00807264164407156*G0_46_49 - 0.0181618381618412*G0_46_50 + 0.00354502640216989*G0_46_51 - 0.00486798915370427*G0_46_52 + 0.0162480376766118*G0_46_53 - 0.00486798915370426*G0_46_54 - 0.00807264164407157*G0_46_55 - 0.000789210789210919*G0_47_28 + 0.000719780219780339*G0_47_29 - 0.000428071928071998*G0_47_30 + 0.00239160839160879*G0_47_31 + 0.00336199514771001*G0_47_32 + 0.0036078207506785*G0_47_33 - 0.000478450121307342*G0_47_34 + 0.00120993292421883*G0_47_35 - 0.00487312687312768*G0_47_36 - 0.00373126873126935*G0_47_37 - 0.000476666190951971*G0_47_38 - 0.00162159269302155*G0_47_39 + 0.00125360353931803*G0_47_40 - 0.00124075924075943*G0_47_41 + 0.00683316683316791*G0_47_42 + 0.000156985871271685*G0_47_43 + 0.00295739974311448*G0_47_44 - 0.00133066933066954*G0_47_45 - 0.0181618381618412*G0_47_46 + 0.0682802911374454*G0_47_47 - 0.0236591979449162*G0_47_48 + 0.0162480376766119*G0_47_49 - 0.0100185528756974*G0_47_50 - 0.0146039674611127*G0_47_51 + 0.00500927643784871*G0_47_52 + 0.00500927643784868*G0_47_53 + 0.0120993292421884*G0_47_54 - 0.00486798915370425*G0_47_55 + 0.000719780219780348*G0_48_28 - 0.000789210789210925*G0_48_29 - 0.000428071928071999*G0_48_30 - 0.00487312687312771*G0_48_31 - 0.00373126873126936*G0_48_32 - 0.000476666190952017*G0_48_33 - 0.00162159269302153*G0_48_34 + 0.00125360353931803*G0_48_35 + 0.00239160839160879*G0_48_36 + 0.00336199514770999*G0_48_37 + 0.0036078207506785*G0_48_38 - 0.000478450121307327*G0_48_39 + 0.00120993292421884*G0_48_40 - 0.00133066933066959*G0_48_41 + 0.00295739974311459*G0_48_42 + 0.00015698587127154*G0_48_43 + 0.00683316683316806*G0_48_44 - 0.00124075924075948*G0_48_45 + 0.0162480376766118*G0_48_46 - 0.0236591979449162*G0_48_47 + 0.0682802911374455*G0_48_48 - 0.0181618381618413*G0_48_49 + 0.0050092764378487*G0_48_50 - 0.0146039674611128*G0_48_51 - 0.0100185528756975*G0_48_52 + 0.0120993292421884*G0_48_53 + 0.00500927643784872*G0_48_54 - 0.00486798915370427*G0_48_55 - 0.00054170829170838*G0_49_28 + 0.000681818181818298*G0_49_29 - 0.000541708291708377*G0_49_30 + 0.00912587412587567*G0_49_31 - 0.00422577422577493*G0_49_32 + 0.00812187812187948*G0_49_33 - 0.00627604538318928*G0_49_34 + 0.00246610532324859*G0_49_35 - 0.0005869844441274*G0_49_36 - 0.00138557870700751*G0_49_37 - 0.00250891965177721*G0_49_38 - 0.00138557870700751*G0_49_39 - 0.000586984444127402*G0_49_40 + 0.00246610532324861*G0_49_41 - 0.00627604538318936*G0_49_42 + 0.00812187812187958*G0_49_43 - 0.00422577422577501*G0_49_44 + 0.00912587412587568*G0_49_45 - 0.00807264164407156*G0_49_46 + 0.0162480376766119*G0_49_47 - 0.0181618381618413*G0_49_48 + 0.0574525474525572*G0_49_49 - 0.00486798915370424*G0_49_50 + 0.00354502640216982*G0_49_51 - 0.0181618381618412*G0_49_52 - 0.00486798915370424*G0_49_53 + 0.0162480376766119*G0_49_54 - 0.00807264164407158*G0_49_55 - 0.000789210789210922*G0_50_28 - 0.000428071928072002*G0_50_29 + 0.000719780219780338*G0_50_30 + 0.00120993292421885*G0_50_31 - 0.000478450121307367*G0_50_32 + 0.00360782075067853*G0_50_33 + 0.00336199514771*G0_50_34 + 0.00239160839160881*G0_50_35 - 0.00124075924075941*G0_50_36 + 0.00683316683316794*G0_50_37 + 0.000156985871271635*G0_50_38 + 0.00295739974311451*G0_50_39 - 0.00133066933066954*G0_50_40 - 0.00487312687312769*G0_50_41 - 0.00373126873126939*G0_50_42 - 0.000476666190951936*G0_50_43 - 0.00162159269302156*G0_50_44 + 0.00125360353931804*G0_50_45 - 0.0181618381618412*G0_50_46 - 0.0100185528756974*G0_50_47 + 0.0050092764378487*G0_50_48 - 0.00486798915370424*G0_50_49 + 0.0682802911374454*G0_50_50 - 0.0146039674611127*G0_50_51 + 0.0120993292421884*G0_50_52 - 0.0236591979449162*G0_50_53 + 0.0050092764378487*G0_50_54 + 0.0162480376766118*G0_50_55 + 0.000606143856143955*G0_51_28 + 0.000606143856143957*G0_51_29 + 0.000606143856143957*G0_51_30 - 0.000930569430569584*G0_51_31 - 0.001081329384901*G0_51_32 - 0.00615027829313647*G0_51_33 - 0.001081329384901*G0_51_34 - 0.000930569430569576*G0_51_35 - 0.00093056943056959*G0_51_36 - 0.00108132938490101*G0_51_37 - 0.00615027829313643*G0_51_38 - 0.00108132938490102*G0_51_39 - 0.000930569430569577*G0_51_40 - 0.000930569430569578*G0_51_41 - 0.00108132938490097*G0_51_42 - 0.00615027829313647*G0_51_43 - 0.00108132938490101*G0_51_44 - 0.000930569430569585*G0_51_45 + 0.00354502640216989*G0_51_46 - 0.0146039674611127*G0_51_47 - 0.0146039674611128*G0_51_48 + 0.00354502640216982*G0_51_49 - 0.0146039674611127*G0_51_50 + 0.0735496646211055*G0_51_51 - 0.0146039674611127*G0_51_52 - 0.0146039674611127*G0_51_53 - 0.0146039674611127*G0_51_54 + 0.00354502640216985*G0_51_55 - 0.000428071928072001*G0_52_28 - 0.000789210789210925*G0_52_29 + 0.000719780219780338*G0_52_30 - 0.00124075924075946*G0_52_31 + 0.006833166833168*G0_52_32 + 0.000156985871271598*G0_52_33 + 0.00295739974311455*G0_52_34 - 0.00133066933066955*G0_52_35 + 0.00120993292421885*G0_52_36 - 0.000478450121307361*G0_52_37 + 0.0036078207506785*G0_52_38 + 0.00336199514770999*G0_52_39 + 0.00239160839160881*G0_52_40 + 0.00125360353931804*G0_52_41 - 0.00162159269302155*G0_52_42 - 0.000476666190951984*G0_52_43 - 0.00373126873126936*G0_52_44 - 0.00487312687312771*G0_52_45 - 0.00486798915370427*G0_52_46 + 0.00500927643784871*G0_52_47 - 0.0100185528756975*G0_52_48 - 0.0181618381618412*G0_52_49 + 0.0120993292421884*G0_52_50 - 0.0146039674611127*G0_52_51 + 0.0682802911374455*G0_52_52 + 0.00500927643784867*G0_52_53 - 0.0236591979449162*G0_52_54 + 0.0162480376766118*G0_52_55 + 0.00071978021978035*G0_53_28 - 0.000428071928071997*G0_53_29 - 0.000789210789210921*G0_53_30 + 0.00125360353931804*G0_53_31 - 0.00162159269302151*G0_53_32 - 0.000476666190952046*G0_53_33 - 0.00373126873126933*G0_53_34 - 0.00487312687312771*G0_53_35 - 0.00133066933066958*G0_53_36 + 0.00295739974311456*G0_53_37 + 0.000156985871271552*G0_53_38 + 0.00683316683316804*G0_53_39 - 0.00124075924075947*G0_53_40 + 0.00239160839160878*G0_53_41 + 0.00336199514771002*G0_53_42 + 0.00360782075067847*G0_53_43 - 0.00047845012130732*G0_53_44 + 0.00120993292421883*G0_53_45 + 0.0162480376766118*G0_53_46 + 0.00500927643784868*G0_53_47 + 0.0120993292421884*G0_53_48 - 0.00486798915370424*G0_53_49 - 0.0236591979449162*G0_53_50 - 0.0146039674611127*G0_53_51 + 0.00500927643784867*G0_53_52 + 0.0682802911374454*G0_53_53 - 0.0100185528756974*G0_53_54 - 0.0181618381618413*G0_53_55 - 0.000428071928071995*G0_54_28 + 0.000719780219780339*G0_54_29 - 0.000789210789210917*G0_54_30 - 0.00133066933066956*G0_54_31 + 0.0029573997431145*G0_54_32 + 0.000156985871271641*G0_54_33 + 0.00683316683316796*G0_54_34 - 0.00124075924075945*G0_54_35 + 0.00125360353931804*G0_54_36 - 0.00162159269302153*G0_54_37 - 0.000476666190951975*G0_54_38 - 0.00373126873126935*G0_54_39 - 0.00487312687312769*G0_54_40 + 0.00120993292421884*G0_54_41 - 0.000478450121307362*G0_54_42 + 0.00360782075067853*G0_54_43 + 0.00336199514770998*G0_54_44 + 0.00239160839160881*G0_54_45 - 0.00486798915370426*G0_54_46 + 0.0120993292421884*G0_54_47 + 0.00500927643784872*G0_54_48 + 0.0162480376766119*G0_54_49 + 0.0050092764378487*G0_54_50 - 0.0146039674611127*G0_54_51 - 0.0236591979449162*G0_54_52 - 0.0100185528756974*G0_54_53 + 0.0682802911374455*G0_54_54 - 0.0181618381618412*G0_54_55 - 0.000541708291708385*G0_55_28 - 0.000541708291708382*G0_55_29 + 0.000681818181818287*G0_55_30 + 0.00246610532324859*G0_55_31 - 0.00627604538318929*G0_55_32 + 0.00812187812187947*G0_55_33 - 0.00422577422577493*G0_55_34 + 0.00912587412587566*G0_55_35 + 0.00246610532324861*G0_55_36 - 0.00627604538318932*G0_55_37 + 0.00812187812187952*G0_55_38 - 0.00422577422577497*G0_55_39 + 0.00912587412587567*G0_55_40 - 0.000586984444127402*G0_55_41 - 0.00138557870700754*G0_55_42 - 0.0025089196517772*G0_55_43 - 0.00138557870700752*G0_55_44 - 0.000586984444127409*G0_55_45 - 0.00807264164407157*G0_55_46 - 0.00486798915370425*G0_55_47 - 0.00486798915370427*G0_55_48 - 0.00807264164407158*G0_55_49 + 0.0162480376766118*G0_55_50 + 0.00354502640216985*G0_55_51 + 0.0162480376766118*G0_55_52 - 0.0181618381618413*G0_55_53 - 0.0181618381618412*G0_55_54 + 0.0574525474525571*G0_55_55;
}

/// Constructor
errornormsgm_form_0::errornormsgm_form_0() : ufc::form()
{
    // Do nothing
}

/// Destructor
errornormsgm_form_0::~errornormsgm_form_0()
{
    // Do nothing
}

/// Return a string identifying the form
const char* errornormsgm_form_0::signature() const
{
    return "045b7420b6dccc93bdad7d6e5162608a9b81470499548b7f1bc897757da129b86c23be5bdb30511c7f82456090fefbd202a9645cfe4af135b9706505473df1c6";
}

/// Return the rank of the global tensor (r)
std::size_t errornormsgm_form_0::rank() const
{
    return 0;
}

/// Return the number of coefficients (n)
std::size_t errornormsgm_form_0::num_coefficients() const
{
    return 1;
}

/// Return the number of cell domains
std::size_t errornormsgm_form_0::num_cell_domains() const
{
    return 0;
}

/// Return the number of exterior facet domains
std::size_t errornormsgm_form_0::num_exterior_facet_domains() const
{
    return 0;
}

/// Return the number of interior facet domains
std::size_t errornormsgm_form_0::num_interior_facet_domains() const
{
    return 0;
}

/// Return the number of point domains
std::size_t errornormsgm_form_0::num_point_domains() const
{
    return 0;
}

/// Return the number of custom domains
std::size_t errornormsgm_form_0::num_custom_domains() const
{
    return 0;
}

/// Return whether the form has any cell integrals
bool errornormsgm_form_0::has_cell_integrals() const
{
    return true;
}

/// Return whether the form has any exterior facet integrals
bool errornormsgm_form_0::has_exterior_facet_integrals() const
{
    return false;
}

/// Return whether the form has any interior facet integrals
bool errornormsgm_form_0::has_interior_facet_integrals() const
{
    return false;
}

/// Return whether the form has any point integrals
bool errornormsgm_form_0::has_point_integrals() const
{
    return false;
}

/// Return whether the form has any custom integrals
bool errornormsgm_form_0::has_custom_integrals() const
{
    return false;
}

/// Create a new finite element for argument function i
ufc::finite_element* errornormsgm_form_0::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new errornormsgm_finite_element_1();
        break;
      }
    }
    
    return 0;
}

/// Create a new dofmap for argument function i
ufc::dofmap* errornormsgm_form_0::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new errornormsgm_dofmap_1();
        break;
      }
    }
    
    return 0;
}

/// Create a new cell integral on sub domain i
ufc::cell_integral* errornormsgm_form_0::create_cell_integral(std::size_t i) const
{
    return 0;
}

/// Create a new exterior facet integral on sub domain i
ufc::exterior_facet_integral* errornormsgm_form_0::create_exterior_facet_integral(std::size_t i) const
{
    return 0;
}

/// Create a new interior facet integral on sub domain i
ufc::interior_facet_integral* errornormsgm_form_0::create_interior_facet_integral(std::size_t i) const
{
    return 0;
}

/// Create a new point integral on sub domain i
ufc::point_integral* errornormsgm_form_0::create_point_integral(std::size_t i) const
{
    return 0;
}

/// Create a new custom integral on sub domain i
ufc::custom_integral* errornormsgm_form_0::create_custom_integral(std::size_t i) const
{
    return 0;
}

/// Create a new cell integral on everywhere else
ufc::cell_integral* errornormsgm_form_0::create_default_cell_integral() const
{
    return new errornormsgm_cell_integral_0_otherwise();
}

/// Create a new exterior facet integral on everywhere else
ufc::exterior_facet_integral* errornormsgm_form_0::create_default_exterior_facet_integral() const
{
    return 0;
}

/// Create a new interior facet integral on everywhere else
ufc::interior_facet_integral* errornormsgm_form_0::create_default_interior_facet_integral() const
{
    return 0;
}

/// Create a new point integral on everywhere else
ufc::point_integral* errornormsgm_form_0::create_default_point_integral() const
{
    return 0;
}

/// Create a new custom integral on everywhere else
ufc::custom_integral* errornormsgm_form_0::create_default_custom_integral() const
{
    return 0;
}


