// This code conforms with the UFC specification version 2017.2.0.dev0
// and was automatically generated by FFC version 2017.2.0.dev0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   add_tabulate_tensor_timing:     False
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   external_include_dirs:          ''
//   external_includes:              ''
//   external_libraries:             ''
//   external_library_dirs:          ''
//   form_postfix:                   True
//   format:                         'dolfin'
//   generate_dummy_tabulate_tensor: False
//   max_signature_length:           0
//   optimize:                       True
//   precision:                      None
//   quadrature_degree:              None
//   quadrature_rule:                None
//   representation:                 'auto'
//   split:                          True

#include "Stiff3d.h"

stiff3d_finite_element_0::stiff3d_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

stiff3d_finite_element_0::~stiff3d_finite_element_0()
{
    // Do nothing
}

const char * stiff3d_finite_element_0::signature() const
{
    return "FiniteElement('Lagrange', tetrahedron, 1)";
}

ufc::shape stiff3d_finite_element_0::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t stiff3d_finite_element_0::topological_dimension() const
{
    return 3;
}

std::size_t stiff3d_finite_element_0::geometric_dimension() const
{
    return 3;
}

std::size_t stiff3d_finite_element_0::space_dimension() const
{
    return 4;
}

std::size_t stiff3d_finite_element_0::value_rank() const
{
    return 0;
}

std::size_t stiff3d_finite_element_0::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t stiff3d_finite_element_0::value_size() const
{
    return 1;
}

std::size_t stiff3d_finite_element_0::reference_value_rank() const
{
    return 0;
}

std::size_t stiff3d_finite_element_0::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t stiff3d_finite_element_0::reference_value_size() const
{
    return 1;
}

std::size_t stiff3d_finite_element_0::degree() const
{
    return 1;
}

const char * stiff3d_finite_element_0::family() const
{
    return "Lagrange";
}

void stiff3d_finite_element_0::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 4; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= 0.8660254037844386;
        basisvalues1[3] *= 1.118033988749895;
        basisvalues1[2] *= 1.5811388300841898;
        basisvalues1[1] *= 2.7386127875258306;
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 3] += coefficients3[0][r] * basisvalues1[r];
    }
}

void stiff3d_finite_element_0::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 4 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505545, 0.0, 0.0, 0.0 },
            { 5.163977794943224, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[4] = {};
    const std::size_t num_components[4] = { 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= 0.8660254037844386;
        basisvalues1[3] *= 1.118033988749895;
        basisvalues1[2] *= 1.5811388300841898;
        basisvalues1[1] *= 2.7386127875258306;
        double aux_dmats0_basisvalues1[4] = {};
        for (std::size_t r = 0; r < num_derivatives; ++r)
        {
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4];
            // Initialize dmats.
            std::size_t comb = combinations[order - 1][r][0];
            for (std::size_t t = 0; t < 4; ++t)
                for (std::size_t u = 0; u < 4; ++u)
                    dmats[t][u] = dmats0[comb][t][u];
            // Looping derivative order to generate dmats.
            for (std::size_t s = 1; s < order; ++s)
            {
                // Store previous dmats matrix.
                double dmats_old[4][4];
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        dmats_old[t][u] = dmats[t][u];
                // Resetting dmats.
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        dmats[t][u] = 0.0;
                // Update dmats using an inner product.
                comb = combinations[order - 1][r][s];
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        for (std::size_t tu = 0; tu < 4; ++tu)
                            dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
            }
            for (std::size_t s = 0; s < 4; ++s)
                for (std::size_t t = 0; t < 4; ++t)
                    aux_dmats0_basisvalues1[s] += dmats[s][t] * basisvalues1[t];
        }
        // Loop over all dofs
        for (std::size_t i = 0; i < 4; ++i)
        {
            double derivatives[3];
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[4 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void stiff3d_finite_element_0::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 4 * num_derivatives, 0.0);
    const std::size_t reference_offsets[4] = {};
    const std::size_t physical_offsets[4] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 4; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[4 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[4 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void stiff3d_finite_element_0::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff3d_finite_element_0::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
}

void stiff3d_finite_element_0::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff3d_finite_element_0::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double stiff3d_finite_element_0::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void stiff3d_finite_element_0::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
}

void stiff3d_finite_element_0::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
}

void stiff3d_finite_element_0::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
}

void stiff3d_finite_element_0::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[12] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
}

std::size_t stiff3d_finite_element_0::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * stiff3d_finite_element_0::create_sub_element(std::size_t i) const
{
    return nullptr;
}

ufc::finite_element * stiff3d_finite_element_0::create() const
{
    return new stiff3d_finite_element_0();
}


stiff3d_finite_element_1::stiff3d_finite_element_1() : ufc::finite_element()
{
    // Do nothing
}

stiff3d_finite_element_1::~stiff3d_finite_element_1()
{
    // Do nothing
}

const char * stiff3d_finite_element_1::signature() const
{
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
}

ufc::shape stiff3d_finite_element_1::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t stiff3d_finite_element_1::topological_dimension() const
{
    return 3;
}

std::size_t stiff3d_finite_element_1::geometric_dimension() const
{
    return 3;
}

std::size_t stiff3d_finite_element_1::space_dimension() const
{
    return 12;
}

std::size_t stiff3d_finite_element_1::value_rank() const
{
    return 1;
}

std::size_t stiff3d_finite_element_1::value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t stiff3d_finite_element_1::value_size() const
{
    return 3;
}

std::size_t stiff3d_finite_element_1::reference_value_rank() const
{
    return 1;
}

std::size_t stiff3d_finite_element_1::reference_value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t stiff3d_finite_element_1::reference_value_size() const
{
    return 3;
}

std::size_t stiff3d_finite_element_1::degree() const
{
    return 1;
}

const char * stiff3d_finite_element_1::family() const
{
    return "Lagrange";
}

void stiff3d_finite_element_1::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 12 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= 0.8660254037844386;
        basisvalues1[3] *= 1.118033988749895;
        basisvalues1[2] *= 1.5811388300841898;
        basisvalues1[1] *= 2.7386127875258306;
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 4 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 5 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 6 + 1] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 7 + 1] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 8 + 2] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 9 + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 10 + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 11 + 2] += coefficients3[0][r] * basisvalues1[r];
    }
}

void stiff3d_finite_element_1::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 12 * num_derivatives * 3, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505545, 0.0, 0.0, 0.0 },
            { 5.163977794943224, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t num_components[12] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= 0.8660254037844386;
        basisvalues1[3] *= 1.118033988749895;
        basisvalues1[2] *= 1.5811388300841898;
        basisvalues1[1] *= 2.7386127875258306;
        double aux_dmats0_basisvalues1[4] = {};
        for (std::size_t r = 0; r < num_derivatives; ++r)
        {
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4];
            // Initialize dmats.
            std::size_t comb = combinations[order - 1][r][0];
            for (std::size_t t = 0; t < 4; ++t)
                for (std::size_t u = 0; u < 4; ++u)
                    dmats[t][u] = dmats0[comb][t][u];
            // Looping derivative order to generate dmats.
            for (std::size_t s = 1; s < order; ++s)
            {
                // Store previous dmats matrix.
                double dmats_old[4][4];
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        dmats_old[t][u] = dmats[t][u];
                // Resetting dmats.
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        dmats[t][u] = 0.0;
                // Update dmats using an inner product.
                comb = combinations[order - 1][r][s];
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        for (std::size_t tu = 0; tu < 4; ++tu)
                            dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
            }
            for (std::size_t s = 0; s < 4; ++s)
                for (std::size_t t = 0; t < 4; ++t)
                    aux_dmats0_basisvalues1[s] += dmats[s][t] * basisvalues1[t];
        }
        // Loop over all dofs
        for (std::size_t i = 0; i < 12; ++i)
        {
            double derivatives[3];
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void stiff3d_finite_element_1::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 12 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t physical_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 12; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void stiff3d_finite_element_1::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff3d_finite_element_1::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void stiff3d_finite_element_1::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff3d_finite_element_1::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[9];
    for (unsigned int r = 0; r < 9; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double stiff3d_finite_element_1::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
}

void stiff3d_finite_element_1::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[4] = vals[1];
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[5] = vals[1];
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[6] = vals[1];
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    values[7] = vals[1];
    values[11] = vals[2];
}

void stiff3d_finite_element_1::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
}

void stiff3d_finite_element_1::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = coordinate_dofs[0];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 5] = coordinate_dofs[3];
    dof_coordinates[3 * 5 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 5 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 6] = coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 7] = coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 8] = coordinate_dofs[0];
    dof_coordinates[3 * 8 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 8 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 9] = coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 10] = coordinate_dofs[6];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 11] = coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = coordinate_dofs[11];
}

void stiff3d_finite_element_1::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[36] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 36, reference_dof_coordinates);
}

std::size_t stiff3d_finite_element_1::num_sub_elements() const
{
    return 3;
}

ufc::finite_element * stiff3d_finite_element_1::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff3d_finite_element_0();
    case 1:
        return new stiff3d_finite_element_0();
    case 2:
        return new stiff3d_finite_element_0();
    default:
        return nullptr;
    }
}

ufc::finite_element * stiff3d_finite_element_1::create() const
{
    return new stiff3d_finite_element_1();
}


stiff3d_finite_element_2::stiff3d_finite_element_2() : ufc::finite_element()
{
    // Do nothing
}

stiff3d_finite_element_2::~stiff3d_finite_element_2()
{
    // Do nothing
}

const char * stiff3d_finite_element_2::signature() const
{
    return "FiniteElement('Discontinuous Lagrange', tetrahedron, 1)";
}

ufc::shape stiff3d_finite_element_2::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t stiff3d_finite_element_2::topological_dimension() const
{
    return 3;
}

std::size_t stiff3d_finite_element_2::geometric_dimension() const
{
    return 3;
}

std::size_t stiff3d_finite_element_2::space_dimension() const
{
    return 4;
}

std::size_t stiff3d_finite_element_2::value_rank() const
{
    return 0;
}

std::size_t stiff3d_finite_element_2::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t stiff3d_finite_element_2::value_size() const
{
    return 1;
}

std::size_t stiff3d_finite_element_2::reference_value_rank() const
{
    return 0;
}

std::size_t stiff3d_finite_element_2::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t stiff3d_finite_element_2::reference_value_size() const
{
    return 1;
}

std::size_t stiff3d_finite_element_2::degree() const
{
    return 1;
}

const char * stiff3d_finite_element_2::family() const
{
    return "Discontinuous Lagrange";
}

void stiff3d_finite_element_2::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 4; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= 0.8660254037844386;
        basisvalues1[3] *= 1.118033988749895;
        basisvalues1[2] *= 1.5811388300841898;
        basisvalues1[1] *= 2.7386127875258306;
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 3] += coefficients3[0][r] * basisvalues1[r];
    }
}

void stiff3d_finite_element_2::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 4 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505545, 0.0, 0.0, 0.0 },
            { 5.163977794943224, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[4] = {};
    const std::size_t num_components[4] = { 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= 0.8660254037844386;
        basisvalues1[3] *= 1.118033988749895;
        basisvalues1[2] *= 1.5811388300841898;
        basisvalues1[1] *= 2.7386127875258306;
        double aux_dmats0_basisvalues1[4] = {};
        for (std::size_t r = 0; r < num_derivatives; ++r)
        {
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4];
            // Initialize dmats.
            std::size_t comb = combinations[order - 1][r][0];
            for (std::size_t t = 0; t < 4; ++t)
                for (std::size_t u = 0; u < 4; ++u)
                    dmats[t][u] = dmats0[comb][t][u];
            // Looping derivative order to generate dmats.
            for (std::size_t s = 1; s < order; ++s)
            {
                // Store previous dmats matrix.
                double dmats_old[4][4];
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        dmats_old[t][u] = dmats[t][u];
                // Resetting dmats.
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        dmats[t][u] = 0.0;
                // Update dmats using an inner product.
                comb = combinations[order - 1][r][s];
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        for (std::size_t tu = 0; tu < 4; ++tu)
                            dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
            }
            for (std::size_t s = 0; s < 4; ++s)
                for (std::size_t t = 0; t < 4; ++t)
                    aux_dmats0_basisvalues1[s] += dmats[s][t] * basisvalues1[t];
        }
        // Loop over all dofs
        for (std::size_t i = 0; i < 4; ++i)
        {
            double derivatives[3];
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[4 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void stiff3d_finite_element_2::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 4 * num_derivatives, 0.0);
    const std::size_t reference_offsets[4] = {};
    const std::size_t physical_offsets[4] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 4; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[4 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[4 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void stiff3d_finite_element_2::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff3d_finite_element_2::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
}

void stiff3d_finite_element_2::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff3d_finite_element_2::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double stiff3d_finite_element_2::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void stiff3d_finite_element_2::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
}

void stiff3d_finite_element_2::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
}

void stiff3d_finite_element_2::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
}

void stiff3d_finite_element_2::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[12] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
}

std::size_t stiff3d_finite_element_2::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * stiff3d_finite_element_2::create_sub_element(std::size_t i) const
{
    return nullptr;
}

ufc::finite_element * stiff3d_finite_element_2::create() const
{
    return new stiff3d_finite_element_2();
}


stiff3d_finite_element_3::stiff3d_finite_element_3() : ufc::finite_element()
{
    // Do nothing
}

stiff3d_finite_element_3::~stiff3d_finite_element_3()
{
    // Do nothing
}

const char * stiff3d_finite_element_3::signature() const
{
    return "VectorElement(FiniteElement('Discontinuous Lagrange', tetrahedron, 1), dim=3)";
}

ufc::shape stiff3d_finite_element_3::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t stiff3d_finite_element_3::topological_dimension() const
{
    return 3;
}

std::size_t stiff3d_finite_element_3::geometric_dimension() const
{
    return 3;
}

std::size_t stiff3d_finite_element_3::space_dimension() const
{
    return 12;
}

std::size_t stiff3d_finite_element_3::value_rank() const
{
    return 1;
}

std::size_t stiff3d_finite_element_3::value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t stiff3d_finite_element_3::value_size() const
{
    return 3;
}

std::size_t stiff3d_finite_element_3::reference_value_rank() const
{
    return 1;
}

std::size_t stiff3d_finite_element_3::reference_value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t stiff3d_finite_element_3::reference_value_size() const
{
    return 3;
}

std::size_t stiff3d_finite_element_3::degree() const
{
    return 1;
}

const char * stiff3d_finite_element_3::family() const
{
    return "Discontinuous Lagrange";
}

void stiff3d_finite_element_3::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 12 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= 0.8660254037844386;
        basisvalues1[3] *= 1.118033988749895;
        basisvalues1[2] *= 1.5811388300841898;
        basisvalues1[1] *= 2.7386127875258306;
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 4 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 5 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 6 + 1] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 7 + 1] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 8 + 2] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 9 + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 10 + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 11 + 2] += coefficients3[0][r] * basisvalues1[r];
    }
}

void stiff3d_finite_element_3::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 12 * num_derivatives * 3, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505545, 0.0, 0.0, 0.0 },
            { 5.163977794943224, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t num_components[12] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= 0.8660254037844386;
        basisvalues1[3] *= 1.118033988749895;
        basisvalues1[2] *= 1.5811388300841898;
        basisvalues1[1] *= 2.7386127875258306;
        double aux_dmats0_basisvalues1[4] = {};
        for (std::size_t r = 0; r < num_derivatives; ++r)
        {
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4];
            // Initialize dmats.
            std::size_t comb = combinations[order - 1][r][0];
            for (std::size_t t = 0; t < 4; ++t)
                for (std::size_t u = 0; u < 4; ++u)
                    dmats[t][u] = dmats0[comb][t][u];
            // Looping derivative order to generate dmats.
            for (std::size_t s = 1; s < order; ++s)
            {
                // Store previous dmats matrix.
                double dmats_old[4][4];
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        dmats_old[t][u] = dmats[t][u];
                // Resetting dmats.
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        dmats[t][u] = 0.0;
                // Update dmats using an inner product.
                comb = combinations[order - 1][r][s];
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        for (std::size_t tu = 0; tu < 4; ++tu)
                            dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
            }
            for (std::size_t s = 0; s < 4; ++s)
                for (std::size_t t = 0; t < 4; ++t)
                    aux_dmats0_basisvalues1[s] += dmats[s][t] * basisvalues1[t];
        }
        // Loop over all dofs
        for (std::size_t i = 0; i < 12; ++i)
        {
            double derivatives[3];
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void stiff3d_finite_element_3::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 12 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t physical_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 12; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void stiff3d_finite_element_3::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff3d_finite_element_3::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void stiff3d_finite_element_3::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff3d_finite_element_3::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[9];
    for (unsigned int r = 0; r < 9; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double stiff3d_finite_element_3::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
}

void stiff3d_finite_element_3::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[4] = vals[1];
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[5] = vals[1];
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[6] = vals[1];
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    values[7] = vals[1];
    values[11] = vals[2];
}

void stiff3d_finite_element_3::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
}

void stiff3d_finite_element_3::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = coordinate_dofs[0];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 5] = coordinate_dofs[3];
    dof_coordinates[3 * 5 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 5 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 6] = coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 7] = coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 8] = coordinate_dofs[0];
    dof_coordinates[3 * 8 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 8 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 9] = coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 10] = coordinate_dofs[6];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 11] = coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = coordinate_dofs[11];
}

void stiff3d_finite_element_3::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[36] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 36, reference_dof_coordinates);
}

std::size_t stiff3d_finite_element_3::num_sub_elements() const
{
    return 3;
}

ufc::finite_element * stiff3d_finite_element_3::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff3d_finite_element_2();
    case 1:
        return new stiff3d_finite_element_2();
    case 2:
        return new stiff3d_finite_element_2();
    default:
        return nullptr;
    }
}

ufc::finite_element * stiff3d_finite_element_3::create() const
{
    return new stiff3d_finite_element_3();
}


stiff3d_finite_element_4::stiff3d_finite_element_4() : ufc::finite_element()
{
    // Do nothing
}

stiff3d_finite_element_4::~stiff3d_finite_element_4()
{
    // Do nothing
}

const char * stiff3d_finite_element_4::signature() const
{
    return "FiniteElement('Discontinuous Lagrange', tetrahedron, 0)";
}

ufc::shape stiff3d_finite_element_4::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t stiff3d_finite_element_4::topological_dimension() const
{
    return 3;
}

std::size_t stiff3d_finite_element_4::geometric_dimension() const
{
    return 3;
}

std::size_t stiff3d_finite_element_4::space_dimension() const
{
    return 1;
}

std::size_t stiff3d_finite_element_4::value_rank() const
{
    return 0;
}

std::size_t stiff3d_finite_element_4::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t stiff3d_finite_element_4::value_size() const
{
    return 1;
}

std::size_t stiff3d_finite_element_4::reference_value_rank() const
{
    return 0;
}

std::size_t stiff3d_finite_element_4::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t stiff3d_finite_element_4::reference_value_size() const
{
    return 1;
}

std::size_t stiff3d_finite_element_4::degree() const
{
    return 0;
}

const char * stiff3d_finite_element_4::family() const
{
    return "Discontinuous Lagrange";
}

void stiff3d_finite_element_4::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[ip] += coefficients0[0][0] * basisvalues0[0];
    }
}

void stiff3d_finite_element_4::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * num_derivatives, 0.0);
    if (order > 0)
        return;
}

void stiff3d_finite_element_4::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    std::fill_n(values, num_points, 0.0);
    const std::size_t reference_offsets[1] = {};
    const std::size_t physical_offsets[1] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 1; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[ip + d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[ip + d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void stiff3d_finite_element_4::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    
    // Compute subdeterminants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
}

void stiff3d_finite_element_4::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
}

void stiff3d_finite_element_4::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
    return ;
    }
    
}

void stiff3d_finite_element_4::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
}

double stiff3d_finite_element_4::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
      y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
      y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void stiff3d_finite_element_4::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
}

void stiff3d_finite_element_4::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
}

void stiff3d_finite_element_4::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
}

void stiff3d_finite_element_4::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[3] = { 0.25, 0.25, 0.25 };
    std::copy_n(dof_X, 3, reference_dof_coordinates);
}

std::size_t stiff3d_finite_element_4::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * stiff3d_finite_element_4::create_sub_element(std::size_t i) const
{
    return nullptr;
}

ufc::finite_element * stiff3d_finite_element_4::create() const
{
    return new stiff3d_finite_element_4();
}


stiff3d_finite_element_5::stiff3d_finite_element_5() : ufc::finite_element()
{
    // Do nothing
}

stiff3d_finite_element_5::~stiff3d_finite_element_5()
{
    // Do nothing
}

const char * stiff3d_finite_element_5::signature() const
{
    return "MixedElement(VectorElement(FiniteElement('Discontinuous Lagrange', tetrahedron, 1), dim=3), FiniteElement('Discontinuous Lagrange', tetrahedron, 0))";
}

ufc::shape stiff3d_finite_element_5::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t stiff3d_finite_element_5::topological_dimension() const
{
    return 3;
}

std::size_t stiff3d_finite_element_5::geometric_dimension() const
{
    return 3;
}

std::size_t stiff3d_finite_element_5::space_dimension() const
{
    return 13;
}

std::size_t stiff3d_finite_element_5::value_rank() const
{
    return 1;
}

std::size_t stiff3d_finite_element_5::value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 4 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t stiff3d_finite_element_5::value_size() const
{
    return 4;
}

std::size_t stiff3d_finite_element_5::reference_value_rank() const
{
    return 1;
}

std::size_t stiff3d_finite_element_5::reference_value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 4 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t stiff3d_finite_element_5::reference_value_size() const
{
    return 4;
}

std::size_t stiff3d_finite_element_5::degree() const
{
    return 1;
}

const char * stiff3d_finite_element_5::family() const
{
    return "Mixed";
}

void stiff3d_finite_element_5::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    static const double coefficients12[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points * 13 * 4; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= 0.8660254037844386;
        basisvalues1[3] *= 1.118033988749895;
        basisvalues1[2] *= 1.5811388300841898;
        basisvalues1[1] *= 2.7386127875258306;
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[13 * 4 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[13 * 4 * ip + 4] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[13 * 4 * ip + 4 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[13 * 4 * ip + 4 * 3] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[13 * 4 * ip + 4 * 4 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[13 * 4 * ip + 4 * 5 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[13 * 4 * ip + 4 * 6 + 1] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[13 * 4 * ip + 4 * 7 + 1] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[13 * 4 * ip + 4 * 8 + 2] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[13 * 4 * ip + 4 * 9 + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[13 * 4 * ip + 4 * 10 + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[13 * 4 * ip + 4 * 11 + 2] += coefficients3[0][r] * basisvalues1[r];
        reference_values[13 * 4 * ip + 4 * 12 + 3] += coefficients12[0][0] * basisvalues0[0];
    }
}

void stiff3d_finite_element_5::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 13 * num_derivatives * 4, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505545, 0.0, 0.0, 0.0 },
            { 5.163977794943224, 0.0, 0.0, 0.0 } } };
    alignas(32) static const double dmats12[3][1][1] = {};
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    static const double coefficients12[1][1] = { { 1.0 } };
    const std::size_t reference_offset[13] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3 };
    const std::size_t num_components[13] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= 0.8660254037844386;
        basisvalues1[3] *= 1.118033988749895;
        basisvalues1[2] *= 1.5811388300841898;
        basisvalues1[1] *= 2.7386127875258306;
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        double aux_dmats0_basisvalues1[4] = {};
        for (std::size_t r = 0; r < num_derivatives; ++r)
        {
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4];
            // Initialize dmats.
            std::size_t comb = combinations[order - 1][r][0];
            for (std::size_t t = 0; t < 4; ++t)
                for (std::size_t u = 0; u < 4; ++u)
                    dmats[t][u] = dmats0[comb][t][u];
            // Looping derivative order to generate dmats.
            for (std::size_t s = 1; s < order; ++s)
            {
                // Store previous dmats matrix.
                double dmats_old[4][4];
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        dmats_old[t][u] = dmats[t][u];
                // Resetting dmats.
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        dmats[t][u] = 0.0;
                // Update dmats using an inner product.
                comb = combinations[order - 1][r][s];
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        for (std::size_t tu = 0; tu < 4; ++tu)
                            dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
            }
            for (std::size_t s = 0; s < 4; ++s)
                for (std::size_t t = 0; t < 4; ++t)
                    aux_dmats0_basisvalues1[s] += dmats[s][t] * basisvalues1[t];
        }
        double aux_dmats12_basisvalues0[1] = {};
        for (std::size_t r = 0; r < num_derivatives; ++r)
        {
            // Declare derivative matrix (of polynomial basis).
            double dmats[1][1];
            // Initialize dmats.
            std::size_t comb = combinations[order - 1][r][0];
            for (std::size_t t = 0; t < 1; ++t)
                for (std::size_t u = 0; u < 1; ++u)
                    dmats[t][u] = dmats12[comb][t][u];
            // Looping derivative order to generate dmats.
            for (std::size_t s = 1; s < order; ++s)
            {
                // Store previous dmats matrix.
                double dmats_old[1][1];
                for (std::size_t t = 0; t < 1; ++t)
                    for (std::size_t u = 0; u < 1; ++u)
                        dmats_old[t][u] = dmats[t][u];
                // Resetting dmats.
                for (std::size_t t = 0; t < 1; ++t)
                    for (std::size_t u = 0; u < 1; ++u)
                        dmats[t][u] = 0.0;
                // Update dmats using an inner product.
                comb = combinations[order - 1][r][s];
                for (std::size_t t = 0; t < 1; ++t)
                    for (std::size_t u = 0; u < 1; ++u)
                        for (std::size_t tu = 0; tu < 1; ++tu)
                            dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
            }
            for (std::size_t s = 0; s < 1; ++s)
                for (std::size_t t = 0; t < 1; ++t)
                    aux_dmats12_basisvalues0[s] += dmats[s][t] * basisvalues0[t];
        }
        // Loop over all dofs
        for (std::size_t i = 0; i < 13; ++i)
        {
            double derivatives[3];
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 1; ++s)
                        derivatives[r] += coefficients12[0][s] * aux_dmats12_basisvalues0[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[13 * (num_derivatives * 4) * ip + num_derivatives * 4 * i + 4 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void stiff3d_finite_element_5::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 13 * num_derivatives * 4, 0.0);
    const std::size_t reference_offsets[13] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3 };
    const std::size_t physical_offsets[13] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 13; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[13 * (num_derivatives * 4) * ip + num_derivatives * 4 * d + 4 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[13 * (num_derivatives * 4) * ip + num_derivatives * 4 * d + 4 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void stiff3d_finite_element_5::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    values[3] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[1] = {0.0};
      
      // Declare helper variables
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      
      // Table(s) of coefficients
      static const double coefficients0[1] = \
      {1.0};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 1; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff3d_finite_element_5::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {0.0, 0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 13; r++)
    {
      evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 4; s++)
      {
        values[r*4 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void stiff3d_finite_element_5::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 4*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[1] = {0.0};
      
      // Declare helper variables
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      
      // Table(s) of coefficients
      static const double coefficients0[1] = \
      {1.0};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[1][1] = \
      {{0.0}};
      
      static const double dmats1[1][1] = \
      {{0.0}};
      
      static const double dmats2[1][1] = \
      {{0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[1][1] = \
      {{1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[1][1] = \
      {{1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 1; t++)
          {
            for (unsigned int u = 0; u < 1; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 1; t++)
          {
            for (unsigned int u = 0; u < 1; u++)
            {
              for (unsigned int tu = 0; tu < 1; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 1; t++)
          {
            for (unsigned int u = 0; u < 1; u++)
            {
              for (unsigned int tu = 0; tu < 1; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 1; t++)
          {
            for (unsigned int u = 0; u < 1; u++)
            {
              for (unsigned int tu = 0; tu < 1; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 1; s++)
        {
          for (unsigned int t = 0; t < 1; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff3d_finite_element_5::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 13; r++)
    {
      for (unsigned int s = 0; s < 4*num_derivatives; s++)
      {
        values[r*4*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[12];
    for (unsigned int r = 0; r < 12; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 13; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 4*num_derivatives; s++)
      {
        values[r*4*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double stiff3d_finite_element_5::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[4];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 12:
      {
        y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
      y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
      y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    }
    
    return 0.0;
}

void stiff3d_finite_element_5::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[4];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[4] = vals[1];
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[5] = vals[1];
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[6] = vals[1];
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    values[7] = vals[1];
    values[11] = vals[2];
    y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[12] = vals[3];
}

void stiff3d_finite_element_5::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[4] = dof_values[1];
    vertex_values[8] = dof_values[2];
    vertex_values[12] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[5] = dof_values[5];
    vertex_values[9] = dof_values[6];
    vertex_values[13] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[6] = dof_values[9];
    vertex_values[10] = dof_values[10];
    vertex_values[14] = dof_values[11];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[12];
    vertex_values[7] = dof_values[12];
    vertex_values[11] = dof_values[12];
    vertex_values[15] = dof_values[12];
}

void stiff3d_finite_element_5::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = coordinate_dofs[0];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 5] = coordinate_dofs[3];
    dof_coordinates[3 * 5 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 5 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 6] = coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 7] = coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 8] = coordinate_dofs[0];
    dof_coordinates[3 * 8 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 8 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 9] = coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 10] = coordinate_dofs[6];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 11] = coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 12] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 12 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 12 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
}

void stiff3d_finite_element_5::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[39] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.25, 0.25, 0.25 };
    std::copy_n(dof_X, 39, reference_dof_coordinates);
}

std::size_t stiff3d_finite_element_5::num_sub_elements() const
{
    return 2;
}

ufc::finite_element * stiff3d_finite_element_5::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff3d_finite_element_3();
    case 1:
        return new stiff3d_finite_element_4();
    default:
        return nullptr;
    }
}

ufc::finite_element * stiff3d_finite_element_5::create() const
{
    return new stiff3d_finite_element_5();
}


stiff3d_dofmap_0::stiff3d_dofmap_0() : ufc::dofmap()
{
    // Do nothing
}

stiff3d_dofmap_0::~stiff3d_dofmap_0()
{
    // Do nothing
}

const char * stiff3d_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 1)";
}

bool stiff3d_dofmap_0::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
}

std::size_t stiff3d_dofmap_0::topological_dimension() const
{
    return 3;
}

std::size_t stiff3d_dofmap_0::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0];
}

std::size_t stiff3d_dofmap_0::num_global_support_dofs() const
{
    return 0;
}

std::size_t stiff3d_dofmap_0::num_element_support_dofs() const
{
    return 4;
}

std::size_t stiff3d_dofmap_0::num_element_dofs() const
{
    return 4;
}

std::size_t stiff3d_dofmap_0::num_facet_dofs() const
{
    return 3;
}

std::size_t stiff3d_dofmap_0::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 1, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

std::size_t stiff3d_dofmap_0::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 1, 2, 3, 4 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

void stiff3d_dofmap_0::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
}

void stiff3d_dofmap_0::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        break;
    }
}

void stiff3d_dofmap_0::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    }
}

void stiff3d_dofmap_0::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            break;
        }
        break;
    }
}

std::size_t stiff3d_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * stiff3d_dofmap_0::create_sub_dofmap(std::size_t i) const
{
    return nullptr;
}

ufc::dofmap * stiff3d_dofmap_0::create() const
{
    return new stiff3d_dofmap_0();
}


stiff3d_dofmap_1::stiff3d_dofmap_1() : ufc::dofmap()
{
    // Do nothing
}

stiff3d_dofmap_1::~stiff3d_dofmap_1()
{
    // Do nothing
}

const char * stiff3d_dofmap_1::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
}

bool stiff3d_dofmap_1::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
}

std::size_t stiff3d_dofmap_1::topological_dimension() const
{
    return 3;
}

std::size_t stiff3d_dofmap_1::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 3 * num_global_entities[0];
}

std::size_t stiff3d_dofmap_1::num_global_support_dofs() const
{
    return 0;
}

std::size_t stiff3d_dofmap_1::num_element_support_dofs() const
{
    return 12;
}

std::size_t stiff3d_dofmap_1::num_element_dofs() const
{
    return 12;
}

std::size_t stiff3d_dofmap_1::num_facet_dofs() const
{
    return 9;
}

std::size_t stiff3d_dofmap_1::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 3, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

std::size_t stiff3d_dofmap_1::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 3, 6, 9, 12 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

void stiff3d_dofmap_1::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
}

void stiff3d_dofmap_1::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
        break;
    }
}

void stiff3d_dofmap_1::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    }
}

void stiff3d_dofmap_1::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            dofs[4] = 10;
            dofs[5] = 11;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            dofs[3] = 7;
            dofs[4] = 9;
            dofs[5] = 11;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 9;
            dofs[5] = 10;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 11;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 4;
            dofs[3] = 5;
            dofs[4] = 8;
            dofs[5] = 9;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 9;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 11;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 10;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
}

std::size_t stiff3d_dofmap_1::num_sub_dofmaps() const
{
    return 3;
}

ufc::dofmap * stiff3d_dofmap_1::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff3d_dofmap_0();
    case 1:
        return new stiff3d_dofmap_0();
    case 2:
        return new stiff3d_dofmap_0();
    default:
        return nullptr;
    }
}

ufc::dofmap * stiff3d_dofmap_1::create() const
{
    return new stiff3d_dofmap_1();
}


stiff3d_dofmap_2::stiff3d_dofmap_2() : ufc::dofmap()
{
    // Do nothing
}

stiff3d_dofmap_2::~stiff3d_dofmap_2()
{
    // Do nothing
}

const char * stiff3d_dofmap_2::signature() const
{
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', tetrahedron, 1)";
}

bool stiff3d_dofmap_2::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[4] = { false, false, false, true };
    if (d >= 4)
        return false;
    return return_values[d];
}

std::size_t stiff3d_dofmap_2::topological_dimension() const
{
    return 3;
}

std::size_t stiff3d_dofmap_2::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 4 * num_global_entities[3];
}

std::size_t stiff3d_dofmap_2::num_global_support_dofs() const
{
    return 0;
}

std::size_t stiff3d_dofmap_2::num_element_support_dofs() const
{
    return 4;
}

std::size_t stiff3d_dofmap_2::num_element_dofs() const
{
    return 4;
}

std::size_t stiff3d_dofmap_2::num_facet_dofs() const
{
    return 0;
}

std::size_t stiff3d_dofmap_2::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 0, 0, 0, 4 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

std::size_t stiff3d_dofmap_2::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 0, 0, 0, 4 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

void stiff3d_dofmap_2::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = 4 * entity_indices[3][0];
    dofs[1] = 4 * entity_indices[3][0] + 1;
    dofs[2] = 4 * entity_indices[3][0] + 2;
    dofs[3] = 4 * entity_indices[3][0] + 3;
}

void stiff3d_dofmap_2::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    // Do nothing
}

void stiff3d_dofmap_2::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            break;
        }
        break;
    }
}

void stiff3d_dofmap_2::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            break;
        }
        break;
    }
}

std::size_t stiff3d_dofmap_2::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * stiff3d_dofmap_2::create_sub_dofmap(std::size_t i) const
{
    return nullptr;
}

ufc::dofmap * stiff3d_dofmap_2::create() const
{
    return new stiff3d_dofmap_2();
}


stiff3d_dofmap_3::stiff3d_dofmap_3() : ufc::dofmap()
{
    // Do nothing
}

stiff3d_dofmap_3::~stiff3d_dofmap_3()
{
    // Do nothing
}

const char * stiff3d_dofmap_3::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Discontinuous Lagrange', tetrahedron, 1), dim=3)";
}

bool stiff3d_dofmap_3::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[4] = { false, false, false, true };
    if (d >= 4)
        return false;
    return return_values[d];
}

std::size_t stiff3d_dofmap_3::topological_dimension() const
{
    return 3;
}

std::size_t stiff3d_dofmap_3::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 12 * num_global_entities[3];
}

std::size_t stiff3d_dofmap_3::num_global_support_dofs() const
{
    return 0;
}

std::size_t stiff3d_dofmap_3::num_element_support_dofs() const
{
    return 12;
}

std::size_t stiff3d_dofmap_3::num_element_dofs() const
{
    return 12;
}

std::size_t stiff3d_dofmap_3::num_facet_dofs() const
{
    return 0;
}

std::size_t stiff3d_dofmap_3::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 0, 0, 0, 12 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

std::size_t stiff3d_dofmap_3::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 0, 0, 0, 12 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

void stiff3d_dofmap_3::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    std::size_t offset = 0;
    dofs[0] = offset + 4 * entity_indices[3][0];
    dofs[1] = offset + 4 * entity_indices[3][0] + 1;
    dofs[2] = offset + 4 * entity_indices[3][0] + 2;
    dofs[3] = offset + 4 * entity_indices[3][0] + 3;
    offset += 4 * num_global_entities[3];
    dofs[4] = offset + 4 * entity_indices[3][0];
    dofs[5] = offset + 4 * entity_indices[3][0] + 1;
    dofs[6] = offset + 4 * entity_indices[3][0] + 2;
    dofs[7] = offset + 4 * entity_indices[3][0] + 3;
    offset += 4 * num_global_entities[3];
    dofs[8] = offset + 4 * entity_indices[3][0];
    dofs[9] = offset + 4 * entity_indices[3][0] + 1;
    dofs[10] = offset + 4 * entity_indices[3][0] + 2;
    dofs[11] = offset + 4 * entity_indices[3][0] + 3;
    offset += 4 * num_global_entities[3];
}

void stiff3d_dofmap_3::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    // Do nothing
}

void stiff3d_dofmap_3::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
}

void stiff3d_dofmap_3::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
}

std::size_t stiff3d_dofmap_3::num_sub_dofmaps() const
{
    return 3;
}

ufc::dofmap * stiff3d_dofmap_3::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff3d_dofmap_2();
    case 1:
        return new stiff3d_dofmap_2();
    case 2:
        return new stiff3d_dofmap_2();
    default:
        return nullptr;
    }
}

ufc::dofmap * stiff3d_dofmap_3::create() const
{
    return new stiff3d_dofmap_3();
}


stiff3d_dofmap_4::stiff3d_dofmap_4() : ufc::dofmap()
{
    // Do nothing
}

stiff3d_dofmap_4::~stiff3d_dofmap_4()
{
    // Do nothing
}

const char * stiff3d_dofmap_4::signature() const
{
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', tetrahedron, 0)";
}

bool stiff3d_dofmap_4::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[4] = { false, false, false, true };
    if (d >= 4)
        return false;
    return return_values[d];
}

std::size_t stiff3d_dofmap_4::topological_dimension() const
{
    return 3;
}

std::size_t stiff3d_dofmap_4::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[3];
}

std::size_t stiff3d_dofmap_4::num_global_support_dofs() const
{
    return 0;
}

std::size_t stiff3d_dofmap_4::num_element_support_dofs() const
{
    return 1;
}

std::size_t stiff3d_dofmap_4::num_element_dofs() const
{
    return 1;
}

std::size_t stiff3d_dofmap_4::num_facet_dofs() const
{
    return 0;
}

std::size_t stiff3d_dofmap_4::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 0, 0, 0, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

std::size_t stiff3d_dofmap_4::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 0, 0, 0, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

void stiff3d_dofmap_4::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = entity_indices[3][0];
}

void stiff3d_dofmap_4::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    // Do nothing
}

void stiff3d_dofmap_4::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
}

void stiff3d_dofmap_4::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
}

std::size_t stiff3d_dofmap_4::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * stiff3d_dofmap_4::create_sub_dofmap(std::size_t i) const
{
    return nullptr;
}

ufc::dofmap * stiff3d_dofmap_4::create() const
{
    return new stiff3d_dofmap_4();
}


stiff3d_dofmap_5::stiff3d_dofmap_5() : ufc::dofmap()
{
    // Do nothing
}

stiff3d_dofmap_5::~stiff3d_dofmap_5()
{
    // Do nothing
}

const char * stiff3d_dofmap_5::signature() const
{
    return "FFC dofmap for MixedElement(VectorElement(FiniteElement('Discontinuous Lagrange', tetrahedron, 1), dim=3), FiniteElement('Discontinuous Lagrange', tetrahedron, 0))";
}

bool stiff3d_dofmap_5::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[4] = { false, false, false, true };
    if (d >= 4)
        return false;
    return return_values[d];
}

std::size_t stiff3d_dofmap_5::topological_dimension() const
{
    return 3;
}

std::size_t stiff3d_dofmap_5::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 13 * num_global_entities[3];
}

std::size_t stiff3d_dofmap_5::num_global_support_dofs() const
{
    return 0;
}

std::size_t stiff3d_dofmap_5::num_element_support_dofs() const
{
    return 13;
}

std::size_t stiff3d_dofmap_5::num_element_dofs() const
{
    return 13;
}

std::size_t stiff3d_dofmap_5::num_facet_dofs() const
{
    return 0;
}

std::size_t stiff3d_dofmap_5::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 0, 0, 0, 13 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

std::size_t stiff3d_dofmap_5::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 0, 0, 0, 13 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

void stiff3d_dofmap_5::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    std::size_t offset = 0;
    dofs[0] = offset + 4 * entity_indices[3][0];
    dofs[1] = offset + 4 * entity_indices[3][0] + 1;
    dofs[2] = offset + 4 * entity_indices[3][0] + 2;
    dofs[3] = offset + 4 * entity_indices[3][0] + 3;
    offset += 4 * num_global_entities[3];
    dofs[4] = offset + 4 * entity_indices[3][0];
    dofs[5] = offset + 4 * entity_indices[3][0] + 1;
    dofs[6] = offset + 4 * entity_indices[3][0] + 2;
    dofs[7] = offset + 4 * entity_indices[3][0] + 3;
    offset += 4 * num_global_entities[3];
    dofs[8] = offset + 4 * entity_indices[3][0];
    dofs[9] = offset + 4 * entity_indices[3][0] + 1;
    dofs[10] = offset + 4 * entity_indices[3][0] + 2;
    dofs[11] = offset + 4 * entity_indices[3][0] + 3;
    offset += 4 * num_global_entities[3];
    dofs[12] = offset + entity_indices[3][0];
    offset += num_global_entities[3];
}

void stiff3d_dofmap_5::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    // Do nothing
}

void stiff3d_dofmap_5::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            break;
        }
        break;
    }
}

void stiff3d_dofmap_5::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            break;
        }
        break;
    }
}

std::size_t stiff3d_dofmap_5::num_sub_dofmaps() const
{
    return 2;
}

ufc::dofmap * stiff3d_dofmap_5::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff3d_dofmap_3();
    case 1:
        return new stiff3d_dofmap_4();
    default:
        return nullptr;
    }
}

ufc::dofmap * stiff3d_dofmap_5::create() const
{
    return new stiff3d_dofmap_5();
}


stiff3d_coordinate_mapping_1::stiff3d_coordinate_mapping_1() : ufc::coordinate_mapping()
{
    // Do nothing
}

stiff3d_coordinate_mapping_1::~stiff3d_coordinate_mapping_1()
{
    // Do nothing
}

const char * stiff3d_coordinate_mapping_1::signature() const
{
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
}

ufc::coordinate_mapping * stiff3d_coordinate_mapping_1::create() const
{
    return new stiff3d_coordinate_mapping_1();
}

std::size_t stiff3d_coordinate_mapping_1::geometric_dimension() const
{
    return 3;
}

std::size_t stiff3d_coordinate_mapping_1::topological_dimension() const
{
    return 3;
}

ufc::shape stiff3d_coordinate_mapping_1::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

ufc::finite_element * stiff3d_coordinate_mapping_1::create_coordinate_finite_element() const
{
    return new stiff3d_finite_element_1();
}

ufc::dofmap * stiff3d_coordinate_mapping_1::create_coordinate_dofmap() const
{
    return new stiff3d_dofmap_1();
}

void stiff3d_coordinate_mapping_1::compute_physical_coordinates(
    double * x, std::size_t num_points,
    const double * X,
    const double * coordinate_dofs) const
{
    stiff3d_finite_element_0 xelement;
    double phi[4];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[3 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t d = 0; d < 4; ++d)
                x[3 * ip + i] += coordinate_dofs[3 * d + i] * phi[d];
    }
}

void stiff3d_coordinate_mapping_1::compute_reference_coordinates(
    double * X, std::size_t num_points,
    const double * x,
    const double * coordinate_dofs, int cell_orientation) const
{
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double J[9];
    double detJ[1];
    double K[9];
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
}

void stiff3d_coordinate_mapping_1::compute_reference_geometry(
    double * X, double * J, double * detJ, double * K, std::size_t num_points,
    const double * x,
    const double * coordinate_dofs, int cell_orientation) const
{
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
}

void stiff3d_coordinate_mapping_1::compute_jacobians(
    double * J, std::size_t num_points,
    const double * X,
    const double * coordinate_dofs) const
{
    stiff3d_finite_element_0 xelement;
    double dphi[12];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[3 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t j = 0; j < 3; ++j)
                for (std::size_t d = 0; d < 4; ++d)
                    J[3 * 3 * ip + 3 * i + j] += coordinate_dofs[3 * d + i] * dphi[3 * d + j];
    }
}

void stiff3d_coordinate_mapping_1::compute_jacobian_determinants(
    double * detJ, std::size_t num_points,
    const double * J,
    int cell_orientation) const
{
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[3 * 3 * ip] * (J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2 + 2] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) + J[3 * 3 * ip + 1] * (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 2]) + J[3 * 3 * ip + 2] * (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2]);
}

void stiff3d_coordinate_mapping_1::compute_jacobian_inverses(
    double * K, std::size_t num_points,
    const double * J, const double * detJ) const
{
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[3 * 3 * ip] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 1] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2 + 2]) / detJ[ip];
        K[3 * 3 * ip + 2] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 + 2] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3] = (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3]) / detJ[ip];
        K[3 * 3 * ip + 3 + 1] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2]) / detJ[ip];
        K[3 * 3 * ip + 3 + 2] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2] = (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 * 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 1] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 2] = (J[3 * 3 * ip] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3]) / detJ[ip];
    }
}

void stiff3d_coordinate_mapping_1::compute_geometry(
    double * x, double * J, double * detJ, double * K, std::size_t num_points,
    const double * X,
    const double * coordinate_dofs, int cell_orientation) const
{
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
}

void stiff3d_coordinate_mapping_1::compute_midpoint_geometry(
    double * x, double * J,
    const double * coordinate_dofs) const
{
    const double phi_Xm[4] = { 0.25000000000000006, 0.24999999999999997, 0.25, 0.25 };
    const double dphi_Xm[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t d = 0; d < 4; ++d)
            x[i] += coordinate_dofs[3 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t d = 0; d < 4; ++d)
                J[3 * i + j] += coordinate_dofs[3 * d + i] * dphi_Xm[j][d];
}


stiff3d_cell_integral_0_otherwise::stiff3d_cell_integral_0_otherwise() : ufc::cell_integral()
{

}

stiff3d_cell_integral_0_otherwise::~stiff3d_cell_integral_0_otherwise()
{

}

const std::vector<bool> & stiff3d_cell_integral_0_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({});
return enabled;
}

void stiff3d_cell_integral_0_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 1
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 1
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           1
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE29_C0_D001_Q1[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE29_C0_D001_Q1[0][0][0] + coordinate_dofs[7] * FE29_C0_D001_Q1[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE29_C0_D001_Q1[0][0][0] + coordinate_dofs[11] * FE29_C0_D001_Q1[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE29_C0_D001_Q1[0][0][0] + coordinate_dofs[10] * FE29_C0_D001_Q1[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE29_C0_D001_Q1[0][0][0] + coordinate_dofs[8] * FE29_C0_D001_Q1[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE29_C0_D001_Q1[0][0][0] + coordinate_dofs[3] * FE29_C0_D001_Q1[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE29_C0_D001_Q1[0][0][0] + coordinate_dofs[6] * FE29_C0_D001_Q1[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE29_C0_D001_Q1[0][0][0] + coordinate_dofs[5] * FE29_C0_D001_Q1[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE29_C0_D001_Q1[0][0][0] + coordinate_dofs[4] * FE29_C0_D001_Q1[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE29_C0_D001_Q1[0][0][0] + coordinate_dofs[9] * FE29_C0_D001_Q1[0][0][1];
    alignas(32) double sp[62];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c2 * J_c7;
    sp[20] = J_c8 * (-1 * J_c1);
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c0 * J_c8;
    sp[24] = J_c6 * (-1 * J_c2);
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c1 * J_c6;
    sp[28] = J_c0 * J_c7;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = J_c1 * J_c5;
    sp[32] = J_c2 * J_c4;
    sp[33] = sp[31] + -1 * sp[32];
    sp[34] = sp[33] / sp[13];
    sp[35] = J_c2 * J_c3;
    sp[36] = J_c0 * J_c5;
    sp[37] = sp[35] + -1 * sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = J_c0 * J_c4;
    sp[40] = J_c1 * J_c3;
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] / sp[13];
    sp[43] = std::abs(sp[13]);
    sp[44] = sp[14] * sp[43];
    sp[45] = sp[17] * sp[43];
    sp[46] = sp[18] * sp[43];
    sp[47] = sp[22] * sp[43];
    sp[48] = sp[26] * sp[43];
    sp[49] = sp[30] * sp[43];
    sp[50] = sp[34] * sp[43];
    sp[51] = sp[38] * sp[43];
    sp[52] = sp[42] * sp[43];
    sp[53] = -1.0 * sp[14] * sp[43];
    sp[54] = -1.0 * sp[17] * sp[43];
    sp[55] = -1.0 * sp[18] * sp[43];
    sp[56] = -1.0 * sp[22] * sp[43];
    sp[57] = -1.0 * sp[26] * sp[43];
    sp[58] = -1.0 * sp[30] * sp[43];
    sp[59] = -1.0 * sp[34] * sp[43];
    sp[60] = -1.0 * sp[38] * sp[43];
    sp[61] = -1.0 * sp[42] * sp[43];
    std::fill(A, A + 12, 0.0);
    A[12] = -0.1666666666666667 * sp[53] + -0.1666666666666667 * sp[54] + -0.1666666666666667 * sp[55];
    std::fill(A + 13, A + 25, 0.0);
    A[25] = 0.1666666666666667 * sp[53];
    std::fill(A + 26, A + 38, 0.0);
    A[38] = 0.1666666666666667 * sp[54];
    std::fill(A + 39, A + 51, 0.0);
    A[51] = 0.1666666666666667 * sp[55];
    std::fill(A + 52, A + 64, 0.0);
    A[64] = -0.1666666666666667 * sp[56] + -0.1666666666666667 * sp[57] + -0.1666666666666667 * sp[58];
    std::fill(A + 65, A + 77, 0.0);
    A[77] = 0.1666666666666667 * sp[56];
    std::fill(A + 78, A + 90, 0.0);
    A[90] = 0.1666666666666667 * sp[57];
    std::fill(A + 91, A + 103, 0.0);
    A[103] = 0.1666666666666667 * sp[58];
    std::fill(A + 104, A + 116, 0.0);
    A[116] = -0.1666666666666667 * sp[59] + -0.1666666666666667 * sp[60] + -0.1666666666666667 * sp[61];
    std::fill(A + 117, A + 129, 0.0);
    A[129] = 0.1666666666666667 * sp[59];
    std::fill(A + 130, A + 142, 0.0);
    A[142] = 0.1666666666666667 * sp[60];
    std::fill(A + 143, A + 155, 0.0);
    A[155] = 0.1666666666666667 * sp[61];
    A[156] = -0.1666666666666667 * sp[44] + -0.1666666666666667 * sp[45] + -0.1666666666666667 * sp[46];
    A[157] = 0.1666666666666667 * sp[44];
    A[158] = 0.1666666666666667 * sp[45];
    A[159] = 0.1666666666666667 * sp[46];
    A[160] = -0.1666666666666667 * sp[47] + -0.1666666666666667 * sp[48] + -0.1666666666666667 * sp[49];
    A[161] = 0.1666666666666667 * sp[47];
    A[162] = 0.1666666666666667 * sp[48];
    A[163] = 0.1666666666666667 * sp[49];
    A[164] = -0.1666666666666667 * sp[50] + -0.1666666666666667 * sp[51] + -0.1666666666666667 * sp[52];
    A[165] = 0.1666666666666667 * sp[50];
    A[166] = 0.1666666666666667 * sp[51];
    A[167] = 0.1666666666666667 * sp[52];
    A[168] = 0.0;
}


stiff3d_interior_facet_integral_0_otherwise::stiff3d_interior_facet_integral_0_otherwise() : ufc::interior_facet_integral()
{

}

stiff3d_interior_facet_integral_0_otherwise::~stiff3d_interior_facet_integral_0_otherwise()
{

}

const std::vector<bool> & stiff3d_interior_facet_integral_0_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({});
return enabled;
}

void stiff3d_interior_facet_integral_0_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs_0,
                                    const double * coordinate_dofs_1,
                                    std::size_t facet_0,
                                    std::size_t facet_1,
                                    int cell_orientation_0,
                                    int cell_orientation_1) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 2
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 2
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           2
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE17_C0_D001_F_Q3[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double PI0[4][4][4][4] =
        { { { { 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.08333333333333334, 0.04166666666666667, 0.04166666666666666 },
              { 0.0, 0.04166666666666667, 0.08333333333333333, 0.04166666666666666 },
              { 0.0, 0.04166666666666666, 0.04166666666666666, 0.08333333333333331 } },
            { { 0.0, 0.0, 0.0, 0.0 },
              { 0.08333333333333334, 0.0, 0.04166666666666667, 0.04166666666666666 },
              { 0.04166666666666669, 0.0, 0.08333333333333333, 0.04166666666666666 },
              { 0.04166666666666669, 0.0, 0.04166666666666666, 0.08333333333333331 } },
            { { 0.0, 0.0, 0.0, 0.0 },
              { 0.08333333333333336, 0.04166666666666666, 0.0, 0.04166666666666666 },
              { 0.04166666666666669, 0.0833333333333333, 0.0, 0.04166666666666666 },
              { 0.04166666666666669, 0.04166666666666665, 0.0, 0.08333333333333331 } },
            { { 0.0, 0.0, 0.0, 0.0 },
              { 0.08333333333333336, 0.04166666666666665, 0.04166666666666666, 0.0 },
              { 0.04166666666666668, 0.08333333333333329, 0.04166666666666666, 0.0 },
              { 0.04166666666666668, 0.04166666666666664, 0.08333333333333331, 0.0 } } },
          { { { 0.0, 0.08333333333333334, 0.04166666666666669, 0.04166666666666669 },
              { 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.04166666666666667, 0.08333333333333333, 0.04166666666666666 },
              { 0.0, 0.04166666666666666, 0.04166666666666666, 0.08333333333333331 } },
            { { 0.08333333333333336, 0.0, 0.04166666666666669, 0.04166666666666669 },
              { 0.0, 0.0, 0.0, 0.0 },
              { 0.04166666666666669, 0.0, 0.08333333333333333, 0.04166666666666666 },
              { 0.04166666666666669, 0.0, 0.04166666666666666, 0.08333333333333331 } },
            { { 0.08333333333333337, 0.04166666666666668, 0.0, 0.04166666666666669 },
              { 0.0, 0.0, 0.0, 0.0 },
              { 0.04166666666666669, 0.0833333333333333, 0.0, 0.04166666666666666 },
              { 0.04166666666666669, 0.04166666666666665, 0.0, 0.08333333333333331 } },
            { { 0.08333333333333337, 0.04166666666666667, 0.04166666666666669, 0.0 },
              { 0.0, 0.0, 0.0, 0.0 },
              { 0.04166666666666668, 0.08333333333333329, 0.04166666666666666, 0.0 },
              { 0.04166666666666668, 0.04166666666666664, 0.08333333333333331, 0.0 } } },
          { { { 0.0, 0.08333333333333336, 0.04166666666666669, 0.04166666666666669 },
              { 0.0, 0.04166666666666666, 0.0833333333333333, 0.04166666666666665 },
              { 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.04166666666666666, 0.04166666666666666, 0.08333333333333331 } },
            { { 0.08333333333333337, 0.0, 0.04166666666666669, 0.04166666666666669 },
              { 0.04166666666666668, 0.0, 0.0833333333333333, 0.04166666666666665 },
              { 0.0, 0.0, 0.0, 0.0 },
              { 0.04166666666666669, 0.0, 0.04166666666666666, 0.08333333333333331 } },
            { { 0.08333333333333338, 0.04166666666666668, 0.0, 0.04166666666666669 },
              { 0.04166666666666668, 0.0833333333333333, 0.0, 0.04166666666666665 },
              { 0.0, 0.0, 0.0, 0.0 },
              { 0.04166666666666669, 0.04166666666666665, 0.0, 0.08333333333333331 } },
            { { 0.08333333333333338, 0.04166666666666666, 0.0416666666666667, 0.0 },
              { 0.04166666666666667, 0.08333333333333327, 0.04166666666666666, 0.0 },
              { 0.0, 0.0, 0.0, 0.0 },
              { 0.04166666666666668, 0.04166666666666664, 0.08333333333333331, 0.0 } } },
          { { { 0.0, 0.08333333333333336, 0.04166666666666668, 0.04166666666666668 },
              { 0.0, 0.04166666666666665, 0.08333333333333329, 0.04166666666666664 },
              { 0.0, 0.04166666666666666, 0.04166666666666666, 0.08333333333333331 },
              { 0.0, 0.0, 0.0, 0.0 } },
            { { 0.08333333333333337, 0.0, 0.04166666666666668, 0.04166666666666668 },
              { 0.04166666666666667, 0.0, 0.08333333333333329, 0.04166666666666664 },
              { 0.04166666666666669, 0.0, 0.04166666666666666, 0.08333333333333331 },
              { 0.0, 0.0, 0.0, 0.0 } },
            { { 0.08333333333333338, 0.04166666666666667, 0.0, 0.04166666666666668 },
              { 0.04166666666666666, 0.08333333333333327, 0.0, 0.04166666666666664 },
              { 0.0416666666666667, 0.04166666666666666, 0.0, 0.08333333333333331 },
              { 0.0, 0.0, 0.0, 0.0 } },
            { { 0.08333333333333338, 0.04166666666666666, 0.04166666666666668, 0.0 },
              { 0.04166666666666666, 0.08333333333333326, 0.04166666666666664, 0.0 },
              { 0.04166666666666668, 0.04166666666666664, 0.08333333333333333, 0.0 },
              { 0.0, 0.0, 0.0, 0.0 } } } };
    alignas(32) static const double PI1[4][4][4][1] =
        { { { { 0.0 },
              { 0.1666666666666667 },
              { 0.1666666666666667 },
              { 0.1666666666666666 } },
            { { 0.0 },
              { 0.1666666666666667 },
              { 0.1666666666666667 },
              { 0.1666666666666666 } },
            { { 0.0 },
              { 0.1666666666666667 },
              { 0.1666666666666667 },
              { 0.1666666666666666 } },
            { { 0.0 },
              { 0.1666666666666667 },
              { 0.1666666666666667 },
              { 0.1666666666666666 } } },
          { { { 0.1666666666666667 },
              { 0.0 },
              { 0.1666666666666667 },
              { 0.1666666666666666 } },
            { { 0.1666666666666667 },
              { 0.0 },
              { 0.1666666666666667 },
              { 0.1666666666666666 } },
            { { 0.1666666666666667 },
              { 0.0 },
              { 0.1666666666666667 },
              { 0.1666666666666666 } },
            { { 0.1666666666666667 },
              { 0.0 },
              { 0.1666666666666667 },
              { 0.1666666666666666 } } },
          { { { 0.1666666666666667 },
              { 0.1666666666666666 },
              { 0.0 },
              { 0.1666666666666666 } },
            { { 0.1666666666666667 },
              { 0.1666666666666666 },
              { 0.0 },
              { 0.1666666666666666 } },
            { { 0.1666666666666667 },
              { 0.1666666666666666 },
              { 0.0 },
              { 0.1666666666666666 } },
            { { 0.1666666666666667 },
              { 0.1666666666666666 },
              { 0.0 },
              { 0.1666666666666666 } } },
          { { { 0.1666666666666667 },
              { 0.1666666666666666 },
              { 0.1666666666666667 },
              { 0.0 } },
            { { 0.1666666666666667 },
              { 0.1666666666666666 },
              { 0.1666666666666667 },
              { 0.0 } },
            { { 0.1666666666666667 },
              { 0.1666666666666666 },
              { 0.1666666666666667 },
              { 0.0 } },
            { { 0.1666666666666667 },
              { 0.1666666666666666 },
              { 0.1666666666666667 },
              { 0.0 } } } };
    // Unstructured piecewise computations
    const double J_r0_c4 = coordinate_dofs_0[1] * FE17_C0_D001_F_Q3[0][0][0] + coordinate_dofs_0[7] * FE17_C0_D001_F_Q3[0][0][1];
    const double J_r0_c8 = coordinate_dofs_0[2] * FE17_C0_D001_F_Q3[0][0][0] + coordinate_dofs_0[11] * FE17_C0_D001_F_Q3[0][0][1];
    const double J_r0_c5 = coordinate_dofs_0[1] * FE17_C0_D001_F_Q3[0][0][0] + coordinate_dofs_0[10] * FE17_C0_D001_F_Q3[0][0][1];
    const double J_r0_c7 = coordinate_dofs_0[2] * FE17_C0_D001_F_Q3[0][0][0] + coordinate_dofs_0[8] * FE17_C0_D001_F_Q3[0][0][1];
    const double J_r0_c0 = coordinate_dofs_0[0] * FE17_C0_D001_F_Q3[0][0][0] + coordinate_dofs_0[3] * FE17_C0_D001_F_Q3[0][0][1];
    const double J_r0_c1 = coordinate_dofs_0[0] * FE17_C0_D001_F_Q3[0][0][0] + coordinate_dofs_0[6] * FE17_C0_D001_F_Q3[0][0][1];
    const double J_r0_c6 = coordinate_dofs_0[2] * FE17_C0_D001_F_Q3[0][0][0] + coordinate_dofs_0[5] * FE17_C0_D001_F_Q3[0][0][1];
    const double J_r0_c3 = coordinate_dofs_0[1] * FE17_C0_D001_F_Q3[0][0][0] + coordinate_dofs_0[4] * FE17_C0_D001_F_Q3[0][0][1];
    const double J_r0_c2 = coordinate_dofs_0[0] * FE17_C0_D001_F_Q3[0][0][0] + coordinate_dofs_0[9] * FE17_C0_D001_F_Q3[0][0][1];
    const double J_r1_c4 = coordinate_dofs_1[1] * FE17_C0_D001_F_Q3[0][0][0] + coordinate_dofs_1[7] * FE17_C0_D001_F_Q3[0][0][1];
    const double J_r1_c8 = coordinate_dofs_1[2] * FE17_C0_D001_F_Q3[0][0][0] + coordinate_dofs_1[11] * FE17_C0_D001_F_Q3[0][0][1];
    const double J_r1_c5 = coordinate_dofs_1[1] * FE17_C0_D001_F_Q3[0][0][0] + coordinate_dofs_1[10] * FE17_C0_D001_F_Q3[0][0][1];
    const double J_r1_c7 = coordinate_dofs_1[2] * FE17_C0_D001_F_Q3[0][0][0] + coordinate_dofs_1[8] * FE17_C0_D001_F_Q3[0][0][1];
    const double J_r1_c0 = coordinate_dofs_1[0] * FE17_C0_D001_F_Q3[0][0][0] + coordinate_dofs_1[3] * FE17_C0_D001_F_Q3[0][0][1];
    const double J_r1_c1 = coordinate_dofs_1[0] * FE17_C0_D001_F_Q3[0][0][0] + coordinate_dofs_1[6] * FE17_C0_D001_F_Q3[0][0][1];
    const double J_r1_c6 = coordinate_dofs_1[2] * FE17_C0_D001_F_Q3[0][0][0] + coordinate_dofs_1[5] * FE17_C0_D001_F_Q3[0][0][1];
    const double J_r1_c3 = coordinate_dofs_1[1] * FE17_C0_D001_F_Q3[0][0][0] + coordinate_dofs_1[4] * FE17_C0_D001_F_Q3[0][0][1];
    const double J_r1_c2 = coordinate_dofs_1[0] * FE17_C0_D001_F_Q3[0][0][0] + coordinate_dofs_1[9] * FE17_C0_D001_F_Q3[0][0][1];
    alignas(32) double sp[552];
    sp[0] = J_r0_c4 * J_r0_c8;
    sp[1] = J_r0_c5 * J_r0_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_r0_c0 * sp[2];
    sp[4] = J_r0_c5 * J_r0_c6;
    sp[5] = J_r0_c3 * J_r0_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_r0_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_r0_c3 * J_r0_c7;
    sp[10] = J_r0_c4 * J_r0_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_r0_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = tetrahedron_reference_facet_normals[facet_0][0] * sp[14];
    sp[16] = J_r0_c3 * (-1 * J_r0_c8);
    sp[17] = sp[4] + sp[16];
    sp[18] = sp[17] / sp[13];
    sp[19] = tetrahedron_reference_facet_normals[facet_0][1] * sp[18];
    sp[20] = sp[15] + sp[19];
    sp[21] = sp[11] / sp[13];
    sp[22] = tetrahedron_reference_facet_normals[facet_0][2] * sp[21];
    sp[23] = sp[20] + sp[22];
    sp[24] = sp[23] * sp[23];
    sp[25] = J_r0_c2 * J_r0_c7;
    sp[26] = J_r0_c8 * (-1 * J_r0_c1);
    sp[27] = sp[25] + sp[26];
    sp[28] = sp[27] / sp[13];
    sp[29] = tetrahedron_reference_facet_normals[facet_0][0] * sp[28];
    sp[30] = J_r0_c0 * J_r0_c8;
    sp[31] = J_r0_c6 * (-1 * J_r0_c2);
    sp[32] = sp[30] + sp[31];
    sp[33] = sp[32] / sp[13];
    sp[34] = tetrahedron_reference_facet_normals[facet_0][1] * sp[33];
    sp[35] = sp[29] + sp[34];
    sp[36] = J_r0_c1 * J_r0_c6;
    sp[37] = J_r0_c0 * J_r0_c7;
    sp[38] = sp[36] + -1 * sp[37];
    sp[39] = sp[38] / sp[13];
    sp[40] = tetrahedron_reference_facet_normals[facet_0][2] * sp[39];
    sp[41] = sp[35] + sp[40];
    sp[42] = sp[41] * sp[41];
    sp[43] = sp[24] + sp[42];
    sp[44] = J_r0_c1 * J_r0_c5;
    sp[45] = J_r0_c2 * J_r0_c4;
    sp[46] = sp[44] + -1 * sp[45];
    sp[47] = sp[46] / sp[13];
    sp[48] = tetrahedron_reference_facet_normals[facet_0][0] * sp[47];
    sp[49] = J_r0_c2 * J_r0_c3;
    sp[50] = J_r0_c0 * J_r0_c5;
    sp[51] = sp[49] + -1 * sp[50];
    sp[52] = sp[51] / sp[13];
    sp[53] = tetrahedron_reference_facet_normals[facet_0][1] * sp[52];
    sp[54] = sp[48] + sp[53];
    sp[55] = J_r0_c0 * J_r0_c4;
    sp[56] = J_r0_c1 * J_r0_c3;
    sp[57] = sp[55] + -1 * sp[56];
    sp[58] = sp[57] / sp[13];
    sp[59] = tetrahedron_reference_facet_normals[facet_0][2] * sp[58];
    sp[60] = sp[54] + sp[59];
    sp[61] = sp[60] * sp[60];
    sp[62] = sp[43] + sp[61];
    sp[63] = std::sqrt(sp[62]);
    sp[64] = sp[23] / sp[63];
    sp[65] = sp[41] / sp[63];
    sp[66] = sp[60] / sp[63];
    sp[67] = J_r1_c4 * J_r1_c8;
    sp[68] = J_r1_c5 * J_r1_c7;
    sp[69] = sp[67] + -1 * sp[68];
    sp[70] = J_r1_c0 * sp[69];
    sp[71] = J_r1_c5 * J_r1_c6;
    sp[72] = J_r1_c3 * J_r1_c8;
    sp[73] = sp[71] + -1 * sp[72];
    sp[74] = J_r1_c1 * sp[73];
    sp[75] = sp[70] + sp[74];
    sp[76] = J_r1_c3 * J_r1_c7;
    sp[77] = J_r1_c4 * J_r1_c6;
    sp[78] = sp[76] + -1 * sp[77];
    sp[79] = J_r1_c2 * sp[78];
    sp[80] = sp[75] + sp[79];
    sp[81] = sp[69] / sp[80];
    sp[82] = tetrahedron_reference_facet_normals[facet_1][0] * sp[81];
    sp[83] = J_r1_c3 * (-1 * J_r1_c8);
    sp[84] = sp[71] + sp[83];
    sp[85] = sp[84] / sp[80];
    sp[86] = tetrahedron_reference_facet_normals[facet_1][1] * sp[85];
    sp[87] = sp[82] + sp[86];
    sp[88] = sp[78] / sp[80];
    sp[89] = tetrahedron_reference_facet_normals[facet_1][2] * sp[88];
    sp[90] = sp[87] + sp[89];
    sp[91] = sp[90] * sp[90];
    sp[92] = J_r1_c2 * J_r1_c7;
    sp[93] = J_r1_c8 * (-1 * J_r1_c1);
    sp[94] = sp[92] + sp[93];
    sp[95] = sp[94] / sp[80];
    sp[96] = tetrahedron_reference_facet_normals[facet_1][0] * sp[95];
    sp[97] = J_r1_c0 * J_r1_c8;
    sp[98] = J_r1_c6 * (-1 * J_r1_c2);
    sp[99] = sp[97] + sp[98];
    sp[100] = sp[99] / sp[80];
    sp[101] = tetrahedron_reference_facet_normals[facet_1][1] * sp[100];
    sp[102] = sp[96] + sp[101];
    sp[103] = J_r1_c1 * J_r1_c6;
    sp[104] = J_r1_c0 * J_r1_c7;
    sp[105] = sp[103] + -1 * sp[104];
    sp[106] = sp[105] / sp[80];
    sp[107] = tetrahedron_reference_facet_normals[facet_1][2] * sp[106];
    sp[108] = sp[102] + sp[107];
    sp[109] = sp[108] * sp[108];
    sp[110] = sp[91] + sp[109];
    sp[111] = J_r1_c1 * J_r1_c5;
    sp[112] = J_r1_c2 * J_r1_c4;
    sp[113] = sp[111] + -1 * sp[112];
    sp[114] = sp[113] / sp[80];
    sp[115] = tetrahedron_reference_facet_normals[facet_1][0] * sp[114];
    sp[116] = J_r1_c2 * J_r1_c3;
    sp[117] = J_r1_c0 * J_r1_c5;
    sp[118] = sp[116] + -1 * sp[117];
    sp[119] = sp[118] / sp[80];
    sp[120] = tetrahedron_reference_facet_normals[facet_1][1] * sp[119];
    sp[121] = sp[115] + sp[120];
    sp[122] = J_r1_c0 * J_r1_c4;
    sp[123] = J_r1_c1 * J_r1_c3;
    sp[124] = sp[122] + -1 * sp[123];
    sp[125] = sp[124] / sp[80];
    sp[126] = tetrahedron_reference_facet_normals[facet_1][2] * sp[125];
    sp[127] = sp[121] + sp[126];
    sp[128] = sp[127] * sp[127];
    sp[129] = sp[110] + sp[128];
    sp[130] = std::sqrt(sp[129]);
    sp[131] = sp[90] / sp[130];
    sp[132] = sp[108] / sp[130];
    sp[133] = sp[127] / sp[130];
    sp[134] = J_r0_c0 * tetrahedron_reference_edge_vectors[0][0];
    sp[135] = J_r0_c1 * tetrahedron_reference_edge_vectors[0][1];
    sp[136] = sp[134] + sp[135];
    sp[137] = J_r0_c2 * tetrahedron_reference_edge_vectors[0][2];
    sp[138] = sp[136] + sp[137];
    sp[139] = sp[138] * sp[138];
    sp[140] = tetrahedron_reference_edge_vectors[0][0] * J_r0_c3;
    sp[141] = tetrahedron_reference_edge_vectors[0][1] * J_r0_c4;
    sp[142] = sp[140] + sp[141];
    sp[143] = tetrahedron_reference_edge_vectors[0][2] * J_r0_c5;
    sp[144] = sp[142] + sp[143];
    sp[145] = sp[144] * sp[144];
    sp[146] = sp[139] + sp[145];
    sp[147] = tetrahedron_reference_edge_vectors[0][0] * J_r0_c6;
    sp[148] = tetrahedron_reference_edge_vectors[0][1] * J_r0_c7;
    sp[149] = sp[147] + sp[148];
    sp[150] = tetrahedron_reference_edge_vectors[0][2] * J_r0_c8;
    sp[151] = sp[149] + sp[150];
    sp[152] = sp[151] * sp[151];
    sp[153] = sp[146] + sp[152];
    sp[154] = std::sqrt(sp[153]);
    sp[155] = J_r0_c0 * tetrahedron_reference_edge_vectors[5][0];
    sp[156] = J_r0_c1 * tetrahedron_reference_edge_vectors[5][1];
    sp[157] = sp[155] + sp[156];
    sp[158] = J_r0_c2 * tetrahedron_reference_edge_vectors[5][2];
    sp[159] = sp[157] + sp[158];
    sp[160] = sp[159] * sp[159];
    sp[161] = J_r0_c3 * tetrahedron_reference_edge_vectors[5][0];
    sp[162] = J_r0_c4 * tetrahedron_reference_edge_vectors[5][1];
    sp[163] = sp[161] + sp[162];
    sp[164] = J_r0_c5 * tetrahedron_reference_edge_vectors[5][2];
    sp[165] = sp[163] + sp[164];
    sp[166] = sp[165] * sp[165];
    sp[167] = sp[160] + sp[166];
    sp[168] = J_r0_c6 * tetrahedron_reference_edge_vectors[5][0];
    sp[169] = J_r0_c7 * tetrahedron_reference_edge_vectors[5][1];
    sp[170] = sp[168] + sp[169];
    sp[171] = J_r0_c8 * tetrahedron_reference_edge_vectors[5][2];
    sp[172] = sp[170] + sp[171];
    sp[173] = sp[172] * sp[172];
    sp[174] = sp[167] + sp[173];
    sp[175] = std::sqrt(sp[174]);
    sp[176] = sp[154] * sp[175];
    sp[177] = J_r0_c0 * tetrahedron_reference_edge_vectors[2][0];
    sp[178] = J_r0_c1 * tetrahedron_reference_edge_vectors[2][1];
    sp[179] = sp[177] + sp[178];
    sp[180] = J_r0_c2 * tetrahedron_reference_edge_vectors[2][2];
    sp[181] = sp[179] + sp[180];
    sp[182] = sp[181] * sp[181];
    sp[183] = J_r0_c3 * tetrahedron_reference_edge_vectors[2][0];
    sp[184] = J_r0_c4 * tetrahedron_reference_edge_vectors[2][1];
    sp[185] = sp[183] + sp[184];
    sp[186] = J_r0_c5 * tetrahedron_reference_edge_vectors[2][2];
    sp[187] = sp[185] + sp[186];
    sp[188] = sp[187] * sp[187];
    sp[189] = sp[182] + sp[188];
    sp[190] = J_r0_c6 * tetrahedron_reference_edge_vectors[2][0];
    sp[191] = J_r0_c7 * tetrahedron_reference_edge_vectors[2][1];
    sp[192] = sp[190] + sp[191];
    sp[193] = J_r0_c8 * tetrahedron_reference_edge_vectors[2][2];
    sp[194] = sp[192] + sp[193];
    sp[195] = sp[194] * sp[194];
    sp[196] = sp[189] + sp[195];
    sp[197] = std::sqrt(sp[196]);
    sp[198] = J_r0_c0 * tetrahedron_reference_edge_vectors[3][0];
    sp[199] = J_r0_c1 * tetrahedron_reference_edge_vectors[3][1];
    sp[200] = sp[198] + sp[199];
    sp[201] = J_r0_c2 * tetrahedron_reference_edge_vectors[3][2];
    sp[202] = sp[200] + sp[201];
    sp[203] = sp[202] * sp[202];
    sp[204] = J_r0_c3 * tetrahedron_reference_edge_vectors[3][0];
    sp[205] = J_r0_c4 * tetrahedron_reference_edge_vectors[3][1];
    sp[206] = sp[204] + sp[205];
    sp[207] = J_r0_c5 * tetrahedron_reference_edge_vectors[3][2];
    sp[208] = sp[206] + sp[207];
    sp[209] = sp[208] * sp[208];
    sp[210] = sp[203] + sp[209];
    sp[211] = J_r0_c6 * tetrahedron_reference_edge_vectors[3][0];
    sp[212] = J_r0_c7 * tetrahedron_reference_edge_vectors[3][1];
    sp[213] = sp[211] + sp[212];
    sp[214] = J_r0_c8 * tetrahedron_reference_edge_vectors[3][2];
    sp[215] = sp[213] + sp[214];
    sp[216] = sp[215] * sp[215];
    sp[217] = sp[210] + sp[216];
    sp[218] = std::sqrt(sp[217]);
    sp[219] = sp[197] * sp[218];
    sp[220] = J_r0_c0 * tetrahedron_reference_edge_vectors[1][0];
    sp[221] = J_r0_c1 * tetrahedron_reference_edge_vectors[1][1];
    sp[222] = sp[220] + sp[221];
    sp[223] = J_r0_c2 * tetrahedron_reference_edge_vectors[1][2];
    sp[224] = sp[222] + sp[223];
    sp[225] = sp[224] * sp[224];
    sp[226] = J_r0_c3 * tetrahedron_reference_edge_vectors[1][0];
    sp[227] = J_r0_c4 * tetrahedron_reference_edge_vectors[1][1];
    sp[228] = sp[226] + sp[227];
    sp[229] = J_r0_c5 * tetrahedron_reference_edge_vectors[1][2];
    sp[230] = sp[228] + sp[229];
    sp[231] = sp[230] * sp[230];
    sp[232] = sp[225] + sp[231];
    sp[233] = tetrahedron_reference_edge_vectors[1][0] * J_r0_c6;
    sp[234] = tetrahedron_reference_edge_vectors[1][1] * J_r0_c7;
    sp[235] = sp[233] + sp[234];
    sp[236] = tetrahedron_reference_edge_vectors[1][2] * J_r0_c8;
    sp[237] = sp[235] + sp[236];
    sp[238] = sp[237] * sp[237];
    sp[239] = sp[232] + sp[238];
    sp[240] = std::sqrt(sp[239]);
    sp[241] = J_r0_c0 * tetrahedron_reference_edge_vectors[4][0];
    sp[242] = J_r0_c1 * tetrahedron_reference_edge_vectors[4][1];
    sp[243] = sp[241] + sp[242];
    sp[244] = J_r0_c2 * tetrahedron_reference_edge_vectors[4][2];
    sp[245] = sp[243] + sp[244];
    sp[246] = sp[245] * sp[245];
    sp[247] = J_r0_c3 * tetrahedron_reference_edge_vectors[4][0];
    sp[248] = J_r0_c4 * tetrahedron_reference_edge_vectors[4][1];
    sp[249] = sp[247] + sp[248];
    sp[250] = J_r0_c5 * tetrahedron_reference_edge_vectors[4][2];
    sp[251] = sp[249] + sp[250];
    sp[252] = sp[251] * sp[251];
    sp[253] = sp[246] + sp[252];
    sp[254] = J_r0_c6 * tetrahedron_reference_edge_vectors[4][0];
    sp[255] = J_r0_c7 * tetrahedron_reference_edge_vectors[4][1];
    sp[256] = sp[254] + sp[255];
    sp[257] = J_r0_c8 * tetrahedron_reference_edge_vectors[4][2];
    sp[258] = sp[256] + sp[257];
    sp[259] = sp[258] * sp[258];
    sp[260] = sp[253] + sp[259];
    sp[261] = std::sqrt(sp[260]);
    sp[262] = sp[240] * sp[261];
    sp[263] = sp[219] + sp[262];
    sp[264] = sp[263] + sp[176];
    sp[265] = -1 * sp[176] + sp[264] / 2;
    sp[266] = -1 * sp[262] + sp[264] / 2;
    sp[267] = -1 * sp[219] + sp[264] / 2;
    sp[268] = sp[267] * (sp[264] / 2);
    sp[269] = sp[266] * sp[268];
    sp[270] = sp[265] * sp[269];
    sp[271] = std::sqrt(sp[270]);
    sp[272] = tetrahedron_reference_cell_volume * sp[13];
    sp[273] = std::abs(sp[272]);
    sp[274] = sp[271] / (6.0 * sp[273]);
    sp[275] = J_r1_c0 * tetrahedron_reference_edge_vectors[0][0];
    sp[276] = J_r1_c1 * tetrahedron_reference_edge_vectors[0][1];
    sp[277] = sp[275] + sp[276];
    sp[278] = J_r1_c2 * tetrahedron_reference_edge_vectors[0][2];
    sp[279] = sp[277] + sp[278];
    sp[280] = sp[279] * sp[279];
    sp[281] = tetrahedron_reference_edge_vectors[0][0] * J_r1_c3;
    sp[282] = tetrahedron_reference_edge_vectors[0][1] * J_r1_c4;
    sp[283] = sp[281] + sp[282];
    sp[284] = tetrahedron_reference_edge_vectors[0][2] * J_r1_c5;
    sp[285] = sp[283] + sp[284];
    sp[286] = sp[285] * sp[285];
    sp[287] = sp[280] + sp[286];
    sp[288] = tetrahedron_reference_edge_vectors[0][0] * J_r1_c6;
    sp[289] = tetrahedron_reference_edge_vectors[0][1] * J_r1_c7;
    sp[290] = sp[288] + sp[289];
    sp[291] = tetrahedron_reference_edge_vectors[0][2] * J_r1_c8;
    sp[292] = sp[290] + sp[291];
    sp[293] = sp[292] * sp[292];
    sp[294] = sp[287] + sp[293];
    sp[295] = std::sqrt(sp[294]);
    sp[296] = J_r1_c0 * tetrahedron_reference_edge_vectors[5][0];
    sp[297] = J_r1_c1 * tetrahedron_reference_edge_vectors[5][1];
    sp[298] = sp[296] + sp[297];
    sp[299] = J_r1_c2 * tetrahedron_reference_edge_vectors[5][2];
    sp[300] = sp[298] + sp[299];
    sp[301] = sp[300] * sp[300];
    sp[302] = J_r1_c3 * tetrahedron_reference_edge_vectors[5][0];
    sp[303] = J_r1_c4 * tetrahedron_reference_edge_vectors[5][1];
    sp[304] = sp[302] + sp[303];
    sp[305] = J_r1_c5 * tetrahedron_reference_edge_vectors[5][2];
    sp[306] = sp[304] + sp[305];
    sp[307] = sp[306] * sp[306];
    sp[308] = sp[301] + sp[307];
    sp[309] = J_r1_c6 * tetrahedron_reference_edge_vectors[5][0];
    sp[310] = J_r1_c7 * tetrahedron_reference_edge_vectors[5][1];
    sp[311] = sp[309] + sp[310];
    sp[312] = J_r1_c8 * tetrahedron_reference_edge_vectors[5][2];
    sp[313] = sp[311] + sp[312];
    sp[314] = sp[313] * sp[313];
    sp[315] = sp[308] + sp[314];
    sp[316] = std::sqrt(sp[315]);
    sp[317] = sp[295] * sp[316];
    sp[318] = J_r1_c0 * tetrahedron_reference_edge_vectors[2][0];
    sp[319] = J_r1_c1 * tetrahedron_reference_edge_vectors[2][1];
    sp[320] = sp[318] + sp[319];
    sp[321] = J_r1_c2 * tetrahedron_reference_edge_vectors[2][2];
    sp[322] = sp[320] + sp[321];
    sp[323] = sp[322] * sp[322];
    sp[324] = J_r1_c3 * tetrahedron_reference_edge_vectors[2][0];
    sp[325] = J_r1_c4 * tetrahedron_reference_edge_vectors[2][1];
    sp[326] = sp[324] + sp[325];
    sp[327] = J_r1_c5 * tetrahedron_reference_edge_vectors[2][2];
    sp[328] = sp[326] + sp[327];
    sp[329] = sp[328] * sp[328];
    sp[330] = sp[323] + sp[329];
    sp[331] = J_r1_c6 * tetrahedron_reference_edge_vectors[2][0];
    sp[332] = J_r1_c7 * tetrahedron_reference_edge_vectors[2][1];
    sp[333] = sp[331] + sp[332];
    sp[334] = J_r1_c8 * tetrahedron_reference_edge_vectors[2][2];
    sp[335] = sp[333] + sp[334];
    sp[336] = sp[335] * sp[335];
    sp[337] = sp[330] + sp[336];
    sp[338] = std::sqrt(sp[337]);
    sp[339] = J_r1_c0 * tetrahedron_reference_edge_vectors[3][0];
    sp[340] = J_r1_c1 * tetrahedron_reference_edge_vectors[3][1];
    sp[341] = sp[339] + sp[340];
    sp[342] = J_r1_c2 * tetrahedron_reference_edge_vectors[3][2];
    sp[343] = sp[341] + sp[342];
    sp[344] = sp[343] * sp[343];
    sp[345] = J_r1_c3 * tetrahedron_reference_edge_vectors[3][0];
    sp[346] = J_r1_c4 * tetrahedron_reference_edge_vectors[3][1];
    sp[347] = sp[345] + sp[346];
    sp[348] = J_r1_c5 * tetrahedron_reference_edge_vectors[3][2];
    sp[349] = sp[347] + sp[348];
    sp[350] = sp[349] * sp[349];
    sp[351] = sp[344] + sp[350];
    sp[352] = J_r1_c6 * tetrahedron_reference_edge_vectors[3][0];
    sp[353] = J_r1_c7 * tetrahedron_reference_edge_vectors[3][1];
    sp[354] = sp[352] + sp[353];
    sp[355] = J_r1_c8 * tetrahedron_reference_edge_vectors[3][2];
    sp[356] = sp[354] + sp[355];
    sp[357] = sp[356] * sp[356];
    sp[358] = sp[351] + sp[357];
    sp[359] = std::sqrt(sp[358]);
    sp[360] = sp[338] * sp[359];
    sp[361] = J_r1_c0 * tetrahedron_reference_edge_vectors[1][0];
    sp[362] = J_r1_c1 * tetrahedron_reference_edge_vectors[1][1];
    sp[363] = sp[361] + sp[362];
    sp[364] = J_r1_c2 * tetrahedron_reference_edge_vectors[1][2];
    sp[365] = sp[363] + sp[364];
    sp[366] = sp[365] * sp[365];
    sp[367] = J_r1_c3 * tetrahedron_reference_edge_vectors[1][0];
    sp[368] = J_r1_c4 * tetrahedron_reference_edge_vectors[1][1];
    sp[369] = sp[367] + sp[368];
    sp[370] = J_r1_c5 * tetrahedron_reference_edge_vectors[1][2];
    sp[371] = sp[369] + sp[370];
    sp[372] = sp[371] * sp[371];
    sp[373] = sp[366] + sp[372];
    sp[374] = tetrahedron_reference_edge_vectors[1][0] * J_r1_c6;
    sp[375] = tetrahedron_reference_edge_vectors[1][1] * J_r1_c7;
    sp[376] = sp[374] + sp[375];
    sp[377] = tetrahedron_reference_edge_vectors[1][2] * J_r1_c8;
    sp[378] = sp[376] + sp[377];
    sp[379] = sp[378] * sp[378];
    sp[380] = sp[373] + sp[379];
    sp[381] = std::sqrt(sp[380]);
    sp[382] = J_r1_c0 * tetrahedron_reference_edge_vectors[4][0];
    sp[383] = J_r1_c1 * tetrahedron_reference_edge_vectors[4][1];
    sp[384] = sp[382] + sp[383];
    sp[385] = J_r1_c2 * tetrahedron_reference_edge_vectors[4][2];
    sp[386] = sp[384] + sp[385];
    sp[387] = sp[386] * sp[386];
    sp[388] = J_r1_c3 * tetrahedron_reference_edge_vectors[4][0];
    sp[389] = J_r1_c4 * tetrahedron_reference_edge_vectors[4][1];
    sp[390] = sp[388] + sp[389];
    sp[391] = J_r1_c5 * tetrahedron_reference_edge_vectors[4][2];
    sp[392] = sp[390] + sp[391];
    sp[393] = sp[392] * sp[392];
    sp[394] = sp[387] + sp[393];
    sp[395] = J_r1_c6 * tetrahedron_reference_edge_vectors[4][0];
    sp[396] = J_r1_c7 * tetrahedron_reference_edge_vectors[4][1];
    sp[397] = sp[395] + sp[396];
    sp[398] = J_r1_c8 * tetrahedron_reference_edge_vectors[4][2];
    sp[399] = sp[397] + sp[398];
    sp[400] = sp[399] * sp[399];
    sp[401] = sp[394] + sp[400];
    sp[402] = std::sqrt(sp[401]);
    sp[403] = sp[381] * sp[402];
    sp[404] = sp[360] + sp[403];
    sp[405] = sp[404] + sp[317];
    sp[406] = -1 * sp[317] + sp[405] / 2;
    sp[407] = -1 * sp[403] + sp[405] / 2;
    sp[408] = -1 * sp[360] + sp[405] / 2;
    sp[409] = sp[408] * (sp[405] / 2);
    sp[410] = sp[407] * sp[409];
    sp[411] = sp[406] * sp[410];
    sp[412] = std::sqrt(sp[411]);
    sp[413] = tetrahedron_reference_cell_volume * sp[80];
    sp[414] = std::abs(sp[413]);
    sp[415] = sp[412] / (6.0 * sp[414]);
    sp[416] = 2.0 * sp[274] + 2.0 * sp[415];
    sp[417] = 1.0 / (sp[416] / 2) * sp[64];
    sp[418] = 1.0 / (sp[416] / 2) * sp[65];
    sp[419] = 1.0 / (sp[416] / 2) * sp[66];
    sp[420] = 1.0 / (sp[416] / 2) * sp[131];
    sp[421] = 1.0 / (sp[416] / 2) * sp[132];
    sp[422] = 1.0 / (sp[416] / 2) * sp[133];
    sp[423] = sp[417] * sp[64];
    sp[424] = sp[418] * sp[64];
    sp[425] = sp[419] * sp[64];
    sp[426] = sp[420] * sp[64];
    sp[427] = sp[421] * sp[64];
    sp[428] = sp[422] * sp[64];
    sp[429] = sp[417] * sp[65];
    sp[430] = sp[418] * sp[65];
    sp[431] = sp[419] * sp[65];
    sp[432] = sp[420] * sp[65];
    sp[433] = sp[421] * sp[65];
    sp[434] = sp[422] * sp[65];
    sp[435] = sp[417] * sp[66];
    sp[436] = sp[418] * sp[66];
    sp[437] = sp[419] * sp[66];
    sp[438] = sp[420] * sp[66];
    sp[439] = sp[421] * sp[66];
    sp[440] = sp[422] * sp[66];
    sp[441] = sp[417] * sp[131];
    sp[442] = sp[418] * sp[131];
    sp[443] = sp[419] * sp[131];
    sp[444] = sp[420] * sp[131];
    sp[445] = sp[421] * sp[131];
    sp[446] = sp[422] * sp[131];
    sp[447] = sp[417] * sp[132];
    sp[448] = sp[418] * sp[132];
    sp[449] = sp[419] * sp[132];
    sp[450] = sp[420] * sp[132];
    sp[451] = sp[421] * sp[132];
    sp[452] = sp[422] * sp[132];
    sp[453] = sp[417] * sp[133];
    sp[454] = sp[418] * sp[133];
    sp[455] = sp[419] * sp[133];
    sp[456] = sp[420] * sp[133];
    sp[457] = sp[421] * sp[133];
    sp[458] = sp[422] * sp[133];
    sp[459] = tetrahedron_reference_facet_jacobian[facet_0][0][0] * J_r0_c3;
    sp[460] = tetrahedron_reference_facet_jacobian[facet_0][1][0] * J_r0_c4;
    sp[461] = sp[459] + sp[460];
    sp[462] = J_r0_c5 * tetrahedron_reference_facet_jacobian[facet_0][2][0];
    sp[463] = sp[461] + sp[462];
    sp[464] = tetrahedron_reference_facet_jacobian[facet_0][0][1] * J_r0_c6;
    sp[465] = tetrahedron_reference_facet_jacobian[facet_0][1][1] * J_r0_c7;
    sp[466] = sp[464] + sp[465];
    sp[467] = tetrahedron_reference_facet_jacobian[facet_0][2][1] * J_r0_c8;
    sp[468] = sp[466] + sp[467];
    sp[469] = sp[463] * sp[468];
    sp[470] = tetrahedron_reference_facet_jacobian[facet_0][0][1] * J_r0_c3;
    sp[471] = J_r0_c4 * tetrahedron_reference_facet_jacobian[facet_0][1][1];
    sp[472] = sp[470] + sp[471];
    sp[473] = J_r0_c5 * tetrahedron_reference_facet_jacobian[facet_0][2][1];
    sp[474] = sp[472] + sp[473];
    sp[475] = tetrahedron_reference_facet_jacobian[facet_0][0][0] * J_r0_c6;
    sp[476] = tetrahedron_reference_facet_jacobian[facet_0][1][0] * J_r0_c7;
    sp[477] = sp[475] + sp[476];
    sp[478] = tetrahedron_reference_facet_jacobian[facet_0][2][0] * J_r0_c8;
    sp[479] = sp[477] + sp[478];
    sp[480] = sp[474] * sp[479];
    sp[481] = sp[469] + -1 * sp[480];
    sp[482] = sp[481] * sp[481];
    sp[483] = J_r0_c0 * tetrahedron_reference_facet_jacobian[facet_0][0][1];
    sp[484] = J_r0_c1 * tetrahedron_reference_facet_jacobian[facet_0][1][1];
    sp[485] = sp[483] + sp[484];
    sp[486] = J_r0_c2 * tetrahedron_reference_facet_jacobian[facet_0][2][1];
    sp[487] = sp[485] + sp[486];
    sp[488] = sp[487] * sp[479];
    sp[489] = J_r0_c0 * tetrahedron_reference_facet_jacobian[facet_0][0][0];
    sp[490] = J_r0_c1 * tetrahedron_reference_facet_jacobian[facet_0][1][0];
    sp[491] = sp[489] + sp[490];
    sp[492] = J_r0_c2 * tetrahedron_reference_facet_jacobian[facet_0][2][0];
    sp[493] = sp[491] + sp[492];
    sp[494] = sp[493] * sp[468];
    sp[495] = sp[488] + -1 * sp[494];
    sp[496] = sp[495] * sp[495];
    sp[497] = sp[482] + sp[496];
    sp[498] = sp[493] * sp[474];
    sp[499] = sp[463] * sp[487];
    sp[500] = sp[498] + -1 * sp[499];
    sp[501] = sp[500] * sp[500];
    sp[502] = sp[497] + sp[501];
    sp[503] = std::sqrt(sp[502]);
    sp[504] = 0.5 * sp[64] * sp[503];
    sp[505] = -1 * sp[423] * sp[503];
    sp[506] = -1 * sp[424] * sp[503];
    sp[507] = -1 * sp[425] * sp[503];
    sp[508] = -1 * sp[426] * sp[503];
    sp[509] = -1 * sp[427] * sp[503];
    sp[510] = -1 * sp[428] * sp[503];
    sp[511] = 0.5 * sp[65] * sp[503];
    sp[512] = -1 * sp[429] * sp[503];
    sp[513] = -1 * sp[430] * sp[503];
    sp[514] = -1 * sp[431] * sp[503];
    sp[515] = -1 * sp[432] * sp[503];
    sp[516] = -1 * sp[433] * sp[503];
    sp[517] = -1 * sp[434] * sp[503];
    sp[518] = 0.5 * sp[66] * sp[503];
    sp[519] = -1 * sp[435] * sp[503];
    sp[520] = -1 * sp[436] * sp[503];
    sp[521] = -1 * sp[437] * sp[503];
    sp[522] = -1 * sp[438] * sp[503];
    sp[523] = -1 * sp[439] * sp[503];
    sp[524] = -1 * sp[440] * sp[503];
    sp[525] = 0.5 * sp[131] * sp[503];
    sp[526] = -1 * sp[441] * sp[503];
    sp[527] = -1 * sp[442] * sp[503];
    sp[528] = -1 * sp[443] * sp[503];
    sp[529] = -1 * sp[444] * sp[503];
    sp[530] = -1 * sp[445] * sp[503];
    sp[531] = -1 * sp[446] * sp[503];
    sp[532] = 0.5 * sp[132] * sp[503];
    sp[533] = -1 * sp[447] * sp[503];
    sp[534] = -1 * sp[448] * sp[503];
    sp[535] = -1 * sp[449] * sp[503];
    sp[536] = -1 * sp[450] * sp[503];
    sp[537] = -1 * sp[451] * sp[503];
    sp[538] = -1 * sp[452] * sp[503];
    sp[539] = 0.5 * sp[133] * sp[503];
    sp[540] = -1 * sp[453] * sp[503];
    sp[541] = -1 * sp[454] * sp[503];
    sp[542] = -1 * sp[455] * sp[503];
    sp[543] = -1 * sp[456] * sp[503];
    sp[544] = -1 * sp[457] * sp[503];
    sp[545] = -1 * sp[458] * sp[503];
    sp[546] = -1 * (0.5 * sp[64]) * sp[503];
    sp[547] = -1 * (0.5 * sp[65]) * sp[503];
    sp[548] = -1 * (0.5 * sp[66]) * sp[503];
    sp[549] = -1 * (0.5 * sp[131]) * sp[503];
    sp[550] = -1 * (0.5 * sp[132]) * sp[503];
    sp[551] = -1 * (0.5 * sp[133]) * sp[503];
    A[0] = sp[505] * PI0[facet_0][facet_0][0][0];
    A[1] = sp[505] * PI0[facet_0][facet_0][0][1];
    A[2] = sp[505] * PI0[facet_0][facet_0][0][2];
    A[3] = sp[505] * PI0[facet_0][facet_0][0][3];
    A[4] = sp[506] * PI0[facet_0][facet_0][0][0];
    A[5] = sp[506] * PI0[facet_0][facet_0][0][1];
    A[6] = sp[506] * PI0[facet_0][facet_0][0][2];
    A[7] = sp[506] * PI0[facet_0][facet_0][0][3];
    A[8] = sp[507] * PI0[facet_0][facet_0][0][0];
    A[9] = sp[507] * PI0[facet_0][facet_0][0][1];
    A[10] = sp[507] * PI0[facet_0][facet_0][0][2];
    A[11] = sp[507] * PI0[facet_0][facet_0][0][3];
    A[12] = sp[504] * PI1[facet_0][0][0][0];
    A[13] = sp[508] * PI0[facet_0][facet_1][0][0];
    A[14] = sp[508] * PI0[facet_0][facet_1][0][1];
    A[15] = sp[508] * PI0[facet_0][facet_1][0][2];
    A[16] = sp[508] * PI0[facet_0][facet_1][0][3];
    A[17] = sp[509] * PI0[facet_0][facet_1][0][0];
    A[18] = sp[509] * PI0[facet_0][facet_1][0][1];
    A[19] = sp[509] * PI0[facet_0][facet_1][0][2];
    A[20] = sp[509] * PI0[facet_0][facet_1][0][3];
    A[21] = sp[510] * PI0[facet_0][facet_1][0][0];
    A[22] = sp[510] * PI0[facet_0][facet_1][0][1];
    A[23] = sp[510] * PI0[facet_0][facet_1][0][2];
    A[24] = sp[510] * PI0[facet_0][facet_1][0][3];
    A[25] = sp[504] * PI1[facet_0][0][0][0];
    A[26] = sp[505] * PI0[facet_0][facet_0][1][0];
    A[27] = sp[505] * PI0[facet_0][facet_0][1][1];
    A[28] = sp[505] * PI0[facet_0][facet_0][1][2];
    A[29] = sp[505] * PI0[facet_0][facet_0][1][3];
    A[30] = sp[506] * PI0[facet_0][facet_0][1][0];
    A[31] = sp[506] * PI0[facet_0][facet_0][1][1];
    A[32] = sp[506] * PI0[facet_0][facet_0][1][2];
    A[33] = sp[506] * PI0[facet_0][facet_0][1][3];
    A[34] = sp[507] * PI0[facet_0][facet_0][1][0];
    A[35] = sp[507] * PI0[facet_0][facet_0][1][1];
    A[36] = sp[507] * PI0[facet_0][facet_0][1][2];
    A[37] = sp[507] * PI0[facet_0][facet_0][1][3];
    A[38] = sp[504] * PI1[facet_0][0][1][0];
    A[39] = sp[508] * PI0[facet_0][facet_1][1][0];
    A[40] = sp[508] * PI0[facet_0][facet_1][1][1];
    A[41] = sp[508] * PI0[facet_0][facet_1][1][2];
    A[42] = sp[508] * PI0[facet_0][facet_1][1][3];
    A[43] = sp[509] * PI0[facet_0][facet_1][1][0];
    A[44] = sp[509] * PI0[facet_0][facet_1][1][1];
    A[45] = sp[509] * PI0[facet_0][facet_1][1][2];
    A[46] = sp[509] * PI0[facet_0][facet_1][1][3];
    A[47] = sp[510] * PI0[facet_0][facet_1][1][0];
    A[48] = sp[510] * PI0[facet_0][facet_1][1][1];
    A[49] = sp[510] * PI0[facet_0][facet_1][1][2];
    A[50] = sp[510] * PI0[facet_0][facet_1][1][3];
    A[51] = sp[504] * PI1[facet_0][0][1][0];
    A[52] = sp[505] * PI0[facet_0][facet_0][2][0];
    A[53] = sp[505] * PI0[facet_0][facet_0][2][1];
    A[54] = sp[505] * PI0[facet_0][facet_0][2][2];
    A[55] = sp[505] * PI0[facet_0][facet_0][2][3];
    A[56] = sp[506] * PI0[facet_0][facet_0][2][0];
    A[57] = sp[506] * PI0[facet_0][facet_0][2][1];
    A[58] = sp[506] * PI0[facet_0][facet_0][2][2];
    A[59] = sp[506] * PI0[facet_0][facet_0][2][3];
    A[60] = sp[507] * PI0[facet_0][facet_0][2][0];
    A[61] = sp[507] * PI0[facet_0][facet_0][2][1];
    A[62] = sp[507] * PI0[facet_0][facet_0][2][2];
    A[63] = sp[507] * PI0[facet_0][facet_0][2][3];
    A[64] = sp[504] * PI1[facet_0][0][2][0];
    A[65] = sp[508] * PI0[facet_0][facet_1][2][0];
    A[66] = sp[508] * PI0[facet_0][facet_1][2][1];
    A[67] = sp[508] * PI0[facet_0][facet_1][2][2];
    A[68] = sp[508] * PI0[facet_0][facet_1][2][3];
    A[69] = sp[509] * PI0[facet_0][facet_1][2][0];
    A[70] = sp[509] * PI0[facet_0][facet_1][2][1];
    A[71] = sp[509] * PI0[facet_0][facet_1][2][2];
    A[72] = sp[509] * PI0[facet_0][facet_1][2][3];
    A[73] = sp[510] * PI0[facet_0][facet_1][2][0];
    A[74] = sp[510] * PI0[facet_0][facet_1][2][1];
    A[75] = sp[510] * PI0[facet_0][facet_1][2][2];
    A[76] = sp[510] * PI0[facet_0][facet_1][2][3];
    A[77] = sp[504] * PI1[facet_0][0][2][0];
    A[78] = sp[505] * PI0[facet_0][facet_0][3][0];
    A[79] = sp[505] * PI0[facet_0][facet_0][3][1];
    A[80] = sp[505] * PI0[facet_0][facet_0][3][2];
    A[81] = sp[505] * PI0[facet_0][facet_0][3][3];
    A[82] = sp[506] * PI0[facet_0][facet_0][3][0];
    A[83] = sp[506] * PI0[facet_0][facet_0][3][1];
    A[84] = sp[506] * PI0[facet_0][facet_0][3][2];
    A[85] = sp[506] * PI0[facet_0][facet_0][3][3];
    A[86] = sp[507] * PI0[facet_0][facet_0][3][0];
    A[87] = sp[507] * PI0[facet_0][facet_0][3][1];
    A[88] = sp[507] * PI0[facet_0][facet_0][3][2];
    A[89] = sp[507] * PI0[facet_0][facet_0][3][3];
    A[90] = sp[504] * PI1[facet_0][0][3][0];
    A[91] = sp[508] * PI0[facet_0][facet_1][3][0];
    A[92] = sp[508] * PI0[facet_0][facet_1][3][1];
    A[93] = sp[508] * PI0[facet_0][facet_1][3][2];
    A[94] = sp[508] * PI0[facet_0][facet_1][3][3];
    A[95] = sp[509] * PI0[facet_0][facet_1][3][0];
    A[96] = sp[509] * PI0[facet_0][facet_1][3][1];
    A[97] = sp[509] * PI0[facet_0][facet_1][3][2];
    A[98] = sp[509] * PI0[facet_0][facet_1][3][3];
    A[99] = sp[510] * PI0[facet_0][facet_1][3][0];
    A[100] = sp[510] * PI0[facet_0][facet_1][3][1];
    A[101] = sp[510] * PI0[facet_0][facet_1][3][2];
    A[102] = sp[510] * PI0[facet_0][facet_1][3][3];
    A[103] = sp[504] * PI1[facet_0][0][3][0];
    A[104] = sp[512] * PI0[facet_0][facet_0][0][0];
    A[105] = sp[512] * PI0[facet_0][facet_0][0][1];
    A[106] = sp[512] * PI0[facet_0][facet_0][0][2];
    A[107] = sp[512] * PI0[facet_0][facet_0][0][3];
    A[108] = sp[513] * PI0[facet_0][facet_0][0][0];
    A[109] = sp[513] * PI0[facet_0][facet_0][0][1];
    A[110] = sp[513] * PI0[facet_0][facet_0][0][2];
    A[111] = sp[513] * PI0[facet_0][facet_0][0][3];
    A[112] = sp[514] * PI0[facet_0][facet_0][0][0];
    A[113] = sp[514] * PI0[facet_0][facet_0][0][1];
    A[114] = sp[514] * PI0[facet_0][facet_0][0][2];
    A[115] = sp[514] * PI0[facet_0][facet_0][0][3];
    A[116] = sp[511] * PI1[facet_0][0][0][0];
    A[117] = sp[515] * PI0[facet_0][facet_1][0][0];
    A[118] = sp[515] * PI0[facet_0][facet_1][0][1];
    A[119] = sp[515] * PI0[facet_0][facet_1][0][2];
    A[120] = sp[515] * PI0[facet_0][facet_1][0][3];
    A[121] = sp[516] * PI0[facet_0][facet_1][0][0];
    A[122] = sp[516] * PI0[facet_0][facet_1][0][1];
    A[123] = sp[516] * PI0[facet_0][facet_1][0][2];
    A[124] = sp[516] * PI0[facet_0][facet_1][0][3];
    A[125] = sp[517] * PI0[facet_0][facet_1][0][0];
    A[126] = sp[517] * PI0[facet_0][facet_1][0][1];
    A[127] = sp[517] * PI0[facet_0][facet_1][0][2];
    A[128] = sp[517] * PI0[facet_0][facet_1][0][3];
    A[129] = sp[511] * PI1[facet_0][0][0][0];
    A[130] = sp[512] * PI0[facet_0][facet_0][1][0];
    A[131] = sp[512] * PI0[facet_0][facet_0][1][1];
    A[132] = sp[512] * PI0[facet_0][facet_0][1][2];
    A[133] = sp[512] * PI0[facet_0][facet_0][1][3];
    A[134] = sp[513] * PI0[facet_0][facet_0][1][0];
    A[135] = sp[513] * PI0[facet_0][facet_0][1][1];
    A[136] = sp[513] * PI0[facet_0][facet_0][1][2];
    A[137] = sp[513] * PI0[facet_0][facet_0][1][3];
    A[138] = sp[514] * PI0[facet_0][facet_0][1][0];
    A[139] = sp[514] * PI0[facet_0][facet_0][1][1];
    A[140] = sp[514] * PI0[facet_0][facet_0][1][2];
    A[141] = sp[514] * PI0[facet_0][facet_0][1][3];
    A[142] = sp[511] * PI1[facet_0][0][1][0];
    A[143] = sp[515] * PI0[facet_0][facet_1][1][0];
    A[144] = sp[515] * PI0[facet_0][facet_1][1][1];
    A[145] = sp[515] * PI0[facet_0][facet_1][1][2];
    A[146] = sp[515] * PI0[facet_0][facet_1][1][3];
    A[147] = sp[516] * PI0[facet_0][facet_1][1][0];
    A[148] = sp[516] * PI0[facet_0][facet_1][1][1];
    A[149] = sp[516] * PI0[facet_0][facet_1][1][2];
    A[150] = sp[516] * PI0[facet_0][facet_1][1][3];
    A[151] = sp[517] * PI0[facet_0][facet_1][1][0];
    A[152] = sp[517] * PI0[facet_0][facet_1][1][1];
    A[153] = sp[517] * PI0[facet_0][facet_1][1][2];
    A[154] = sp[517] * PI0[facet_0][facet_1][1][3];
    A[155] = sp[511] * PI1[facet_0][0][1][0];
    A[156] = sp[512] * PI0[facet_0][facet_0][2][0];
    A[157] = sp[512] * PI0[facet_0][facet_0][2][1];
    A[158] = sp[512] * PI0[facet_0][facet_0][2][2];
    A[159] = sp[512] * PI0[facet_0][facet_0][2][3];
    A[160] = sp[513] * PI0[facet_0][facet_0][2][0];
    A[161] = sp[513] * PI0[facet_0][facet_0][2][1];
    A[162] = sp[513] * PI0[facet_0][facet_0][2][2];
    A[163] = sp[513] * PI0[facet_0][facet_0][2][3];
    A[164] = sp[514] * PI0[facet_0][facet_0][2][0];
    A[165] = sp[514] * PI0[facet_0][facet_0][2][1];
    A[166] = sp[514] * PI0[facet_0][facet_0][2][2];
    A[167] = sp[514] * PI0[facet_0][facet_0][2][3];
    A[168] = sp[511] * PI1[facet_0][0][2][0];
    A[169] = sp[515] * PI0[facet_0][facet_1][2][0];
    A[170] = sp[515] * PI0[facet_0][facet_1][2][1];
    A[171] = sp[515] * PI0[facet_0][facet_1][2][2];
    A[172] = sp[515] * PI0[facet_0][facet_1][2][3];
    A[173] = sp[516] * PI0[facet_0][facet_1][2][0];
    A[174] = sp[516] * PI0[facet_0][facet_1][2][1];
    A[175] = sp[516] * PI0[facet_0][facet_1][2][2];
    A[176] = sp[516] * PI0[facet_0][facet_1][2][3];
    A[177] = sp[517] * PI0[facet_0][facet_1][2][0];
    A[178] = sp[517] * PI0[facet_0][facet_1][2][1];
    A[179] = sp[517] * PI0[facet_0][facet_1][2][2];
    A[180] = sp[517] * PI0[facet_0][facet_1][2][3];
    A[181] = sp[511] * PI1[facet_0][0][2][0];
    A[182] = sp[512] * PI0[facet_0][facet_0][3][0];
    A[183] = sp[512] * PI0[facet_0][facet_0][3][1];
    A[184] = sp[512] * PI0[facet_0][facet_0][3][2];
    A[185] = sp[512] * PI0[facet_0][facet_0][3][3];
    A[186] = sp[513] * PI0[facet_0][facet_0][3][0];
    A[187] = sp[513] * PI0[facet_0][facet_0][3][1];
    A[188] = sp[513] * PI0[facet_0][facet_0][3][2];
    A[189] = sp[513] * PI0[facet_0][facet_0][3][3];
    A[190] = sp[514] * PI0[facet_0][facet_0][3][0];
    A[191] = sp[514] * PI0[facet_0][facet_0][3][1];
    A[192] = sp[514] * PI0[facet_0][facet_0][3][2];
    A[193] = sp[514] * PI0[facet_0][facet_0][3][3];
    A[194] = sp[511] * PI1[facet_0][0][3][0];
    A[195] = sp[515] * PI0[facet_0][facet_1][3][0];
    A[196] = sp[515] * PI0[facet_0][facet_1][3][1];
    A[197] = sp[515] * PI0[facet_0][facet_1][3][2];
    A[198] = sp[515] * PI0[facet_0][facet_1][3][3];
    A[199] = sp[516] * PI0[facet_0][facet_1][3][0];
    A[200] = sp[516] * PI0[facet_0][facet_1][3][1];
    A[201] = sp[516] * PI0[facet_0][facet_1][3][2];
    A[202] = sp[516] * PI0[facet_0][facet_1][3][3];
    A[203] = sp[517] * PI0[facet_0][facet_1][3][0];
    A[204] = sp[517] * PI0[facet_0][facet_1][3][1];
    A[205] = sp[517] * PI0[facet_0][facet_1][3][2];
    A[206] = sp[517] * PI0[facet_0][facet_1][3][3];
    A[207] = sp[511] * PI1[facet_0][0][3][0];
    A[208] = sp[519] * PI0[facet_0][facet_0][0][0];
    A[209] = sp[519] * PI0[facet_0][facet_0][0][1];
    A[210] = sp[519] * PI0[facet_0][facet_0][0][2];
    A[211] = sp[519] * PI0[facet_0][facet_0][0][3];
    A[212] = sp[520] * PI0[facet_0][facet_0][0][0];
    A[213] = sp[520] * PI0[facet_0][facet_0][0][1];
    A[214] = sp[520] * PI0[facet_0][facet_0][0][2];
    A[215] = sp[520] * PI0[facet_0][facet_0][0][3];
    A[216] = sp[521] * PI0[facet_0][facet_0][0][0];
    A[217] = sp[521] * PI0[facet_0][facet_0][0][1];
    A[218] = sp[521] * PI0[facet_0][facet_0][0][2];
    A[219] = sp[521] * PI0[facet_0][facet_0][0][3];
    A[220] = sp[518] * PI1[facet_0][0][0][0];
    A[221] = sp[522] * PI0[facet_0][facet_1][0][0];
    A[222] = sp[522] * PI0[facet_0][facet_1][0][1];
    A[223] = sp[522] * PI0[facet_0][facet_1][0][2];
    A[224] = sp[522] * PI0[facet_0][facet_1][0][3];
    A[225] = sp[523] * PI0[facet_0][facet_1][0][0];
    A[226] = sp[523] * PI0[facet_0][facet_1][0][1];
    A[227] = sp[523] * PI0[facet_0][facet_1][0][2];
    A[228] = sp[523] * PI0[facet_0][facet_1][0][3];
    A[229] = sp[524] * PI0[facet_0][facet_1][0][0];
    A[230] = sp[524] * PI0[facet_0][facet_1][0][1];
    A[231] = sp[524] * PI0[facet_0][facet_1][0][2];
    A[232] = sp[524] * PI0[facet_0][facet_1][0][3];
    A[233] = sp[518] * PI1[facet_0][0][0][0];
    A[234] = sp[519] * PI0[facet_0][facet_0][1][0];
    A[235] = sp[519] * PI0[facet_0][facet_0][1][1];
    A[236] = sp[519] * PI0[facet_0][facet_0][1][2];
    A[237] = sp[519] * PI0[facet_0][facet_0][1][3];
    A[238] = sp[520] * PI0[facet_0][facet_0][1][0];
    A[239] = sp[520] * PI0[facet_0][facet_0][1][1];
    A[240] = sp[520] * PI0[facet_0][facet_0][1][2];
    A[241] = sp[520] * PI0[facet_0][facet_0][1][3];
    A[242] = sp[521] * PI0[facet_0][facet_0][1][0];
    A[243] = sp[521] * PI0[facet_0][facet_0][1][1];
    A[244] = sp[521] * PI0[facet_0][facet_0][1][2];
    A[245] = sp[521] * PI0[facet_0][facet_0][1][3];
    A[246] = sp[518] * PI1[facet_0][0][1][0];
    A[247] = sp[522] * PI0[facet_0][facet_1][1][0];
    A[248] = sp[522] * PI0[facet_0][facet_1][1][1];
    A[249] = sp[522] * PI0[facet_0][facet_1][1][2];
    A[250] = sp[522] * PI0[facet_0][facet_1][1][3];
    A[251] = sp[523] * PI0[facet_0][facet_1][1][0];
    A[252] = sp[523] * PI0[facet_0][facet_1][1][1];
    A[253] = sp[523] * PI0[facet_0][facet_1][1][2];
    A[254] = sp[523] * PI0[facet_0][facet_1][1][3];
    A[255] = sp[524] * PI0[facet_0][facet_1][1][0];
    A[256] = sp[524] * PI0[facet_0][facet_1][1][1];
    A[257] = sp[524] * PI0[facet_0][facet_1][1][2];
    A[258] = sp[524] * PI0[facet_0][facet_1][1][3];
    A[259] = sp[518] * PI1[facet_0][0][1][0];
    A[260] = sp[519] * PI0[facet_0][facet_0][2][0];
    A[261] = sp[519] * PI0[facet_0][facet_0][2][1];
    A[262] = sp[519] * PI0[facet_0][facet_0][2][2];
    A[263] = sp[519] * PI0[facet_0][facet_0][2][3];
    A[264] = sp[520] * PI0[facet_0][facet_0][2][0];
    A[265] = sp[520] * PI0[facet_0][facet_0][2][1];
    A[266] = sp[520] * PI0[facet_0][facet_0][2][2];
    A[267] = sp[520] * PI0[facet_0][facet_0][2][3];
    A[268] = sp[521] * PI0[facet_0][facet_0][2][0];
    A[269] = sp[521] * PI0[facet_0][facet_0][2][1];
    A[270] = sp[521] * PI0[facet_0][facet_0][2][2];
    A[271] = sp[521] * PI0[facet_0][facet_0][2][3];
    A[272] = sp[518] * PI1[facet_0][0][2][0];
    A[273] = sp[522] * PI0[facet_0][facet_1][2][0];
    A[274] = sp[522] * PI0[facet_0][facet_1][2][1];
    A[275] = sp[522] * PI0[facet_0][facet_1][2][2];
    A[276] = sp[522] * PI0[facet_0][facet_1][2][3];
    A[277] = sp[523] * PI0[facet_0][facet_1][2][0];
    A[278] = sp[523] * PI0[facet_0][facet_1][2][1];
    A[279] = sp[523] * PI0[facet_0][facet_1][2][2];
    A[280] = sp[523] * PI0[facet_0][facet_1][2][3];
    A[281] = sp[524] * PI0[facet_0][facet_1][2][0];
    A[282] = sp[524] * PI0[facet_0][facet_1][2][1];
    A[283] = sp[524] * PI0[facet_0][facet_1][2][2];
    A[284] = sp[524] * PI0[facet_0][facet_1][2][3];
    A[285] = sp[518] * PI1[facet_0][0][2][0];
    A[286] = sp[519] * PI0[facet_0][facet_0][3][0];
    A[287] = sp[519] * PI0[facet_0][facet_0][3][1];
    A[288] = sp[519] * PI0[facet_0][facet_0][3][2];
    A[289] = sp[519] * PI0[facet_0][facet_0][3][3];
    A[290] = sp[520] * PI0[facet_0][facet_0][3][0];
    A[291] = sp[520] * PI0[facet_0][facet_0][3][1];
    A[292] = sp[520] * PI0[facet_0][facet_0][3][2];
    A[293] = sp[520] * PI0[facet_0][facet_0][3][3];
    A[294] = sp[521] * PI0[facet_0][facet_0][3][0];
    A[295] = sp[521] * PI0[facet_0][facet_0][3][1];
    A[296] = sp[521] * PI0[facet_0][facet_0][3][2];
    A[297] = sp[521] * PI0[facet_0][facet_0][3][3];
    A[298] = sp[518] * PI1[facet_0][0][3][0];
    A[299] = sp[522] * PI0[facet_0][facet_1][3][0];
    A[300] = sp[522] * PI0[facet_0][facet_1][3][1];
    A[301] = sp[522] * PI0[facet_0][facet_1][3][2];
    A[302] = sp[522] * PI0[facet_0][facet_1][3][3];
    A[303] = sp[523] * PI0[facet_0][facet_1][3][0];
    A[304] = sp[523] * PI0[facet_0][facet_1][3][1];
    A[305] = sp[523] * PI0[facet_0][facet_1][3][2];
    A[306] = sp[523] * PI0[facet_0][facet_1][3][3];
    A[307] = sp[524] * PI0[facet_0][facet_1][3][0];
    A[308] = sp[524] * PI0[facet_0][facet_1][3][1];
    A[309] = sp[524] * PI0[facet_0][facet_1][3][2];
    A[310] = sp[524] * PI0[facet_0][facet_1][3][3];
    A[311] = sp[518] * PI1[facet_0][0][3][0];
    A[312] = sp[546] * PI1[facet_0][0][0][0];
    A[313] = sp[546] * PI1[facet_0][0][1][0];
    A[314] = sp[546] * PI1[facet_0][0][2][0];
    A[315] = sp[546] * PI1[facet_0][0][3][0];
    A[316] = sp[547] * PI1[facet_0][0][0][0];
    A[317] = sp[547] * PI1[facet_0][0][1][0];
    A[318] = sp[547] * PI1[facet_0][0][2][0];
    A[319] = sp[547] * PI1[facet_0][0][3][0];
    A[320] = sp[548] * PI1[facet_0][0][0][0];
    A[321] = sp[548] * PI1[facet_0][0][1][0];
    A[322] = sp[548] * PI1[facet_0][0][2][0];
    A[323] = sp[548] * PI1[facet_0][0][3][0];
    A[324] = 0.0;
    A[325] = sp[549] * PI1[facet_1][0][0][0];
    A[326] = sp[549] * PI1[facet_1][0][1][0];
    A[327] = sp[549] * PI1[facet_1][0][2][0];
    A[328] = sp[549] * PI1[facet_1][0][3][0];
    A[329] = sp[550] * PI1[facet_1][0][0][0];
    A[330] = sp[550] * PI1[facet_1][0][1][0];
    A[331] = sp[550] * PI1[facet_1][0][2][0];
    A[332] = sp[550] * PI1[facet_1][0][3][0];
    A[333] = sp[551] * PI1[facet_1][0][0][0];
    A[334] = sp[551] * PI1[facet_1][0][1][0];
    A[335] = sp[551] * PI1[facet_1][0][2][0];
    A[336] = sp[551] * PI1[facet_1][0][3][0];
    A[337] = 0.0;
    A[338] = sp[526] * PI0[facet_1][facet_0][0][0];
    A[339] = sp[526] * PI0[facet_1][facet_0][0][1];
    A[340] = sp[526] * PI0[facet_1][facet_0][0][2];
    A[341] = sp[526] * PI0[facet_1][facet_0][0][3];
    A[342] = sp[527] * PI0[facet_1][facet_0][0][0];
    A[343] = sp[527] * PI0[facet_1][facet_0][0][1];
    A[344] = sp[527] * PI0[facet_1][facet_0][0][2];
    A[345] = sp[527] * PI0[facet_1][facet_0][0][3];
    A[346] = sp[528] * PI0[facet_1][facet_0][0][0];
    A[347] = sp[528] * PI0[facet_1][facet_0][0][1];
    A[348] = sp[528] * PI0[facet_1][facet_0][0][2];
    A[349] = sp[528] * PI0[facet_1][facet_0][0][3];
    A[350] = sp[525] * PI1[facet_1][0][0][0];
    A[351] = sp[529] * PI0[facet_1][facet_1][0][0];
    A[352] = sp[529] * PI0[facet_1][facet_1][0][1];
    A[353] = sp[529] * PI0[facet_1][facet_1][0][2];
    A[354] = sp[529] * PI0[facet_1][facet_1][0][3];
    A[355] = sp[530] * PI0[facet_1][facet_1][0][0];
    A[356] = sp[530] * PI0[facet_1][facet_1][0][1];
    A[357] = sp[530] * PI0[facet_1][facet_1][0][2];
    A[358] = sp[530] * PI0[facet_1][facet_1][0][3];
    A[359] = sp[531] * PI0[facet_1][facet_1][0][0];
    A[360] = sp[531] * PI0[facet_1][facet_1][0][1];
    A[361] = sp[531] * PI0[facet_1][facet_1][0][2];
    A[362] = sp[531] * PI0[facet_1][facet_1][0][3];
    A[363] = sp[525] * PI1[facet_1][0][0][0];
    A[364] = sp[526] * PI0[facet_1][facet_0][1][0];
    A[365] = sp[526] * PI0[facet_1][facet_0][1][1];
    A[366] = sp[526] * PI0[facet_1][facet_0][1][2];
    A[367] = sp[526] * PI0[facet_1][facet_0][1][3];
    A[368] = sp[527] * PI0[facet_1][facet_0][1][0];
    A[369] = sp[527] * PI0[facet_1][facet_0][1][1];
    A[370] = sp[527] * PI0[facet_1][facet_0][1][2];
    A[371] = sp[527] * PI0[facet_1][facet_0][1][3];
    A[372] = sp[528] * PI0[facet_1][facet_0][1][0];
    A[373] = sp[528] * PI0[facet_1][facet_0][1][1];
    A[374] = sp[528] * PI0[facet_1][facet_0][1][2];
    A[375] = sp[528] * PI0[facet_1][facet_0][1][3];
    A[376] = sp[525] * PI1[facet_1][0][1][0];
    A[377] = sp[529] * PI0[facet_1][facet_1][1][0];
    A[378] = sp[529] * PI0[facet_1][facet_1][1][1];
    A[379] = sp[529] * PI0[facet_1][facet_1][1][2];
    A[380] = sp[529] * PI0[facet_1][facet_1][1][3];
    A[381] = sp[530] * PI0[facet_1][facet_1][1][0];
    A[382] = sp[530] * PI0[facet_1][facet_1][1][1];
    A[383] = sp[530] * PI0[facet_1][facet_1][1][2];
    A[384] = sp[530] * PI0[facet_1][facet_1][1][3];
    A[385] = sp[531] * PI0[facet_1][facet_1][1][0];
    A[386] = sp[531] * PI0[facet_1][facet_1][1][1];
    A[387] = sp[531] * PI0[facet_1][facet_1][1][2];
    A[388] = sp[531] * PI0[facet_1][facet_1][1][3];
    A[389] = sp[525] * PI1[facet_1][0][1][0];
    A[390] = sp[526] * PI0[facet_1][facet_0][2][0];
    A[391] = sp[526] * PI0[facet_1][facet_0][2][1];
    A[392] = sp[526] * PI0[facet_1][facet_0][2][2];
    A[393] = sp[526] * PI0[facet_1][facet_0][2][3];
    A[394] = sp[527] * PI0[facet_1][facet_0][2][0];
    A[395] = sp[527] * PI0[facet_1][facet_0][2][1];
    A[396] = sp[527] * PI0[facet_1][facet_0][2][2];
    A[397] = sp[527] * PI0[facet_1][facet_0][2][3];
    A[398] = sp[528] * PI0[facet_1][facet_0][2][0];
    A[399] = sp[528] * PI0[facet_1][facet_0][2][1];
    A[400] = sp[528] * PI0[facet_1][facet_0][2][2];
    A[401] = sp[528] * PI0[facet_1][facet_0][2][3];
    A[402] = sp[525] * PI1[facet_1][0][2][0];
    A[403] = sp[529] * PI0[facet_1][facet_1][2][0];
    A[404] = sp[529] * PI0[facet_1][facet_1][2][1];
    A[405] = sp[529] * PI0[facet_1][facet_1][2][2];
    A[406] = sp[529] * PI0[facet_1][facet_1][2][3];
    A[407] = sp[530] * PI0[facet_1][facet_1][2][0];
    A[408] = sp[530] * PI0[facet_1][facet_1][2][1];
    A[409] = sp[530] * PI0[facet_1][facet_1][2][2];
    A[410] = sp[530] * PI0[facet_1][facet_1][2][3];
    A[411] = sp[531] * PI0[facet_1][facet_1][2][0];
    A[412] = sp[531] * PI0[facet_1][facet_1][2][1];
    A[413] = sp[531] * PI0[facet_1][facet_1][2][2];
    A[414] = sp[531] * PI0[facet_1][facet_1][2][3];
    A[415] = sp[525] * PI1[facet_1][0][2][0];
    A[416] = sp[526] * PI0[facet_1][facet_0][3][0];
    A[417] = sp[526] * PI0[facet_1][facet_0][3][1];
    A[418] = sp[526] * PI0[facet_1][facet_0][3][2];
    A[419] = sp[526] * PI0[facet_1][facet_0][3][3];
    A[420] = sp[527] * PI0[facet_1][facet_0][3][0];
    A[421] = sp[527] * PI0[facet_1][facet_0][3][1];
    A[422] = sp[527] * PI0[facet_1][facet_0][3][2];
    A[423] = sp[527] * PI0[facet_1][facet_0][3][3];
    A[424] = sp[528] * PI0[facet_1][facet_0][3][0];
    A[425] = sp[528] * PI0[facet_1][facet_0][3][1];
    A[426] = sp[528] * PI0[facet_1][facet_0][3][2];
    A[427] = sp[528] * PI0[facet_1][facet_0][3][3];
    A[428] = sp[525] * PI1[facet_1][0][3][0];
    A[429] = sp[529] * PI0[facet_1][facet_1][3][0];
    A[430] = sp[529] * PI0[facet_1][facet_1][3][1];
    A[431] = sp[529] * PI0[facet_1][facet_1][3][2];
    A[432] = sp[529] * PI0[facet_1][facet_1][3][3];
    A[433] = sp[530] * PI0[facet_1][facet_1][3][0];
    A[434] = sp[530] * PI0[facet_1][facet_1][3][1];
    A[435] = sp[530] * PI0[facet_1][facet_1][3][2];
    A[436] = sp[530] * PI0[facet_1][facet_1][3][3];
    A[437] = sp[531] * PI0[facet_1][facet_1][3][0];
    A[438] = sp[531] * PI0[facet_1][facet_1][3][1];
    A[439] = sp[531] * PI0[facet_1][facet_1][3][2];
    A[440] = sp[531] * PI0[facet_1][facet_1][3][3];
    A[441] = sp[525] * PI1[facet_1][0][3][0];
    A[442] = sp[533] * PI0[facet_1][facet_0][0][0];
    A[443] = sp[533] * PI0[facet_1][facet_0][0][1];
    A[444] = sp[533] * PI0[facet_1][facet_0][0][2];
    A[445] = sp[533] * PI0[facet_1][facet_0][0][3];
    A[446] = sp[534] * PI0[facet_1][facet_0][0][0];
    A[447] = sp[534] * PI0[facet_1][facet_0][0][1];
    A[448] = sp[534] * PI0[facet_1][facet_0][0][2];
    A[449] = sp[534] * PI0[facet_1][facet_0][0][3];
    A[450] = sp[535] * PI0[facet_1][facet_0][0][0];
    A[451] = sp[535] * PI0[facet_1][facet_0][0][1];
    A[452] = sp[535] * PI0[facet_1][facet_0][0][2];
    A[453] = sp[535] * PI0[facet_1][facet_0][0][3];
    A[454] = sp[532] * PI1[facet_1][0][0][0];
    A[455] = sp[536] * PI0[facet_1][facet_1][0][0];
    A[456] = sp[536] * PI0[facet_1][facet_1][0][1];
    A[457] = sp[536] * PI0[facet_1][facet_1][0][2];
    A[458] = sp[536] * PI0[facet_1][facet_1][0][3];
    A[459] = sp[537] * PI0[facet_1][facet_1][0][0];
    A[460] = sp[537] * PI0[facet_1][facet_1][0][1];
    A[461] = sp[537] * PI0[facet_1][facet_1][0][2];
    A[462] = sp[537] * PI0[facet_1][facet_1][0][3];
    A[463] = sp[538] * PI0[facet_1][facet_1][0][0];
    A[464] = sp[538] * PI0[facet_1][facet_1][0][1];
    A[465] = sp[538] * PI0[facet_1][facet_1][0][2];
    A[466] = sp[538] * PI0[facet_1][facet_1][0][3];
    A[467] = sp[532] * PI1[facet_1][0][0][0];
    A[468] = sp[533] * PI0[facet_1][facet_0][1][0];
    A[469] = sp[533] * PI0[facet_1][facet_0][1][1];
    A[470] = sp[533] * PI0[facet_1][facet_0][1][2];
    A[471] = sp[533] * PI0[facet_1][facet_0][1][3];
    A[472] = sp[534] * PI0[facet_1][facet_0][1][0];
    A[473] = sp[534] * PI0[facet_1][facet_0][1][1];
    A[474] = sp[534] * PI0[facet_1][facet_0][1][2];
    A[475] = sp[534] * PI0[facet_1][facet_0][1][3];
    A[476] = sp[535] * PI0[facet_1][facet_0][1][0];
    A[477] = sp[535] * PI0[facet_1][facet_0][1][1];
    A[478] = sp[535] * PI0[facet_1][facet_0][1][2];
    A[479] = sp[535] * PI0[facet_1][facet_0][1][3];
    A[480] = sp[532] * PI1[facet_1][0][1][0];
    A[481] = sp[536] * PI0[facet_1][facet_1][1][0];
    A[482] = sp[536] * PI0[facet_1][facet_1][1][1];
    A[483] = sp[536] * PI0[facet_1][facet_1][1][2];
    A[484] = sp[536] * PI0[facet_1][facet_1][1][3];
    A[485] = sp[537] * PI0[facet_1][facet_1][1][0];
    A[486] = sp[537] * PI0[facet_1][facet_1][1][1];
    A[487] = sp[537] * PI0[facet_1][facet_1][1][2];
    A[488] = sp[537] * PI0[facet_1][facet_1][1][3];
    A[489] = sp[538] * PI0[facet_1][facet_1][1][0];
    A[490] = sp[538] * PI0[facet_1][facet_1][1][1];
    A[491] = sp[538] * PI0[facet_1][facet_1][1][2];
    A[492] = sp[538] * PI0[facet_1][facet_1][1][3];
    A[493] = sp[532] * PI1[facet_1][0][1][0];
    A[494] = sp[533] * PI0[facet_1][facet_0][2][0];
    A[495] = sp[533] * PI0[facet_1][facet_0][2][1];
    A[496] = sp[533] * PI0[facet_1][facet_0][2][2];
    A[497] = sp[533] * PI0[facet_1][facet_0][2][3];
    A[498] = sp[534] * PI0[facet_1][facet_0][2][0];
    A[499] = sp[534] * PI0[facet_1][facet_0][2][1];
    A[500] = sp[534] * PI0[facet_1][facet_0][2][2];
    A[501] = sp[534] * PI0[facet_1][facet_0][2][3];
    A[502] = sp[535] * PI0[facet_1][facet_0][2][0];
    A[503] = sp[535] * PI0[facet_1][facet_0][2][1];
    A[504] = sp[535] * PI0[facet_1][facet_0][2][2];
    A[505] = sp[535] * PI0[facet_1][facet_0][2][3];
    A[506] = sp[532] * PI1[facet_1][0][2][0];
    A[507] = sp[536] * PI0[facet_1][facet_1][2][0];
    A[508] = sp[536] * PI0[facet_1][facet_1][2][1];
    A[509] = sp[536] * PI0[facet_1][facet_1][2][2];
    A[510] = sp[536] * PI0[facet_1][facet_1][2][3];
    A[511] = sp[537] * PI0[facet_1][facet_1][2][0];
    A[512] = sp[537] * PI0[facet_1][facet_1][2][1];
    A[513] = sp[537] * PI0[facet_1][facet_1][2][2];
    A[514] = sp[537] * PI0[facet_1][facet_1][2][3];
    A[515] = sp[538] * PI0[facet_1][facet_1][2][0];
    A[516] = sp[538] * PI0[facet_1][facet_1][2][1];
    A[517] = sp[538] * PI0[facet_1][facet_1][2][2];
    A[518] = sp[538] * PI0[facet_1][facet_1][2][3];
    A[519] = sp[532] * PI1[facet_1][0][2][0];
    A[520] = sp[533] * PI0[facet_1][facet_0][3][0];
    A[521] = sp[533] * PI0[facet_1][facet_0][3][1];
    A[522] = sp[533] * PI0[facet_1][facet_0][3][2];
    A[523] = sp[533] * PI0[facet_1][facet_0][3][3];
    A[524] = sp[534] * PI0[facet_1][facet_0][3][0];
    A[525] = sp[534] * PI0[facet_1][facet_0][3][1];
    A[526] = sp[534] * PI0[facet_1][facet_0][3][2];
    A[527] = sp[534] * PI0[facet_1][facet_0][3][3];
    A[528] = sp[535] * PI0[facet_1][facet_0][3][0];
    A[529] = sp[535] * PI0[facet_1][facet_0][3][1];
    A[530] = sp[535] * PI0[facet_1][facet_0][3][2];
    A[531] = sp[535] * PI0[facet_1][facet_0][3][3];
    A[532] = sp[532] * PI1[facet_1][0][3][0];
    A[533] = sp[536] * PI0[facet_1][facet_1][3][0];
    A[534] = sp[536] * PI0[facet_1][facet_1][3][1];
    A[535] = sp[536] * PI0[facet_1][facet_1][3][2];
    A[536] = sp[536] * PI0[facet_1][facet_1][3][3];
    A[537] = sp[537] * PI0[facet_1][facet_1][3][0];
    A[538] = sp[537] * PI0[facet_1][facet_1][3][1];
    A[539] = sp[537] * PI0[facet_1][facet_1][3][2];
    A[540] = sp[537] * PI0[facet_1][facet_1][3][3];
    A[541] = sp[538] * PI0[facet_1][facet_1][3][0];
    A[542] = sp[538] * PI0[facet_1][facet_1][3][1];
    A[543] = sp[538] * PI0[facet_1][facet_1][3][2];
    A[544] = sp[538] * PI0[facet_1][facet_1][3][3];
    A[545] = sp[532] * PI1[facet_1][0][3][0];
    A[546] = sp[540] * PI0[facet_1][facet_0][0][0];
    A[547] = sp[540] * PI0[facet_1][facet_0][0][1];
    A[548] = sp[540] * PI0[facet_1][facet_0][0][2];
    A[549] = sp[540] * PI0[facet_1][facet_0][0][3];
    A[550] = sp[541] * PI0[facet_1][facet_0][0][0];
    A[551] = sp[541] * PI0[facet_1][facet_0][0][1];
    A[552] = sp[541] * PI0[facet_1][facet_0][0][2];
    A[553] = sp[541] * PI0[facet_1][facet_0][0][3];
    A[554] = sp[542] * PI0[facet_1][facet_0][0][0];
    A[555] = sp[542] * PI0[facet_1][facet_0][0][1];
    A[556] = sp[542] * PI0[facet_1][facet_0][0][2];
    A[557] = sp[542] * PI0[facet_1][facet_0][0][3];
    A[558] = sp[539] * PI1[facet_1][0][0][0];
    A[559] = sp[543] * PI0[facet_1][facet_1][0][0];
    A[560] = sp[543] * PI0[facet_1][facet_1][0][1];
    A[561] = sp[543] * PI0[facet_1][facet_1][0][2];
    A[562] = sp[543] * PI0[facet_1][facet_1][0][3];
    A[563] = sp[544] * PI0[facet_1][facet_1][0][0];
    A[564] = sp[544] * PI0[facet_1][facet_1][0][1];
    A[565] = sp[544] * PI0[facet_1][facet_1][0][2];
    A[566] = sp[544] * PI0[facet_1][facet_1][0][3];
    A[567] = sp[545] * PI0[facet_1][facet_1][0][0];
    A[568] = sp[545] * PI0[facet_1][facet_1][0][1];
    A[569] = sp[545] * PI0[facet_1][facet_1][0][2];
    A[570] = sp[545] * PI0[facet_1][facet_1][0][3];
    A[571] = sp[539] * PI1[facet_1][0][0][0];
    A[572] = sp[540] * PI0[facet_1][facet_0][1][0];
    A[573] = sp[540] * PI0[facet_1][facet_0][1][1];
    A[574] = sp[540] * PI0[facet_1][facet_0][1][2];
    A[575] = sp[540] * PI0[facet_1][facet_0][1][3];
    A[576] = sp[541] * PI0[facet_1][facet_0][1][0];
    A[577] = sp[541] * PI0[facet_1][facet_0][1][1];
    A[578] = sp[541] * PI0[facet_1][facet_0][1][2];
    A[579] = sp[541] * PI0[facet_1][facet_0][1][3];
    A[580] = sp[542] * PI0[facet_1][facet_0][1][0];
    A[581] = sp[542] * PI0[facet_1][facet_0][1][1];
    A[582] = sp[542] * PI0[facet_1][facet_0][1][2];
    A[583] = sp[542] * PI0[facet_1][facet_0][1][3];
    A[584] = sp[539] * PI1[facet_1][0][1][0];
    A[585] = sp[543] * PI0[facet_1][facet_1][1][0];
    A[586] = sp[543] * PI0[facet_1][facet_1][1][1];
    A[587] = sp[543] * PI0[facet_1][facet_1][1][2];
    A[588] = sp[543] * PI0[facet_1][facet_1][1][3];
    A[589] = sp[544] * PI0[facet_1][facet_1][1][0];
    A[590] = sp[544] * PI0[facet_1][facet_1][1][1];
    A[591] = sp[544] * PI0[facet_1][facet_1][1][2];
    A[592] = sp[544] * PI0[facet_1][facet_1][1][3];
    A[593] = sp[545] * PI0[facet_1][facet_1][1][0];
    A[594] = sp[545] * PI0[facet_1][facet_1][1][1];
    A[595] = sp[545] * PI0[facet_1][facet_1][1][2];
    A[596] = sp[545] * PI0[facet_1][facet_1][1][3];
    A[597] = sp[539] * PI1[facet_1][0][1][0];
    A[598] = sp[540] * PI0[facet_1][facet_0][2][0];
    A[599] = sp[540] * PI0[facet_1][facet_0][2][1];
    A[600] = sp[540] * PI0[facet_1][facet_0][2][2];
    A[601] = sp[540] * PI0[facet_1][facet_0][2][3];
    A[602] = sp[541] * PI0[facet_1][facet_0][2][0];
    A[603] = sp[541] * PI0[facet_1][facet_0][2][1];
    A[604] = sp[541] * PI0[facet_1][facet_0][2][2];
    A[605] = sp[541] * PI0[facet_1][facet_0][2][3];
    A[606] = sp[542] * PI0[facet_1][facet_0][2][0];
    A[607] = sp[542] * PI0[facet_1][facet_0][2][1];
    A[608] = sp[542] * PI0[facet_1][facet_0][2][2];
    A[609] = sp[542] * PI0[facet_1][facet_0][2][3];
    A[610] = sp[539] * PI1[facet_1][0][2][0];
    A[611] = sp[543] * PI0[facet_1][facet_1][2][0];
    A[612] = sp[543] * PI0[facet_1][facet_1][2][1];
    A[613] = sp[543] * PI0[facet_1][facet_1][2][2];
    A[614] = sp[543] * PI0[facet_1][facet_1][2][3];
    A[615] = sp[544] * PI0[facet_1][facet_1][2][0];
    A[616] = sp[544] * PI0[facet_1][facet_1][2][1];
    A[617] = sp[544] * PI0[facet_1][facet_1][2][2];
    A[618] = sp[544] * PI0[facet_1][facet_1][2][3];
    A[619] = sp[545] * PI0[facet_1][facet_1][2][0];
    A[620] = sp[545] * PI0[facet_1][facet_1][2][1];
    A[621] = sp[545] * PI0[facet_1][facet_1][2][2];
    A[622] = sp[545] * PI0[facet_1][facet_1][2][3];
    A[623] = sp[539] * PI1[facet_1][0][2][0];
    A[624] = sp[540] * PI0[facet_1][facet_0][3][0];
    A[625] = sp[540] * PI0[facet_1][facet_0][3][1];
    A[626] = sp[540] * PI0[facet_1][facet_0][3][2];
    A[627] = sp[540] * PI0[facet_1][facet_0][3][3];
    A[628] = sp[541] * PI0[facet_1][facet_0][3][0];
    A[629] = sp[541] * PI0[facet_1][facet_0][3][1];
    A[630] = sp[541] * PI0[facet_1][facet_0][3][2];
    A[631] = sp[541] * PI0[facet_1][facet_0][3][3];
    A[632] = sp[542] * PI0[facet_1][facet_0][3][0];
    A[633] = sp[542] * PI0[facet_1][facet_0][3][1];
    A[634] = sp[542] * PI0[facet_1][facet_0][3][2];
    A[635] = sp[542] * PI0[facet_1][facet_0][3][3];
    A[636] = sp[539] * PI1[facet_1][0][3][0];
    A[637] = sp[543] * PI0[facet_1][facet_1][3][0];
    A[638] = sp[543] * PI0[facet_1][facet_1][3][1];
    A[639] = sp[543] * PI0[facet_1][facet_1][3][2];
    A[640] = sp[543] * PI0[facet_1][facet_1][3][3];
    A[641] = sp[544] * PI0[facet_1][facet_1][3][0];
    A[642] = sp[544] * PI0[facet_1][facet_1][3][1];
    A[643] = sp[544] * PI0[facet_1][facet_1][3][2];
    A[644] = sp[544] * PI0[facet_1][facet_1][3][3];
    A[645] = sp[545] * PI0[facet_1][facet_1][3][0];
    A[646] = sp[545] * PI0[facet_1][facet_1][3][1];
    A[647] = sp[545] * PI0[facet_1][facet_1][3][2];
    A[648] = sp[545] * PI0[facet_1][facet_1][3][3];
    A[649] = sp[539] * PI1[facet_1][0][3][0];
    A[650] = sp[546] * PI1[facet_0][0][0][0];
    A[651] = sp[546] * PI1[facet_0][0][1][0];
    A[652] = sp[546] * PI1[facet_0][0][2][0];
    A[653] = sp[546] * PI1[facet_0][0][3][0];
    A[654] = sp[547] * PI1[facet_0][0][0][0];
    A[655] = sp[547] * PI1[facet_0][0][1][0];
    A[656] = sp[547] * PI1[facet_0][0][2][0];
    A[657] = sp[547] * PI1[facet_0][0][3][0];
    A[658] = sp[548] * PI1[facet_0][0][0][0];
    A[659] = sp[548] * PI1[facet_0][0][1][0];
    A[660] = sp[548] * PI1[facet_0][0][2][0];
    A[661] = sp[548] * PI1[facet_0][0][3][0];
    A[662] = 0.0;
    A[663] = sp[549] * PI1[facet_1][0][0][0];
    A[664] = sp[549] * PI1[facet_1][0][1][0];
    A[665] = sp[549] * PI1[facet_1][0][2][0];
    A[666] = sp[549] * PI1[facet_1][0][3][0];
    A[667] = sp[550] * PI1[facet_1][0][0][0];
    A[668] = sp[550] * PI1[facet_1][0][1][0];
    A[669] = sp[550] * PI1[facet_1][0][2][0];
    A[670] = sp[550] * PI1[facet_1][0][3][0];
    A[671] = sp[551] * PI1[facet_1][0][0][0];
    A[672] = sp[551] * PI1[facet_1][0][1][0];
    A[673] = sp[551] * PI1[facet_1][0][2][0];
    A[674] = sp[551] * PI1[facet_1][0][3][0];
    A[675] = 0.0;
}


stiff3d_cell_integral_1_otherwise::stiff3d_cell_integral_1_otherwise() : ufc::cell_integral()
{

}

stiff3d_cell_integral_1_otherwise::~stiff3d_cell_integral_1_otherwise()
{

}

const std::vector<bool> & stiff3d_cell_integral_1_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true});
return enabled;
}

void stiff3d_cell_integral_1_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 1
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 1
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           1
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE8_C0_D001_Q1[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE8_C0_D001_Q1[0][0][0] + coordinate_dofs[3] * FE8_C0_D001_Q1[0][0][1];
    const double J_c4 = coordinate_dofs[1] * FE8_C0_D001_Q1[0][0][0] + coordinate_dofs[7] * FE8_C0_D001_Q1[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE8_C0_D001_Q1[0][0][0] + coordinate_dofs[11] * FE8_C0_D001_Q1[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE8_C0_D001_Q1[0][0][0] + coordinate_dofs[10] * FE8_C0_D001_Q1[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE8_C0_D001_Q1[0][0][0] + coordinate_dofs[8] * FE8_C0_D001_Q1[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE8_C0_D001_Q1[0][0][0] + coordinate_dofs[6] * FE8_C0_D001_Q1[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE8_C0_D001_Q1[0][0][0] + coordinate_dofs[5] * FE8_C0_D001_Q1[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE8_C0_D001_Q1[0][0][0] + coordinate_dofs[4] * FE8_C0_D001_Q1[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE8_C0_D001_Q1[0][0][0] + coordinate_dofs[9] * FE8_C0_D001_Q1[0][0][1];
    alignas(32) double sp[16];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = std::abs(sp[13]);
    sp[15] = sp[14] * w[0][0];
    std::fill(A, A + 12, 0.0);
    A[12] = 0.1666666666666667 * sp[15];
}


stiff3d_form_0::stiff3d_form_0() : ufc::form()
{
    // Do nothing
}

stiff3d_form_0::~stiff3d_form_0()
{
    // Do nothing
}

const char * stiff3d_form_0::signature() const
{
    return "bd3c41d5d5d548a9c9f24bb12d3866033817b7e677c3dc66c7af17a8c4dd14ceb8bc653a3c586740b4ffe385cf7fc775ba77a135308d9907f6f76932b46a2f50";
}

std::size_t stiff3d_form_0::rank() const
{
    return 2;
}

std::size_t stiff3d_form_0::num_coefficients() const
{
    return 0;
}

std::size_t stiff3d_form_0::original_coefficient_position(std::size_t i) const
{
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
}

ufc::finite_element * stiff3d_form_0::create_coordinate_finite_element() const
{
    return new stiff3d_finite_element_1();
}

ufc::dofmap * stiff3d_form_0::create_coordinate_dofmap() const
{
    return new stiff3d_dofmap_1();
}

ufc::coordinate_mapping * stiff3d_form_0::create_coordinate_mapping() const
{
    return new stiff3d_coordinate_mapping_1();
}

ufc::finite_element * stiff3d_form_0::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff3d_finite_element_5();
    case 1:
        return new stiff3d_finite_element_5();
    default:
        return nullptr;
    }
}

ufc::dofmap * stiff3d_form_0::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff3d_dofmap_5();
    case 1:
        return new stiff3d_dofmap_5();
    default:
        return nullptr;
    }
}

std::size_t stiff3d_form_0::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t stiff3d_form_0::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t stiff3d_form_0::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t stiff3d_form_0::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t stiff3d_form_0::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t stiff3d_form_0::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t stiff3d_form_0::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t stiff3d_form_0::max_overlap_subdomain_id() const
{
    return 0;
}

bool stiff3d_form_0::has_cell_integrals() const
{
    return true;
}

bool stiff3d_form_0::has_exterior_facet_integrals() const
{
    return false;
}

bool stiff3d_form_0::has_interior_facet_integrals() const
{
    return true;
}

bool stiff3d_form_0::has_vertex_integrals() const
{
    return false;
}

bool stiff3d_form_0::has_custom_integrals() const
{
    return false;
}

bool stiff3d_form_0::has_cutcell_integrals() const
{
    return false;
}

bool stiff3d_form_0::has_interface_integrals() const
{
    return false;
}

bool stiff3d_form_0::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * stiff3d_form_0::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * stiff3d_form_0::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * stiff3d_form_0::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * stiff3d_form_0::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * stiff3d_form_0::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * stiff3d_form_0::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * stiff3d_form_0::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * stiff3d_form_0::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * stiff3d_form_0::create_default_cell_integral() const
{
    return new stiff3d_cell_integral_0_otherwise();
}

ufc::exterior_facet_integral * stiff3d_form_0::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * stiff3d_form_0::create_default_interior_facet_integral() const
{
    return new stiff3d_interior_facet_integral_0_otherwise();
}

ufc::vertex_integral * stiff3d_form_0::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * stiff3d_form_0::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * stiff3d_form_0::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * stiff3d_form_0::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * stiff3d_form_0::create_default_overlap_integral() const
{
    return nullptr;
}


stiff3d_form_1::stiff3d_form_1() : ufc::form()
{
    // Do nothing
}

stiff3d_form_1::~stiff3d_form_1()
{
    // Do nothing
}

const char * stiff3d_form_1::signature() const
{
    return "1cf4604a944eb2360e9379bd5c35179b0860a9d8dfb6abddb5cea123e8f8f7df662e7929b1dd6c5a8ce828bde3cfd40626534c0b46cd391a4d004b18a6bcc3b9";
}

std::size_t stiff3d_form_1::rank() const
{
    return 1;
}

std::size_t stiff3d_form_1::num_coefficients() const
{
    return 1;
}

std::size_t stiff3d_form_1::original_coefficient_position(std::size_t i) const
{
    if (i >= 1)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0};
    return position[i];
}

ufc::finite_element * stiff3d_form_1::create_coordinate_finite_element() const
{
    return new stiff3d_finite_element_1();
}

ufc::dofmap * stiff3d_form_1::create_coordinate_dofmap() const
{
    return new stiff3d_dofmap_1();
}

ufc::coordinate_mapping * stiff3d_form_1::create_coordinate_mapping() const
{
    return new stiff3d_coordinate_mapping_1();
}

ufc::finite_element * stiff3d_form_1::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff3d_finite_element_5();
    case 1:
        return new stiff3d_finite_element_4();
    default:
        return nullptr;
    }
}

ufc::dofmap * stiff3d_form_1::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff3d_dofmap_5();
    case 1:
        return new stiff3d_dofmap_4();
    default:
        return nullptr;
    }
}

std::size_t stiff3d_form_1::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t stiff3d_form_1::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t stiff3d_form_1::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t stiff3d_form_1::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t stiff3d_form_1::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t stiff3d_form_1::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t stiff3d_form_1::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t stiff3d_form_1::max_overlap_subdomain_id() const
{
    return 0;
}

bool stiff3d_form_1::has_cell_integrals() const
{
    return true;
}

bool stiff3d_form_1::has_exterior_facet_integrals() const
{
    return false;
}

bool stiff3d_form_1::has_interior_facet_integrals() const
{
    return false;
}

bool stiff3d_form_1::has_vertex_integrals() const
{
    return false;
}

bool stiff3d_form_1::has_custom_integrals() const
{
    return false;
}

bool stiff3d_form_1::has_cutcell_integrals() const
{
    return false;
}

bool stiff3d_form_1::has_interface_integrals() const
{
    return false;
}

bool stiff3d_form_1::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * stiff3d_form_1::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * stiff3d_form_1::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * stiff3d_form_1::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * stiff3d_form_1::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * stiff3d_form_1::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * stiff3d_form_1::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * stiff3d_form_1::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * stiff3d_form_1::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * stiff3d_form_1::create_default_cell_integral() const
{
    return new stiff3d_cell_integral_1_otherwise();
}

ufc::exterior_facet_integral * stiff3d_form_1::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * stiff3d_form_1::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * stiff3d_form_1::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * stiff3d_form_1::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * stiff3d_form_1::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * stiff3d_form_1::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * stiff3d_form_1::create_default_overlap_integral() const
{
    return nullptr;
}

