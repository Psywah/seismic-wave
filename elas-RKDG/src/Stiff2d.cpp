// This code conforms with the UFC specification version 2017.2.0.dev0
// and was automatically generated by FFC version 2017.2.0.dev0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   add_tabulate_tensor_timing:     False
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   external_include_dirs:          ''
//   external_includes:              ''
//   external_libraries:             ''
//   external_library_dirs:          ''
//   form_postfix:                   True
//   format:                         'dolfin'
//   generate_dummy_tabulate_tensor: False
//   max_signature_length:           0
//   optimize:                       True
//   precision:                      None
//   quadrature_degree:              None
//   quadrature_rule:                None
//   representation:                 'auto'
//   split:                          True

#include "Stiff2d.h"

stiff2d_finite_element_0::stiff2d_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

stiff2d_finite_element_0::~stiff2d_finite_element_0()
{
    // Do nothing
}

const char * stiff2d_finite_element_0::signature() const
{
    return "FiniteElement('Lagrange', triangle, 1)";
}

ufc::shape stiff2d_finite_element_0::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t stiff2d_finite_element_0::topological_dimension() const
{
    return 2;
}

std::size_t stiff2d_finite_element_0::geometric_dimension() const
{
    return 2;
}

std::size_t stiff2d_finite_element_0::space_dimension() const
{
    return 3;
}

std::size_t stiff2d_finite_element_0::value_rank() const
{
    return 0;
}

std::size_t stiff2d_finite_element_0::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t stiff2d_finite_element_0::value_size() const
{
    return 1;
}

std::size_t stiff2d_finite_element_0::reference_value_rank() const
{
    return 0;
}

std::size_t stiff2d_finite_element_0::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t stiff2d_finite_element_0::reference_value_size() const
{
    return 1;
}

std::size_t stiff2d_finite_element_0::degree() const
{
    return 1;
}

const char * stiff2d_finite_element_0::family() const
{
    return "Lagrange";
}

void stiff2d_finite_element_0::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= 0.7071067811865476;
        basisvalues1[2] *= 1.0;
        basisvalues1[1] *= 1.7320508075688772;
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
    }
}

void stiff2d_finite_element_0::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 3 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[3] = {};
    const std::size_t num_components[3] = { 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= 0.7071067811865476;
        basisvalues1[2] *= 1.0;
        basisvalues1[1] *= 1.7320508075688772;
        double aux_dmats0_basisvalues1[3] = {};
        for (std::size_t r = 0; r < num_derivatives; ++r)
        {
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3];
            // Initialize dmats.
            std::size_t comb = combinations[order - 1][r][0];
            for (std::size_t t = 0; t < 3; ++t)
                for (std::size_t u = 0; u < 3; ++u)
                    dmats[t][u] = dmats0[comb][t][u];
            // Looping derivative order to generate dmats.
            for (std::size_t s = 1; s < order; ++s)
            {
                // Store previous dmats matrix.
                double dmats_old[3][3];
                for (std::size_t t = 0; t < 3; ++t)
                    for (std::size_t u = 0; u < 3; ++u)
                        dmats_old[t][u] = dmats[t][u];
                // Resetting dmats.
                for (std::size_t t = 0; t < 3; ++t)
                    for (std::size_t u = 0; u < 3; ++u)
                        dmats[t][u] = 0.0;
                // Update dmats using an inner product.
                comb = combinations[order - 1][r][s];
                for (std::size_t t = 0; t < 3; ++t)
                    for (std::size_t u = 0; u < 3; ++u)
                        for (std::size_t tu = 0; tu < 3; ++tu)
                            dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
            }
            for (std::size_t s = 0; s < 3; ++s)
                for (std::size_t t = 0; t < 3; ++t)
                    aux_dmats0_basisvalues1[s] += dmats[s][t] * basisvalues1[t];
        }
        // Loop over all dofs
        for (std::size_t i = 0; i < 3; ++i)
        {
            double derivatives[2];
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[3 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void stiff2d_finite_element_0::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 3 * num_derivatives, 0.0);
    const std::size_t reference_offsets[3] = {};
    const std::size_t physical_offsets[3] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 3; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[3 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[3 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void stiff2d_finite_element_0::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff2d_finite_element_0::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
}

void stiff2d_finite_element_0::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[2][1];
    for (unsigned int row = 0; row < 2; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K[0], K[1]}, {K[2], K[3]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[2][2];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff2d_finite_element_0::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 3; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[2];
    for (unsigned int r = 0; r < 2; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double stiff2d_finite_element_0::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void stiff2d_finite_element_0::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
}

void stiff2d_finite_element_0::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
}

void stiff2d_finite_element_0::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
}

void stiff2d_finite_element_0::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[6] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 6, reference_dof_coordinates);
}

std::size_t stiff2d_finite_element_0::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * stiff2d_finite_element_0::create_sub_element(std::size_t i) const
{
    return nullptr;
}

ufc::finite_element * stiff2d_finite_element_0::create() const
{
    return new stiff2d_finite_element_0();
}


stiff2d_finite_element_1::stiff2d_finite_element_1() : ufc::finite_element()
{
    // Do nothing
}

stiff2d_finite_element_1::~stiff2d_finite_element_1()
{
    // Do nothing
}

const char * stiff2d_finite_element_1::signature() const
{
    return "VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
}

ufc::shape stiff2d_finite_element_1::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t stiff2d_finite_element_1::topological_dimension() const
{
    return 2;
}

std::size_t stiff2d_finite_element_1::geometric_dimension() const
{
    return 2;
}

std::size_t stiff2d_finite_element_1::space_dimension() const
{
    return 6;
}

std::size_t stiff2d_finite_element_1::value_rank() const
{
    return 1;
}

std::size_t stiff2d_finite_element_1::value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t stiff2d_finite_element_1::value_size() const
{
    return 2;
}

std::size_t stiff2d_finite_element_1::reference_value_rank() const
{
    return 1;
}

std::size_t stiff2d_finite_element_1::reference_value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t stiff2d_finite_element_1::reference_value_size() const
{
    return 2;
}

std::size_t stiff2d_finite_element_1::degree() const
{
    return 1;
}

const char * stiff2d_finite_element_1::family() const
{
    return "Lagrange";
}

void stiff2d_finite_element_1::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 6 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= 0.7071067811865476;
        basisvalues1[2] *= 1.0;
        basisvalues1[1] *= 1.7320508075688772;
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 3 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 4 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 5 + 1] += coefficients2[0][r] * basisvalues1[r];
    }
}

void stiff2d_finite_element_1::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives * 2, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= 0.7071067811865476;
        basisvalues1[2] *= 1.0;
        basisvalues1[1] *= 1.7320508075688772;
        double aux_dmats0_basisvalues1[3] = {};
        for (std::size_t r = 0; r < num_derivatives; ++r)
        {
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3];
            // Initialize dmats.
            std::size_t comb = combinations[order - 1][r][0];
            for (std::size_t t = 0; t < 3; ++t)
                for (std::size_t u = 0; u < 3; ++u)
                    dmats[t][u] = dmats0[comb][t][u];
            // Looping derivative order to generate dmats.
            for (std::size_t s = 1; s < order; ++s)
            {
                // Store previous dmats matrix.
                double dmats_old[3][3];
                for (std::size_t t = 0; t < 3; ++t)
                    for (std::size_t u = 0; u < 3; ++u)
                        dmats_old[t][u] = dmats[t][u];
                // Resetting dmats.
                for (std::size_t t = 0; t < 3; ++t)
                    for (std::size_t u = 0; u < 3; ++u)
                        dmats[t][u] = 0.0;
                // Update dmats using an inner product.
                comb = combinations[order - 1][r][s];
                for (std::size_t t = 0; t < 3; ++t)
                    for (std::size_t u = 0; u < 3; ++u)
                        for (std::size_t tu = 0; tu < 3; ++tu)
                            dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
            }
            for (std::size_t s = 0; s < 3; ++s)
                for (std::size_t t = 0; t < 3; ++t)
                    aux_dmats0_basisvalues1[s] += dmats[s][t] * basisvalues1[t];
        }
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[2];
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void stiff2d_finite_element_1::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t physical_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void stiff2d_finite_element_1::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff2d_finite_element_1::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 6; r++)
    {
      evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void stiff2d_finite_element_1::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[2][1];
    for (unsigned int row = 0; row < 2; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K[0], K[1]}, {K[2], K[3]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[2][2];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff2d_finite_element_1::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 6; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[4];
    for (unsigned int r = 0; r < 4; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double stiff2d_finite_element_1::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
}

void stiff2d_finite_element_1::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[3] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[4] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[5] = vals[1];
}

void stiff2d_finite_element_1::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
}

void stiff2d_finite_element_1::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = coordinate_dofs[0];
    dof_coordinates[2 * 3 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 4] = coordinate_dofs[2];
    dof_coordinates[2 * 4 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 5] = coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = coordinate_dofs[5];
}

void stiff2d_finite_element_1::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
}

std::size_t stiff2d_finite_element_1::num_sub_elements() const
{
    return 2;
}

ufc::finite_element * stiff2d_finite_element_1::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff2d_finite_element_0();
    case 1:
        return new stiff2d_finite_element_0();
    default:
        return nullptr;
    }
}

ufc::finite_element * stiff2d_finite_element_1::create() const
{
    return new stiff2d_finite_element_1();
}


stiff2d_finite_element_2::stiff2d_finite_element_2() : ufc::finite_element()
{
    // Do nothing
}

stiff2d_finite_element_2::~stiff2d_finite_element_2()
{
    // Do nothing
}

const char * stiff2d_finite_element_2::signature() const
{
    return "FiniteElement('Discontinuous Lagrange', triangle, 2)";
}

ufc::shape stiff2d_finite_element_2::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t stiff2d_finite_element_2::topological_dimension() const
{
    return 2;
}

std::size_t stiff2d_finite_element_2::geometric_dimension() const
{
    return 2;
}

std::size_t stiff2d_finite_element_2::space_dimension() const
{
    return 6;
}

std::size_t stiff2d_finite_element_2::value_rank() const
{
    return 0;
}

std::size_t stiff2d_finite_element_2::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t stiff2d_finite_element_2::value_size() const
{
    return 1;
}

std::size_t stiff2d_finite_element_2::reference_value_rank() const
{
    return 0;
}

std::size_t stiff2d_finite_element_2::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t stiff2d_finite_element_2::reference_value_size() const
{
    return 1;
}

std::size_t stiff2d_finite_element_2::degree() const
{
    return 2;
}

const char * stiff2d_finite_element_2::family() const
{
    return "Discontinuous Lagrange";
}

void stiff2d_finite_element_2::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    for (std::size_t k = 0; k < num_points * 6; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= 0.7071067811865476;
        basisvalues2[2] *= 1.0;
        basisvalues2[5] *= 1.224744871391589;
        basisvalues2[1] *= 1.7320508075688772;
        basisvalues2[4] *= 2.1213203435596424;
        basisvalues2[3] *= 2.7386127875258306;
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 5] += coefficients5[0][r] * basisvalues2[r];
    }
}

void stiff2d_finite_element_2::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
            { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
            { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    const std::size_t reference_offset[6] = {};
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= 0.7071067811865476;
        basisvalues2[2] *= 1.0;
        basisvalues2[5] *= 1.224744871391589;
        basisvalues2[1] *= 1.7320508075688772;
        basisvalues2[4] *= 2.1213203435596424;
        basisvalues2[3] *= 2.7386127875258306;
        double aux_dmats0_basisvalues2[6] = {};
        for (std::size_t r = 0; r < num_derivatives; ++r)
        {
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6];
            // Initialize dmats.
            std::size_t comb = combinations[order - 1][r][0];
            for (std::size_t t = 0; t < 6; ++t)
                for (std::size_t u = 0; u < 6; ++u)
                    dmats[t][u] = dmats0[comb][t][u];
            // Looping derivative order to generate dmats.
            for (std::size_t s = 1; s < order; ++s)
            {
                // Store previous dmats matrix.
                double dmats_old[6][6];
                for (std::size_t t = 0; t < 6; ++t)
                    for (std::size_t u = 0; u < 6; ++u)
                        dmats_old[t][u] = dmats[t][u];
                // Resetting dmats.
                for (std::size_t t = 0; t < 6; ++t)
                    for (std::size_t u = 0; u < 6; ++u)
                        dmats[t][u] = 0.0;
                // Update dmats using an inner product.
                comb = combinations[order - 1][r][s];
                for (std::size_t t = 0; t < 6; ++t)
                    for (std::size_t u = 0; u < 6; ++u)
                        for (std::size_t tu = 0; tu < 6; ++tu)
                            dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
            }
            for (std::size_t s = 0; s < 6; ++s)
                for (std::size_t t = 0; t < 6; ++t)
                    aux_dmats0_basisvalues2[s] += dmats[s][t] * basisvalues2[t];
        }
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[4];
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void stiff2d_finite_element_2::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives, 0.0);
    const std::size_t reference_offsets[6] = {};
    const std::size_t physical_offsets[6] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void stiff2d_finite_element_2::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.1732050807568877, -0.1, 0.1217161238900369, 0.09428090415820636, 0.05443310539518173};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.1732050807568878, -0.1, 0.1217161238900369, -0.09428090415820635, 0.05443310539518176};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.1885618083164126, -0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910315, -0.2309401076758503, 0.1333333333333333, 0.0, -0.1885618083164126, -0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910317, 0.0, -0.2666666666666666, -0.2434322477800738, 0.0, 0.05443310539518173};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff2d_finite_element_2::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 6; r++)
    {
      evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
}

void stiff2d_finite_element_2::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[4][2];
    for (unsigned int row = 0; row < 4; row++)
    {
      for (unsigned int col = 0; col < 2; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K[0], K[1]}, {K[2], K[3]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[4][4];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.1732050807568877, -0.1, 0.1217161238900369, 0.09428090415820636, 0.05443310539518173};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.1732050807568878, -0.1, 0.1217161238900369, -0.09428090415820635, 0.05443310539518176};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.1885618083164126, -0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910315, -0.2309401076758503, 0.1333333333333333, 0.0, -0.1885618083164126, -0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910317, 0.0, -0.2666666666666666, -0.2434322477800738, 0.0, 0.05443310539518173};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff2d_finite_element_2::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 6; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[4];
    for (unsigned int r = 0; r < 4; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double stiff2d_finite_element_2::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void stiff2d_finite_element_2::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
}

void stiff2d_finite_element_2::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
}

void stiff2d_finite_element_2::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
}

void stiff2d_finite_element_2::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
}

std::size_t stiff2d_finite_element_2::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * stiff2d_finite_element_2::create_sub_element(std::size_t i) const
{
    return nullptr;
}

ufc::finite_element * stiff2d_finite_element_2::create() const
{
    return new stiff2d_finite_element_2();
}


stiff2d_finite_element_3::stiff2d_finite_element_3() : ufc::finite_element()
{
    // Do nothing
}

stiff2d_finite_element_3::~stiff2d_finite_element_3()
{
    // Do nothing
}

const char * stiff2d_finite_element_3::signature() const
{
    return "TensorElement(FiniteElement('Discontinuous Lagrange', triangle, 2), shape=(2, 2), symmetry={(1, 0): (0, 1)})";
}

ufc::shape stiff2d_finite_element_3::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t stiff2d_finite_element_3::topological_dimension() const
{
    return 2;
}

std::size_t stiff2d_finite_element_3::geometric_dimension() const
{
    return 2;
}

std::size_t stiff2d_finite_element_3::space_dimension() const
{
    return 18;
}

std::size_t stiff2d_finite_element_3::value_rank() const
{
    return 2;
}

std::size_t stiff2d_finite_element_3::value_dimension(std::size_t i) const
{
    static const int return_values[2] = { 2, 2 };
    if (i >= 2)
        return 1;
    return return_values[i];
}

std::size_t stiff2d_finite_element_3::value_size() const
{
    return 4;
}

std::size_t stiff2d_finite_element_3::reference_value_rank() const
{
    return 1;
}

std::size_t stiff2d_finite_element_3::reference_value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t stiff2d_finite_element_3::reference_value_size() const
{
    return 3;
}

std::size_t stiff2d_finite_element_3::degree() const
{
    return 2;
}

const char * stiff2d_finite_element_3::family() const
{
    return "Discontinuous Lagrange";
}

void stiff2d_finite_element_3::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    for (std::size_t k = 0; k < num_points * 18 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= 0.7071067811865476;
        basisvalues2[2] *= 1.0;
        basisvalues2[5] *= 1.224744871391589;
        basisvalues2[1] *= 1.7320508075688772;
        basisvalues2[4] *= 2.1213203435596424;
        basisvalues2[3] *= 2.7386127875258306;
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 3 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 3 * ip + 3] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 3 * ip + 3 * 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 3 * ip + 3 * 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 3 * ip + 3 * 6 + 1] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 3 * ip + 3 * 7 + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 3 * ip + 3 * 8 + 1] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 3 * ip + 3 * 9 + 1] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 3 * ip + 3 * 10 + 1] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 3 * ip + 3 * 11 + 1] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 3 * ip + 3 * 12 + 2] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 3 * ip + 3 * 13 + 2] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 3 * ip + 3 * 14 + 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 3 * ip + 3 * 15 + 2] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 3 * ip + 3 * 16 + 2] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 3 * ip + 3 * 17 + 2] += coefficients5[0][r] * basisvalues2[r];
    }
}

void stiff2d_finite_element_3::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 18 * num_derivatives * 3, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
            { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
            { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    const std::size_t reference_offset[18] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2 };
    const std::size_t num_components[18] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= 0.7071067811865476;
        basisvalues2[2] *= 1.0;
        basisvalues2[5] *= 1.224744871391589;
        basisvalues2[1] *= 1.7320508075688772;
        basisvalues2[4] *= 2.1213203435596424;
        basisvalues2[3] *= 2.7386127875258306;
        double aux_dmats0_basisvalues2[6] = {};
        for (std::size_t r = 0; r < num_derivatives; ++r)
        {
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6];
            // Initialize dmats.
            std::size_t comb = combinations[order - 1][r][0];
            for (std::size_t t = 0; t < 6; ++t)
                for (std::size_t u = 0; u < 6; ++u)
                    dmats[t][u] = dmats0[comb][t][u];
            // Looping derivative order to generate dmats.
            for (std::size_t s = 1; s < order; ++s)
            {
                // Store previous dmats matrix.
                double dmats_old[6][6];
                for (std::size_t t = 0; t < 6; ++t)
                    for (std::size_t u = 0; u < 6; ++u)
                        dmats_old[t][u] = dmats[t][u];
                // Resetting dmats.
                for (std::size_t t = 0; t < 6; ++t)
                    for (std::size_t u = 0; u < 6; ++u)
                        dmats[t][u] = 0.0;
                // Update dmats using an inner product.
                comb = combinations[order - 1][r][s];
                for (std::size_t t = 0; t < 6; ++t)
                    for (std::size_t u = 0; u < 6; ++u)
                        for (std::size_t tu = 0; tu < 6; ++tu)
                            dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
            }
            for (std::size_t s = 0; s < 6; ++s)
                for (std::size_t t = 0; t < 6; ++t)
                    aux_dmats0_basisvalues2[s] += dmats[s][t] * basisvalues2[t];
        }
        // Loop over all dofs
        for (std::size_t i = 0; i < 18; ++i)
        {
            double derivatives[4];
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 16:
                // Compute reference derivatives for dof 16.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 17:
                // Compute reference derivatives for dof 17.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[18 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void stiff2d_finite_element_3::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 18 * num_derivatives * 4, 0.0);
    const std::size_t reference_offsets[18] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2 };
    const std::size_t physical_offsets[18] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 18; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[18 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[18 * (num_derivatives * 4) * ip + num_derivatives * 4 * d + 4 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void stiff2d_finite_element_3::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.1732050807568877, -0.1, 0.1217161238900369, 0.09428090415820636, 0.05443310539518173};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.1732050807568878, -0.1, 0.1217161238900369, -0.09428090415820635, 0.05443310539518176};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.1885618083164126, -0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910315, -0.2309401076758503, 0.1333333333333333, 0.0, -0.1885618083164126, -0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910317, 0.0, -0.2666666666666666, -0.2434322477800738, 0.0, 0.05443310539518173};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.1732050807568877, -0.1, 0.1217161238900369, 0.09428090415820636, 0.05443310539518173};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.1732050807568878, -0.1, 0.1217161238900369, -0.09428090415820635, 0.05443310539518176};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.1885618083164126, -0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910315, -0.2309401076758503, 0.1333333333333333, 0.0, -0.1885618083164126, -0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910317, 0.0, -0.2666666666666666, -0.2434322477800738, 0.0, 0.05443310539518173};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.1732050807568877, -0.1, 0.1217161238900369, 0.09428090415820636, 0.05443310539518173};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.1732050807568878, -0.1, 0.1217161238900369, -0.09428090415820635, 0.05443310539518176};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.1885618083164126, -0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910315, -0.2309401076758503, 0.1333333333333333, 0.0, -0.1885618083164126, -0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910317, 0.0, -0.2666666666666666, -0.2434322477800738, 0.0, 0.05443310539518173};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff2d_finite_element_3::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {0.0, 0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 18; r++)
    {
      evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 4; s++)
      {
        values[r*4 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void stiff2d_finite_element_3::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 4*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[4][2];
    for (unsigned int row = 0; row < 4; row++)
    {
      for (unsigned int col = 0; col < 2; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K[0], K[1]}, {K[2], K[3]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[4][4];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.1732050807568877, -0.1, 0.1217161238900369, 0.09428090415820636, 0.05443310539518173};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.1732050807568878, -0.1, 0.1217161238900369, -0.09428090415820635, 0.05443310539518176};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.1885618083164126, -0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910315, -0.2309401076758503, 0.1333333333333333, 0.0, -0.1885618083164126, -0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910317, 0.0, -0.2666666666666666, -0.2434322477800738, 0.0, 0.05443310539518173};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.1732050807568877, -0.1, 0.1217161238900369, 0.09428090415820636, 0.05443310539518173};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.1732050807568878, -0.1, 0.1217161238900369, -0.09428090415820635, 0.05443310539518176};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.1885618083164126, -0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910315, -0.2309401076758503, 0.1333333333333333, 0.0, -0.1885618083164126, -0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910317, 0.0, -0.2666666666666666, -0.2434322477800738, 0.0, 0.05443310539518173};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.1732050807568877, -0.1, 0.1217161238900369, 0.09428090415820636, 0.05443310539518173};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.1732050807568878, -0.1, 0.1217161238900369, -0.09428090415820635, 0.05443310539518176};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.1885618083164126, -0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910315, -0.2309401076758503, 0.1333333333333333, 0.0, -0.1885618083164126, -0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910317, 0.0, -0.2666666666666666, -0.2434322477800738, 0.0, 0.05443310539518173};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff2d_finite_element_3::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 18; r++)
    {
      for (unsigned int s = 0; s < 4*num_derivatives; s++)
      {
        values[r*4*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[16];
    for (unsigned int r = 0; r < 16; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 18; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 4*num_derivatives; s++)
      {
        values[r*4*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double stiff2d_finite_element_3::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[4];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 12:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 13:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 14:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 15:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 16:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 17:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
}

void stiff2d_finite_element_3::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[4];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[6] = vals[1];
    values[12] = vals[2];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[7] = vals[1];
    values[13] = vals[2];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[8] = vals[1];
    values[14] = vals[2];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    values[9] = vals[1];
    values[15] = vals[2];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    values[10] = vals[1];
    values[16] = vals[2];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    values[11] = vals[1];
    values[17] = vals[2];
}

void stiff2d_finite_element_3::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    throw std::runtime_error("interpolate_vertex_values: Failed to set physical value size correctly for subelements.");
}

void stiff2d_finite_element_3::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 6] = coordinate_dofs[0];
    dof_coordinates[2 * 6 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 7] = coordinate_dofs[2];
    dof_coordinates[2 * 7 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 8] = coordinate_dofs[4];
    dof_coordinates[2 * 8 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 9] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 9 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 10] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 10 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 11] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 12] = coordinate_dofs[0];
    dof_coordinates[2 * 12 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 13] = coordinate_dofs[2];
    dof_coordinates[2 * 13 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 14] = coordinate_dofs[4];
    dof_coordinates[2 * 14 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 15] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 15 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 16] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 16 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 17] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 17 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
}

void stiff2d_finite_element_3::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[36] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0 };
    std::copy_n(dof_X, 36, reference_dof_coordinates);
}

std::size_t stiff2d_finite_element_3::num_sub_elements() const
{
    return 3;
}

ufc::finite_element * stiff2d_finite_element_3::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff2d_finite_element_2();
    case 1:
        return new stiff2d_finite_element_2();
    case 2:
        return new stiff2d_finite_element_2();
    default:
        return nullptr;
    }
}

ufc::finite_element * stiff2d_finite_element_3::create() const
{
    return new stiff2d_finite_element_3();
}


stiff2d_finite_element_4::stiff2d_finite_element_4() : ufc::finite_element()
{
    // Do nothing
}

stiff2d_finite_element_4::~stiff2d_finite_element_4()
{
    // Do nothing
}

const char * stiff2d_finite_element_4::signature() const
{
    return "FiniteElement('Discontinuous Lagrange', triangle, 1)";
}

ufc::shape stiff2d_finite_element_4::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t stiff2d_finite_element_4::topological_dimension() const
{
    return 2;
}

std::size_t stiff2d_finite_element_4::geometric_dimension() const
{
    return 2;
}

std::size_t stiff2d_finite_element_4::space_dimension() const
{
    return 3;
}

std::size_t stiff2d_finite_element_4::value_rank() const
{
    return 0;
}

std::size_t stiff2d_finite_element_4::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t stiff2d_finite_element_4::value_size() const
{
    return 1;
}

std::size_t stiff2d_finite_element_4::reference_value_rank() const
{
    return 0;
}

std::size_t stiff2d_finite_element_4::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t stiff2d_finite_element_4::reference_value_size() const
{
    return 1;
}

std::size_t stiff2d_finite_element_4::degree() const
{
    return 1;
}

const char * stiff2d_finite_element_4::family() const
{
    return "Discontinuous Lagrange";
}

void stiff2d_finite_element_4::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= 0.7071067811865476;
        basisvalues1[2] *= 1.0;
        basisvalues1[1] *= 1.7320508075688772;
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
    }
}

void stiff2d_finite_element_4::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 3 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[3] = {};
    const std::size_t num_components[3] = { 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= 0.7071067811865476;
        basisvalues1[2] *= 1.0;
        basisvalues1[1] *= 1.7320508075688772;
        double aux_dmats0_basisvalues1[3] = {};
        for (std::size_t r = 0; r < num_derivatives; ++r)
        {
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3];
            // Initialize dmats.
            std::size_t comb = combinations[order - 1][r][0];
            for (std::size_t t = 0; t < 3; ++t)
                for (std::size_t u = 0; u < 3; ++u)
                    dmats[t][u] = dmats0[comb][t][u];
            // Looping derivative order to generate dmats.
            for (std::size_t s = 1; s < order; ++s)
            {
                // Store previous dmats matrix.
                double dmats_old[3][3];
                for (std::size_t t = 0; t < 3; ++t)
                    for (std::size_t u = 0; u < 3; ++u)
                        dmats_old[t][u] = dmats[t][u];
                // Resetting dmats.
                for (std::size_t t = 0; t < 3; ++t)
                    for (std::size_t u = 0; u < 3; ++u)
                        dmats[t][u] = 0.0;
                // Update dmats using an inner product.
                comb = combinations[order - 1][r][s];
                for (std::size_t t = 0; t < 3; ++t)
                    for (std::size_t u = 0; u < 3; ++u)
                        for (std::size_t tu = 0; tu < 3; ++tu)
                            dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
            }
            for (std::size_t s = 0; s < 3; ++s)
                for (std::size_t t = 0; t < 3; ++t)
                    aux_dmats0_basisvalues1[s] += dmats[s][t] * basisvalues1[t];
        }
        // Loop over all dofs
        for (std::size_t i = 0; i < 3; ++i)
        {
            double derivatives[2];
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[3 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void stiff2d_finite_element_4::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 3 * num_derivatives, 0.0);
    const std::size_t reference_offsets[3] = {};
    const std::size_t physical_offsets[3] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 3; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[3 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[3 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void stiff2d_finite_element_4::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff2d_finite_element_4::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
}

void stiff2d_finite_element_4::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[2][1];
    for (unsigned int row = 0; row < 2; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K[0], K[1]}, {K[2], K[3]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[2][2];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff2d_finite_element_4::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 3; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[2];
    for (unsigned int r = 0; r < 2; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double stiff2d_finite_element_4::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void stiff2d_finite_element_4::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
}

void stiff2d_finite_element_4::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
}

void stiff2d_finite_element_4::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
}

void stiff2d_finite_element_4::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[6] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 6, reference_dof_coordinates);
}

std::size_t stiff2d_finite_element_4::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * stiff2d_finite_element_4::create_sub_element(std::size_t i) const
{
    return nullptr;
}

ufc::finite_element * stiff2d_finite_element_4::create() const
{
    return new stiff2d_finite_element_4();
}


stiff2d_finite_element_5::stiff2d_finite_element_5() : ufc::finite_element()
{
    // Do nothing
}

stiff2d_finite_element_5::~stiff2d_finite_element_5()
{
    // Do nothing
}

const char * stiff2d_finite_element_5::signature() const
{
    return "VectorElement(FiniteElement('Discontinuous Lagrange', triangle, 1), dim=2)";
}

ufc::shape stiff2d_finite_element_5::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t stiff2d_finite_element_5::topological_dimension() const
{
    return 2;
}

std::size_t stiff2d_finite_element_5::geometric_dimension() const
{
    return 2;
}

std::size_t stiff2d_finite_element_5::space_dimension() const
{
    return 6;
}

std::size_t stiff2d_finite_element_5::value_rank() const
{
    return 1;
}

std::size_t stiff2d_finite_element_5::value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t stiff2d_finite_element_5::value_size() const
{
    return 2;
}

std::size_t stiff2d_finite_element_5::reference_value_rank() const
{
    return 1;
}

std::size_t stiff2d_finite_element_5::reference_value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t stiff2d_finite_element_5::reference_value_size() const
{
    return 2;
}

std::size_t stiff2d_finite_element_5::degree() const
{
    return 1;
}

const char * stiff2d_finite_element_5::family() const
{
    return "Discontinuous Lagrange";
}

void stiff2d_finite_element_5::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 6 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= 0.7071067811865476;
        basisvalues1[2] *= 1.0;
        basisvalues1[1] *= 1.7320508075688772;
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 3 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 4 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 5 + 1] += coefficients2[0][r] * basisvalues1[r];
    }
}

void stiff2d_finite_element_5::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives * 2, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= 0.7071067811865476;
        basisvalues1[2] *= 1.0;
        basisvalues1[1] *= 1.7320508075688772;
        double aux_dmats0_basisvalues1[3] = {};
        for (std::size_t r = 0; r < num_derivatives; ++r)
        {
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3];
            // Initialize dmats.
            std::size_t comb = combinations[order - 1][r][0];
            for (std::size_t t = 0; t < 3; ++t)
                for (std::size_t u = 0; u < 3; ++u)
                    dmats[t][u] = dmats0[comb][t][u];
            // Looping derivative order to generate dmats.
            for (std::size_t s = 1; s < order; ++s)
            {
                // Store previous dmats matrix.
                double dmats_old[3][3];
                for (std::size_t t = 0; t < 3; ++t)
                    for (std::size_t u = 0; u < 3; ++u)
                        dmats_old[t][u] = dmats[t][u];
                // Resetting dmats.
                for (std::size_t t = 0; t < 3; ++t)
                    for (std::size_t u = 0; u < 3; ++u)
                        dmats[t][u] = 0.0;
                // Update dmats using an inner product.
                comb = combinations[order - 1][r][s];
                for (std::size_t t = 0; t < 3; ++t)
                    for (std::size_t u = 0; u < 3; ++u)
                        for (std::size_t tu = 0; tu < 3; ++tu)
                            dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
            }
            for (std::size_t s = 0; s < 3; ++s)
                for (std::size_t t = 0; t < 3; ++t)
                    aux_dmats0_basisvalues1[s] += dmats[s][t] * basisvalues1[t];
        }
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[2];
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void stiff2d_finite_element_5::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t physical_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void stiff2d_finite_element_5::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff2d_finite_element_5::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 6; r++)
    {
      evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void stiff2d_finite_element_5::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[2][1];
    for (unsigned int row = 0; row < 2; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K[0], K[1]}, {K[2], K[3]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[2][2];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff2d_finite_element_5::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 6; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[4];
    for (unsigned int r = 0; r < 4; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double stiff2d_finite_element_5::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
}

void stiff2d_finite_element_5::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[3] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[4] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[5] = vals[1];
}

void stiff2d_finite_element_5::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
}

void stiff2d_finite_element_5::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = coordinate_dofs[0];
    dof_coordinates[2 * 3 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 4] = coordinate_dofs[2];
    dof_coordinates[2 * 4 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 5] = coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = coordinate_dofs[5];
}

void stiff2d_finite_element_5::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
}

std::size_t stiff2d_finite_element_5::num_sub_elements() const
{
    return 2;
}

ufc::finite_element * stiff2d_finite_element_5::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff2d_finite_element_4();
    case 1:
        return new stiff2d_finite_element_4();
    default:
        return nullptr;
    }
}

ufc::finite_element * stiff2d_finite_element_5::create() const
{
    return new stiff2d_finite_element_5();
}


stiff2d_finite_element_6::stiff2d_finite_element_6() : ufc::finite_element()
{
    // Do nothing
}

stiff2d_finite_element_6::~stiff2d_finite_element_6()
{
    // Do nothing
}

const char * stiff2d_finite_element_6::signature() const
{
    return "MixedElement(TensorElement(FiniteElement('Discontinuous Lagrange', triangle, 2), shape=(2, 2), symmetry={(1, 0): (0, 1)}), VectorElement(FiniteElement('Discontinuous Lagrange', triangle, 1), dim=2))";
}

ufc::shape stiff2d_finite_element_6::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t stiff2d_finite_element_6::topological_dimension() const
{
    return 2;
}

std::size_t stiff2d_finite_element_6::geometric_dimension() const
{
    return 2;
}

std::size_t stiff2d_finite_element_6::space_dimension() const
{
    return 24;
}

std::size_t stiff2d_finite_element_6::value_rank() const
{
    return 1;
}

std::size_t stiff2d_finite_element_6::value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 6 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t stiff2d_finite_element_6::value_size() const
{
    return 6;
}

std::size_t stiff2d_finite_element_6::reference_value_rank() const
{
    return 1;
}

std::size_t stiff2d_finite_element_6::reference_value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 5 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t stiff2d_finite_element_6::reference_value_size() const
{
    return 5;
}

std::size_t stiff2d_finite_element_6::degree() const
{
    return 2;
}

const char * stiff2d_finite_element_6::family() const
{
    return "Mixed";
}

void stiff2d_finite_element_6::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    static const double coefficients18[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients19[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients20[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 24 * 5; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= 0.7071067811865476;
        basisvalues2[2] *= 1.0;
        basisvalues2[5] *= 1.224744871391589;
        basisvalues2[1] *= 1.7320508075688772;
        basisvalues2[4] *= 2.1213203435596424;
        basisvalues2[3] *= 2.7386127875258306;
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= 0.7071067811865476;
        basisvalues1[2] *= 1.0;
        basisvalues1[1] *= 1.7320508075688772;
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[24 * 5 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[24 * 5 * ip + 5] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[24 * 5 * ip + 5 * 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[24 * 5 * ip + 5 * 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[24 * 5 * ip + 5 * 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[24 * 5 * ip + 5 * 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[24 * 5 * ip + 5 * 6 + 1] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[24 * 5 * ip + 5 * 7 + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[24 * 5 * ip + 5 * 8 + 1] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[24 * 5 * ip + 5 * 9 + 1] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[24 * 5 * ip + 5 * 10 + 1] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[24 * 5 * ip + 5 * 11 + 1] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[24 * 5 * ip + 5 * 12 + 2] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[24 * 5 * ip + 5 * 13 + 2] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[24 * 5 * ip + 5 * 14 + 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[24 * 5 * ip + 5 * 15 + 2] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[24 * 5 * ip + 5 * 16 + 2] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[24 * 5 * ip + 5 * 17 + 2] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[24 * 5 * ip + 5 * 18 + 3] += coefficients18[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[24 * 5 * ip + 5 * 19 + 3] += coefficients19[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[24 * 5 * ip + 5 * 20 + 3] += coefficients20[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[24 * 5 * ip + 5 * 21 + 4] += coefficients18[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[24 * 5 * ip + 5 * 22 + 4] += coefficients19[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[24 * 5 * ip + 5 * 23 + 4] += coefficients20[0][r] * basisvalues1[r];
    }
}

void stiff2d_finite_element_6::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 24 * num_derivatives * 5, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
            { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
            { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    alignas(32) static const double dmats18[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    static const double coefficients18[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients19[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients20[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[24] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4 };
    const std::size_t num_components[24] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= 0.7071067811865476;
        basisvalues2[2] *= 1.0;
        basisvalues2[5] *= 1.224744871391589;
        basisvalues2[1] *= 1.7320508075688772;
        basisvalues2[4] *= 2.1213203435596424;
        basisvalues2[3] *= 2.7386127875258306;
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= 0.7071067811865476;
        basisvalues1[2] *= 1.0;
        basisvalues1[1] *= 1.7320508075688772;
        double aux_dmats0_basisvalues2[6] = {};
        for (std::size_t r = 0; r < num_derivatives; ++r)
        {
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6];
            // Initialize dmats.
            std::size_t comb = combinations[order - 1][r][0];
            for (std::size_t t = 0; t < 6; ++t)
                for (std::size_t u = 0; u < 6; ++u)
                    dmats[t][u] = dmats0[comb][t][u];
            // Looping derivative order to generate dmats.
            for (std::size_t s = 1; s < order; ++s)
            {
                // Store previous dmats matrix.
                double dmats_old[6][6];
                for (std::size_t t = 0; t < 6; ++t)
                    for (std::size_t u = 0; u < 6; ++u)
                        dmats_old[t][u] = dmats[t][u];
                // Resetting dmats.
                for (std::size_t t = 0; t < 6; ++t)
                    for (std::size_t u = 0; u < 6; ++u)
                        dmats[t][u] = 0.0;
                // Update dmats using an inner product.
                comb = combinations[order - 1][r][s];
                for (std::size_t t = 0; t < 6; ++t)
                    for (std::size_t u = 0; u < 6; ++u)
                        for (std::size_t tu = 0; tu < 6; ++tu)
                            dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
            }
            for (std::size_t s = 0; s < 6; ++s)
                for (std::size_t t = 0; t < 6; ++t)
                    aux_dmats0_basisvalues2[s] += dmats[s][t] * basisvalues2[t];
        }
        double aux_dmats18_basisvalues1[3] = {};
        for (std::size_t r = 0; r < num_derivatives; ++r)
        {
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3];
            // Initialize dmats.
            std::size_t comb = combinations[order - 1][r][0];
            for (std::size_t t = 0; t < 3; ++t)
                for (std::size_t u = 0; u < 3; ++u)
                    dmats[t][u] = dmats18[comb][t][u];
            // Looping derivative order to generate dmats.
            for (std::size_t s = 1; s < order; ++s)
            {
                // Store previous dmats matrix.
                double dmats_old[3][3];
                for (std::size_t t = 0; t < 3; ++t)
                    for (std::size_t u = 0; u < 3; ++u)
                        dmats_old[t][u] = dmats[t][u];
                // Resetting dmats.
                for (std::size_t t = 0; t < 3; ++t)
                    for (std::size_t u = 0; u < 3; ++u)
                        dmats[t][u] = 0.0;
                // Update dmats using an inner product.
                comb = combinations[order - 1][r][s];
                for (std::size_t t = 0; t < 3; ++t)
                    for (std::size_t u = 0; u < 3; ++u)
                        for (std::size_t tu = 0; tu < 3; ++tu)
                            dmats[t][u] += dmats18[comb][t][tu] * dmats_old[tu][u];
            }
            for (std::size_t s = 0; s < 3; ++s)
                for (std::size_t t = 0; t < 3; ++t)
                    aux_dmats18_basisvalues1[s] += dmats[s][t] * basisvalues1[t];
        }
        // Loop over all dofs
        for (std::size_t i = 0; i < 24; ++i)
        {
            double derivatives[4];
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 16:
                // Compute reference derivatives for dof 16.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 17:
                // Compute reference derivatives for dof 17.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 18:
                // Compute reference derivatives for dof 18.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients18[0][s] * aux_dmats18_basisvalues1[s];
                }
                break;
            case 19:
                // Compute reference derivatives for dof 19.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients19[0][s] * aux_dmats18_basisvalues1[s];
                }
                break;
            case 20:
                // Compute reference derivatives for dof 20.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients20[0][s] * aux_dmats18_basisvalues1[s];
                }
                break;
            case 21:
                // Compute reference derivatives for dof 21.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients18[0][s] * aux_dmats18_basisvalues1[s];
                }
                break;
            case 22:
                // Compute reference derivatives for dof 22.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients19[0][s] * aux_dmats18_basisvalues1[s];
                }
                break;
            case 23:
                // Compute reference derivatives for dof 23.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients20[0][s] * aux_dmats18_basisvalues1[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[24 * (num_derivatives * 5) * ip + num_derivatives * 5 * i + 5 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void stiff2d_finite_element_6::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 24 * num_derivatives * 6, 0.0);
    const std::size_t reference_offsets[24] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4 };
    const std::size_t physical_offsets[24] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 24; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[24 * (num_derivatives * 5) * ip + num_derivatives * 5 * d + 5 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[24 * (num_derivatives * 6) * ip + num_derivatives * 6 * d + 6 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void stiff2d_finite_element_6::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    values[3] = 0.0;
    values[4] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.1732050807568877, -0.1, 0.1217161238900369, 0.09428090415820636, 0.05443310539518173};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.1732050807568878, -0.1, 0.1217161238900369, -0.09428090415820635, 0.05443310539518176};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.1885618083164126, -0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910315, -0.2309401076758503, 0.1333333333333333, 0.0, -0.1885618083164126, -0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910317, 0.0, -0.2666666666666666, -0.2434322477800738, 0.0, 0.05443310539518173};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.1732050807568877, -0.1, 0.1217161238900369, 0.09428090415820636, 0.05443310539518173};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.1732050807568878, -0.1, 0.1217161238900369, -0.09428090415820635, 0.05443310539518176};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.1885618083164126, -0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910315, -0.2309401076758503, 0.1333333333333333, 0.0, -0.1885618083164126, -0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910317, 0.0, -0.2666666666666666, -0.2434322477800738, 0.0, 0.05443310539518173};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.1732050807568877, -0.1, 0.1217161238900369, 0.09428090415820636, 0.05443310539518173};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.1732050807568878, -0.1, 0.1217161238900369, -0.09428090415820635, 0.05443310539518176};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.1885618083164126, -0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910315, -0.2309401076758503, 0.1333333333333333, 0.0, -0.1885618083164126, -0.1632993161855452};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910317, 0.0, -0.2666666666666666, -0.2434322477800738, 0.0, 0.05443310539518173};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff2d_finite_element_6::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 24; r++)
    {
      evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 6; s++)
      {
        values[r*6 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void stiff2d_finite_element_6::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 6*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[4][2];
    for (unsigned int row = 0; row < 4; row++)
    {
      for (unsigned int col = 0; col < 2; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K[0], K[1]}, {K[2], K[3]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[4][4];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.1732050807568877, -0.1, 0.1217161238900369, 0.09428090415820636, 0.05443310539518173};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.1732050807568878, -0.1, 0.1217161238900369, -0.09428090415820635, 0.05443310539518176};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.1885618083164126, -0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910315, -0.2309401076758503, 0.1333333333333333, 0.0, -0.1885618083164126, -0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910317, 0.0, -0.2666666666666666, -0.2434322477800738, 0.0, 0.05443310539518173};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.1732050807568877, -0.1, 0.1217161238900369, 0.09428090415820636, 0.05443310539518173};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.1732050807568878, -0.1, 0.1217161238900369, -0.09428090415820635, 0.05443310539518176};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.1885618083164126, -0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910315, -0.2309401076758503, 0.1333333333333333, 0.0, -0.1885618083164126, -0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910317, 0.0, -0.2666666666666666, -0.2434322477800738, 0.0, 0.05443310539518173};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.1732050807568877, -0.1, 0.1217161238900369, 0.09428090415820636, 0.05443310539518173};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.1732050807568878, -0.1, 0.1217161238900369, -0.09428090415820635, 0.05443310539518176};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.1885618083164126, -0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910315, -0.2309401076758503, 0.1333333333333333, 0.0, -0.1885618083164126, -0.1632993161855452};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.1111111111111111 + Y*1.666666666666667) - basisvalues[0]*0.5555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.4714045207910317, 0.0, -0.2666666666666666, -0.2434322477800738, 0.0, 0.05443310539518173};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0},
      {3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.581988897471618, 4.743416490252574, -0.912870929175279, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.123724356957937, 3.535533905932733, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.164965809277266, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, -0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[4*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910317, 0.2886751345948129, -0.1666666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[4*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.4714045207910316, 0.0, 0.3333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.449489742783182, 0.0, 0.0},
      {4.242640687119285, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[4*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

void stiff2d_finite_element_6::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 24; r++)
    {
      for (unsigned int s = 0; s < 6*num_derivatives; s++)
      {
        values[r*6*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[24];
    for (unsigned int r = 0; r < 24; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 24; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 6*num_derivatives; s++)
      {
        values[r*6*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double stiff2d_finite_element_6::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[6];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 12:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 13:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 14:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 15:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 16:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 17:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 18:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 19:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 20:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 21:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 22:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 23:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    }
    
    return 0.0;
}

void stiff2d_finite_element_6::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[6];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[6] = vals[1];
    values[12] = vals[2];
    values[18] = vals[3];
    values[21] = vals[4];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[7] = vals[1];
    values[13] = vals[2];
    values[19] = vals[3];
    values[22] = vals[4];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[8] = vals[1];
    values[14] = vals[2];
    values[20] = vals[3];
    values[23] = vals[4];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    values[9] = vals[1];
    values[15] = vals[2];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    values[10] = vals[1];
    values[16] = vals[2];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    values[11] = vals[1];
    values[17] = vals[2];
}

void stiff2d_finite_element_6::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    throw std::runtime_error("interpolate_vertex_values: Failed to set physical value size correctly for subelements.");
}

void stiff2d_finite_element_6::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 6] = coordinate_dofs[0];
    dof_coordinates[2 * 6 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 7] = coordinate_dofs[2];
    dof_coordinates[2 * 7 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 8] = coordinate_dofs[4];
    dof_coordinates[2 * 8 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 9] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 9 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 10] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 10 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 11] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 12] = coordinate_dofs[0];
    dof_coordinates[2 * 12 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 13] = coordinate_dofs[2];
    dof_coordinates[2 * 13 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 14] = coordinate_dofs[4];
    dof_coordinates[2 * 14 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 15] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 15 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 16] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 16 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 17] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 17 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 18] = coordinate_dofs[0];
    dof_coordinates[2 * 18 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 19] = coordinate_dofs[2];
    dof_coordinates[2 * 19 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 20] = coordinate_dofs[4];
    dof_coordinates[2 * 20 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 21] = coordinate_dofs[0];
    dof_coordinates[2 * 21 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 22] = coordinate_dofs[2];
    dof_coordinates[2 * 22 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 23] = coordinate_dofs[4];
    dof_coordinates[2 * 23 + 1] = coordinate_dofs[5];
}

void stiff2d_finite_element_6::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[48] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 48, reference_dof_coordinates);
}

std::size_t stiff2d_finite_element_6::num_sub_elements() const
{
    return 2;
}

ufc::finite_element * stiff2d_finite_element_6::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff2d_finite_element_3();
    case 1:
        return new stiff2d_finite_element_5();
    default:
        return nullptr;
    }
}

ufc::finite_element * stiff2d_finite_element_6::create() const
{
    return new stiff2d_finite_element_6();
}


stiff2d_dofmap_0::stiff2d_dofmap_0() : ufc::dofmap()
{
    // Do nothing
}

stiff2d_dofmap_0::~stiff2d_dofmap_0()
{
    // Do nothing
}

const char * stiff2d_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 1)";
}

bool stiff2d_dofmap_0::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
}

std::size_t stiff2d_dofmap_0::topological_dimension() const
{
    return 2;
}

std::size_t stiff2d_dofmap_0::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0];
}

std::size_t stiff2d_dofmap_0::num_global_support_dofs() const
{
    return 0;
}

std::size_t stiff2d_dofmap_0::num_element_support_dofs() const
{
    return 3;
}

std::size_t stiff2d_dofmap_0::num_element_dofs() const
{
    return 3;
}

std::size_t stiff2d_dofmap_0::num_facet_dofs() const
{
    return 2;
}

std::size_t stiff2d_dofmap_0::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[3] = { 1, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
}

std::size_t stiff2d_dofmap_0::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[3] = { 1, 2, 3 };
    if (d >= 3)
        return 0;
    return return_values[d];
}

void stiff2d_dofmap_0::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
}

void stiff2d_dofmap_0::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        break;
    }
}

void stiff2d_dofmap_0::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    }
}

void stiff2d_dofmap_0::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
}

std::size_t stiff2d_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * stiff2d_dofmap_0::create_sub_dofmap(std::size_t i) const
{
    return nullptr;
}

ufc::dofmap * stiff2d_dofmap_0::create() const
{
    return new stiff2d_dofmap_0();
}


stiff2d_dofmap_1::stiff2d_dofmap_1() : ufc::dofmap()
{
    // Do nothing
}

stiff2d_dofmap_1::~stiff2d_dofmap_1()
{
    // Do nothing
}

const char * stiff2d_dofmap_1::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
}

bool stiff2d_dofmap_1::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
}

std::size_t stiff2d_dofmap_1::topological_dimension() const
{
    return 2;
}

std::size_t stiff2d_dofmap_1::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 2 * num_global_entities[0];
}

std::size_t stiff2d_dofmap_1::num_global_support_dofs() const
{
    return 0;
}

std::size_t stiff2d_dofmap_1::num_element_support_dofs() const
{
    return 6;
}

std::size_t stiff2d_dofmap_1::num_element_dofs() const
{
    return 6;
}

std::size_t stiff2d_dofmap_1::num_facet_dofs() const
{
    return 4;
}

std::size_t stiff2d_dofmap_1::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[3] = { 2, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
}

std::size_t stiff2d_dofmap_1::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[3] = { 2, 4, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
}

void stiff2d_dofmap_1::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[0][0];
    dofs[4] = offset + entity_indices[0][1];
    dofs[5] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
}

void stiff2d_dofmap_1::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 5;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        break;
    }
}

void stiff2d_dofmap_1::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    }
}

void stiff2d_dofmap_1::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
}

std::size_t stiff2d_dofmap_1::num_sub_dofmaps() const
{
    return 2;
}

ufc::dofmap * stiff2d_dofmap_1::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff2d_dofmap_0();
    case 1:
        return new stiff2d_dofmap_0();
    default:
        return nullptr;
    }
}

ufc::dofmap * stiff2d_dofmap_1::create() const
{
    return new stiff2d_dofmap_1();
}


stiff2d_dofmap_2::stiff2d_dofmap_2() : ufc::dofmap()
{
    // Do nothing
}

stiff2d_dofmap_2::~stiff2d_dofmap_2()
{
    // Do nothing
}

const char * stiff2d_dofmap_2::signature() const
{
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', triangle, 2)";
}

bool stiff2d_dofmap_2::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[3] = { false, false, true };
    if (d >= 3)
        return false;
    return return_values[d];
}

std::size_t stiff2d_dofmap_2::topological_dimension() const
{
    return 2;
}

std::size_t stiff2d_dofmap_2::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 6 * num_global_entities[2];
}

std::size_t stiff2d_dofmap_2::num_global_support_dofs() const
{
    return 0;
}

std::size_t stiff2d_dofmap_2::num_element_support_dofs() const
{
    return 6;
}

std::size_t stiff2d_dofmap_2::num_element_dofs() const
{
    return 6;
}

std::size_t stiff2d_dofmap_2::num_facet_dofs() const
{
    return 0;
}

std::size_t stiff2d_dofmap_2::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[3] = { 0, 0, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
}

std::size_t stiff2d_dofmap_2::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[3] = { 0, 0, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
}

void stiff2d_dofmap_2::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = 6 * entity_indices[2][0];
    dofs[1] = 6 * entity_indices[2][0] + 1;
    dofs[2] = 6 * entity_indices[2][0] + 2;
    dofs[3] = 6 * entity_indices[2][0] + 3;
    dofs[4] = 6 * entity_indices[2][0] + 4;
    dofs[5] = 6 * entity_indices[2][0] + 5;
}

void stiff2d_dofmap_2::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    // Do nothing
}

void stiff2d_dofmap_2::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
}

void stiff2d_dofmap_2::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
}

std::size_t stiff2d_dofmap_2::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * stiff2d_dofmap_2::create_sub_dofmap(std::size_t i) const
{
    return nullptr;
}

ufc::dofmap * stiff2d_dofmap_2::create() const
{
    return new stiff2d_dofmap_2();
}


stiff2d_dofmap_3::stiff2d_dofmap_3() : ufc::dofmap()
{
    // Do nothing
}

stiff2d_dofmap_3::~stiff2d_dofmap_3()
{
    // Do nothing
}

const char * stiff2d_dofmap_3::signature() const
{
    return "FFC dofmap for TensorElement(FiniteElement('Discontinuous Lagrange', triangle, 2), shape=(2, 2), symmetry={(1, 0): (0, 1)})";
}

bool stiff2d_dofmap_3::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[3] = { false, false, true };
    if (d >= 3)
        return false;
    return return_values[d];
}

std::size_t stiff2d_dofmap_3::topological_dimension() const
{
    return 2;
}

std::size_t stiff2d_dofmap_3::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 18 * num_global_entities[2];
}

std::size_t stiff2d_dofmap_3::num_global_support_dofs() const
{
    return 0;
}

std::size_t stiff2d_dofmap_3::num_element_support_dofs() const
{
    return 18;
}

std::size_t stiff2d_dofmap_3::num_element_dofs() const
{
    return 18;
}

std::size_t stiff2d_dofmap_3::num_facet_dofs() const
{
    return 0;
}

std::size_t stiff2d_dofmap_3::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[3] = { 0, 0, 18 };
    if (d >= 3)
        return 0;
    return return_values[d];
}

std::size_t stiff2d_dofmap_3::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[3] = { 0, 0, 18 };
    if (d >= 3)
        return 0;
    return return_values[d];
}

void stiff2d_dofmap_3::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    std::size_t offset = 0;
    dofs[0] = offset + 6 * entity_indices[2][0];
    dofs[1] = offset + 6 * entity_indices[2][0] + 1;
    dofs[2] = offset + 6 * entity_indices[2][0] + 2;
    dofs[3] = offset + 6 * entity_indices[2][0] + 3;
    dofs[4] = offset + 6 * entity_indices[2][0] + 4;
    dofs[5] = offset + 6 * entity_indices[2][0] + 5;
    offset += 6 * num_global_entities[2];
    dofs[6] = offset + 6 * entity_indices[2][0];
    dofs[7] = offset + 6 * entity_indices[2][0] + 1;
    dofs[8] = offset + 6 * entity_indices[2][0] + 2;
    dofs[9] = offset + 6 * entity_indices[2][0] + 3;
    dofs[10] = offset + 6 * entity_indices[2][0] + 4;
    dofs[11] = offset + 6 * entity_indices[2][0] + 5;
    offset += 6 * num_global_entities[2];
    dofs[12] = offset + 6 * entity_indices[2][0];
    dofs[13] = offset + 6 * entity_indices[2][0] + 1;
    dofs[14] = offset + 6 * entity_indices[2][0] + 2;
    dofs[15] = offset + 6 * entity_indices[2][0] + 3;
    dofs[16] = offset + 6 * entity_indices[2][0] + 4;
    dofs[17] = offset + 6 * entity_indices[2][0] + 5;
    offset += 6 * num_global_entities[2];
}

void stiff2d_dofmap_3::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    // Do nothing
}

void stiff2d_dofmap_3::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            break;
        }
        break;
    }
}

void stiff2d_dofmap_3::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            break;
        }
        break;
    }
}

std::size_t stiff2d_dofmap_3::num_sub_dofmaps() const
{
    return 3;
}

ufc::dofmap * stiff2d_dofmap_3::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff2d_dofmap_2();
    case 1:
        return new stiff2d_dofmap_2();
    case 2:
        return new stiff2d_dofmap_2();
    default:
        return nullptr;
    }
}

ufc::dofmap * stiff2d_dofmap_3::create() const
{
    return new stiff2d_dofmap_3();
}


stiff2d_dofmap_4::stiff2d_dofmap_4() : ufc::dofmap()
{
    // Do nothing
}

stiff2d_dofmap_4::~stiff2d_dofmap_4()
{
    // Do nothing
}

const char * stiff2d_dofmap_4::signature() const
{
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', triangle, 1)";
}

bool stiff2d_dofmap_4::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[3] = { false, false, true };
    if (d >= 3)
        return false;
    return return_values[d];
}

std::size_t stiff2d_dofmap_4::topological_dimension() const
{
    return 2;
}

std::size_t stiff2d_dofmap_4::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 3 * num_global_entities[2];
}

std::size_t stiff2d_dofmap_4::num_global_support_dofs() const
{
    return 0;
}

std::size_t stiff2d_dofmap_4::num_element_support_dofs() const
{
    return 3;
}

std::size_t stiff2d_dofmap_4::num_element_dofs() const
{
    return 3;
}

std::size_t stiff2d_dofmap_4::num_facet_dofs() const
{
    return 0;
}

std::size_t stiff2d_dofmap_4::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[3] = { 0, 0, 3 };
    if (d >= 3)
        return 0;
    return return_values[d];
}

std::size_t stiff2d_dofmap_4::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[3] = { 0, 0, 3 };
    if (d >= 3)
        return 0;
    return return_values[d];
}

void stiff2d_dofmap_4::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = 3 * entity_indices[2][0];
    dofs[1] = 3 * entity_indices[2][0] + 1;
    dofs[2] = 3 * entity_indices[2][0] + 2;
}

void stiff2d_dofmap_4::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    // Do nothing
}

void stiff2d_dofmap_4::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
}

void stiff2d_dofmap_4::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
}

std::size_t stiff2d_dofmap_4::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * stiff2d_dofmap_4::create_sub_dofmap(std::size_t i) const
{
    return nullptr;
}

ufc::dofmap * stiff2d_dofmap_4::create() const
{
    return new stiff2d_dofmap_4();
}


stiff2d_dofmap_5::stiff2d_dofmap_5() : ufc::dofmap()
{
    // Do nothing
}

stiff2d_dofmap_5::~stiff2d_dofmap_5()
{
    // Do nothing
}

const char * stiff2d_dofmap_5::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Discontinuous Lagrange', triangle, 1), dim=2)";
}

bool stiff2d_dofmap_5::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[3] = { false, false, true };
    if (d >= 3)
        return false;
    return return_values[d];
}

std::size_t stiff2d_dofmap_5::topological_dimension() const
{
    return 2;
}

std::size_t stiff2d_dofmap_5::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 6 * num_global_entities[2];
}

std::size_t stiff2d_dofmap_5::num_global_support_dofs() const
{
    return 0;
}

std::size_t stiff2d_dofmap_5::num_element_support_dofs() const
{
    return 6;
}

std::size_t stiff2d_dofmap_5::num_element_dofs() const
{
    return 6;
}

std::size_t stiff2d_dofmap_5::num_facet_dofs() const
{
    return 0;
}

std::size_t stiff2d_dofmap_5::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[3] = { 0, 0, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
}

std::size_t stiff2d_dofmap_5::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[3] = { 0, 0, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
}

void stiff2d_dofmap_5::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    std::size_t offset = 0;
    dofs[0] = offset + 3 * entity_indices[2][0];
    dofs[1] = offset + 3 * entity_indices[2][0] + 1;
    dofs[2] = offset + 3 * entity_indices[2][0] + 2;
    offset += 3 * num_global_entities[2];
    dofs[3] = offset + 3 * entity_indices[2][0];
    dofs[4] = offset + 3 * entity_indices[2][0] + 1;
    dofs[5] = offset + 3 * entity_indices[2][0] + 2;
    offset += 3 * num_global_entities[2];
}

void stiff2d_dofmap_5::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    // Do nothing
}

void stiff2d_dofmap_5::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
}

void stiff2d_dofmap_5::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
}

std::size_t stiff2d_dofmap_5::num_sub_dofmaps() const
{
    return 2;
}

ufc::dofmap * stiff2d_dofmap_5::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff2d_dofmap_4();
    case 1:
        return new stiff2d_dofmap_4();
    default:
        return nullptr;
    }
}

ufc::dofmap * stiff2d_dofmap_5::create() const
{
    return new stiff2d_dofmap_5();
}


stiff2d_dofmap_6::stiff2d_dofmap_6() : ufc::dofmap()
{
    // Do nothing
}

stiff2d_dofmap_6::~stiff2d_dofmap_6()
{
    // Do nothing
}

const char * stiff2d_dofmap_6::signature() const
{
    return "FFC dofmap for MixedElement(TensorElement(FiniteElement('Discontinuous Lagrange', triangle, 2), shape=(2, 2), symmetry={(1, 0): (0, 1)}), VectorElement(FiniteElement('Discontinuous Lagrange', triangle, 1), dim=2))";
}

bool stiff2d_dofmap_6::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[3] = { false, false, true };
    if (d >= 3)
        return false;
    return return_values[d];
}

std::size_t stiff2d_dofmap_6::topological_dimension() const
{
    return 2;
}

std::size_t stiff2d_dofmap_6::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 24 * num_global_entities[2];
}

std::size_t stiff2d_dofmap_6::num_global_support_dofs() const
{
    return 0;
}

std::size_t stiff2d_dofmap_6::num_element_support_dofs() const
{
    return 24;
}

std::size_t stiff2d_dofmap_6::num_element_dofs() const
{
    return 24;
}

std::size_t stiff2d_dofmap_6::num_facet_dofs() const
{
    return 0;
}

std::size_t stiff2d_dofmap_6::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[3] = { 0, 0, 24 };
    if (d >= 3)
        return 0;
    return return_values[d];
}

std::size_t stiff2d_dofmap_6::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[3] = { 0, 0, 24 };
    if (d >= 3)
        return 0;
    return return_values[d];
}

void stiff2d_dofmap_6::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    std::size_t offset = 0;
    dofs[0] = offset + 6 * entity_indices[2][0];
    dofs[1] = offset + 6 * entity_indices[2][0] + 1;
    dofs[2] = offset + 6 * entity_indices[2][0] + 2;
    dofs[3] = offset + 6 * entity_indices[2][0] + 3;
    dofs[4] = offset + 6 * entity_indices[2][0] + 4;
    dofs[5] = offset + 6 * entity_indices[2][0] + 5;
    offset += 6 * num_global_entities[2];
    dofs[6] = offset + 6 * entity_indices[2][0];
    dofs[7] = offset + 6 * entity_indices[2][0] + 1;
    dofs[8] = offset + 6 * entity_indices[2][0] + 2;
    dofs[9] = offset + 6 * entity_indices[2][0] + 3;
    dofs[10] = offset + 6 * entity_indices[2][0] + 4;
    dofs[11] = offset + 6 * entity_indices[2][0] + 5;
    offset += 6 * num_global_entities[2];
    dofs[12] = offset + 6 * entity_indices[2][0];
    dofs[13] = offset + 6 * entity_indices[2][0] + 1;
    dofs[14] = offset + 6 * entity_indices[2][0] + 2;
    dofs[15] = offset + 6 * entity_indices[2][0] + 3;
    dofs[16] = offset + 6 * entity_indices[2][0] + 4;
    dofs[17] = offset + 6 * entity_indices[2][0] + 5;
    offset += 6 * num_global_entities[2];
    dofs[18] = offset + 3 * entity_indices[2][0];
    dofs[19] = offset + 3 * entity_indices[2][0] + 1;
    dofs[20] = offset + 3 * entity_indices[2][0] + 2;
    offset += 3 * num_global_entities[2];
    dofs[21] = offset + 3 * entity_indices[2][0];
    dofs[22] = offset + 3 * entity_indices[2][0] + 1;
    dofs[23] = offset + 3 * entity_indices[2][0] + 2;
    offset += 3 * num_global_entities[2];
}

void stiff2d_dofmap_6::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    // Do nothing
}

void stiff2d_dofmap_6::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            dofs[21] = 21;
            dofs[22] = 22;
            dofs[23] = 23;
            break;
        }
        break;
    }
}

void stiff2d_dofmap_6::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            dofs[21] = 21;
            dofs[22] = 22;
            dofs[23] = 23;
            break;
        }
        break;
    }
}

std::size_t stiff2d_dofmap_6::num_sub_dofmaps() const
{
    return 2;
}

ufc::dofmap * stiff2d_dofmap_6::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff2d_dofmap_3();
    case 1:
        return new stiff2d_dofmap_5();
    default:
        return nullptr;
    }
}

ufc::dofmap * stiff2d_dofmap_6::create() const
{
    return new stiff2d_dofmap_6();
}


stiff2d_coordinate_mapping_1::stiff2d_coordinate_mapping_1() : ufc::coordinate_mapping()
{
    // Do nothing
}

stiff2d_coordinate_mapping_1::~stiff2d_coordinate_mapping_1()
{
    // Do nothing
}

const char * stiff2d_coordinate_mapping_1::signature() const
{
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
}

ufc::coordinate_mapping * stiff2d_coordinate_mapping_1::create() const
{
    return new stiff2d_coordinate_mapping_1();
}

std::size_t stiff2d_coordinate_mapping_1::geometric_dimension() const
{
    return 2;
}

std::size_t stiff2d_coordinate_mapping_1::topological_dimension() const
{
    return 2;
}

ufc::shape stiff2d_coordinate_mapping_1::cell_shape() const
{
    return ufc::shape::triangle;
}

ufc::finite_element * stiff2d_coordinate_mapping_1::create_coordinate_finite_element() const
{
    return new stiff2d_finite_element_1();
}

ufc::dofmap * stiff2d_coordinate_mapping_1::create_coordinate_dofmap() const
{
    return new stiff2d_dofmap_1();
}

void stiff2d_coordinate_mapping_1::compute_physical_coordinates(
    double * x, std::size_t num_points,
    const double * X,
    const double * coordinate_dofs) const
{
    stiff2d_finite_element_0 xelement;
    double phi[3];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[2 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t d = 0; d < 3; ++d)
                x[2 * ip + i] += coordinate_dofs[2 * d + i] * phi[d];
    }
}

void stiff2d_coordinate_mapping_1::compute_reference_coordinates(
    double * X, std::size_t num_points,
    const double * x,
    const double * coordinate_dofs, int cell_orientation) const
{
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double J[4];
    double detJ[1];
    double K[4];
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
}

void stiff2d_coordinate_mapping_1::compute_reference_geometry(
    double * X, double * J, double * detJ, double * K, std::size_t num_points,
    const double * x,
    const double * coordinate_dofs, int cell_orientation) const
{
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
}

void stiff2d_coordinate_mapping_1::compute_jacobians(
    double * J, std::size_t num_points,
    const double * X,
    const double * coordinate_dofs) const
{
    stiff2d_finite_element_0 xelement;
    double dphi[6];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[2 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t j = 0; j < 2; ++j)
                for (std::size_t d = 0; d < 3; ++d)
                    J[2 * 2 * ip + 2 * i + j] += coordinate_dofs[2 * d + i] * dphi[2 * d + j];
    }
}

void stiff2d_coordinate_mapping_1::compute_jacobian_determinants(
    double * detJ, std::size_t num_points,
    const double * J,
    int cell_orientation) const
{
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[2 * 2 * ip] * J[2 * 2 * ip + 2 + 1] - J[2 * 2 * ip + 1] * J[2 * 2 * ip + 2];
}

void stiff2d_coordinate_mapping_1::compute_jacobian_inverses(
    double * K, std::size_t num_points,
    const double * J, const double * detJ) const
{
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[2 * 2 * ip] = J[2 * 2 * ip + 2 + 1] / detJ[ip];
        K[2 * 2 * ip + 1] = -J[2 * 2 * ip + 1] / detJ[ip];
        K[2 * 2 * ip + 2] = -J[2 * 2 * ip + 2] / detJ[ip];
        K[2 * 2 * ip + 2 + 1] = J[2 * 2 * ip] / detJ[ip];
    }
}

void stiff2d_coordinate_mapping_1::compute_geometry(
    double * x, double * J, double * detJ, double * K, std::size_t num_points,
    const double * X,
    const double * coordinate_dofs, int cell_orientation) const
{
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
}

void stiff2d_coordinate_mapping_1::compute_midpoint_geometry(
    double * x, double * J,
    const double * coordinate_dofs) const
{
    const double phi_Xm[3] = { 0.33333333333333337, 0.33333333333333337, 0.3333333333333333 };
    const double dphi_Xm[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t d = 0; d < 3; ++d)
            x[i] += coordinate_dofs[2 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t d = 0; d < 3; ++d)
                J[2 * i + j] += coordinate_dofs[2 * d + i] * dphi_Xm[j][d];
}


stiff2d_cell_integral_0_otherwise::stiff2d_cell_integral_0_otherwise() : ufc::cell_integral()
{

}

stiff2d_cell_integral_0_otherwise::~stiff2d_cell_integral_0_otherwise()
{

}

const std::vector<bool> & stiff2d_cell_integral_0_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({});
return enabled;
}

void stiff2d_cell_integral_0_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 3
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 3
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           3
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE22_C0_D01_Q6[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE22_C0_D01_Q6[0][0][0] + coordinate_dofs[2] * FE22_C0_D01_Q6[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE22_C0_D01_Q6[0][0][0] + coordinate_dofs[5] * FE22_C0_D01_Q6[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE22_C0_D01_Q6[0][0][0] + coordinate_dofs[4] * FE22_C0_D01_Q6[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE22_C0_D01_Q6[0][0][0] + coordinate_dofs[3] * FE22_C0_D01_Q6[0][0][1];
    alignas(32) double sp[16];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = std::abs(sp[2]);
    sp[8] = sp[3] * sp[7];
    sp[9] = sp[4] * sp[7];
    sp[10] = sp[5] * sp[7];
    sp[11] = sp[6] * sp[7];
    sp[12] = -1 * sp[3] * sp[7];
    sp[13] = -1 * sp[4] * sp[7];
    sp[14] = -1 * sp[5] * sp[7];
    sp[15] = -1 * sp[6] * sp[7];
    std::fill(A, A + 18, 0.0);
    A[18] = -0.1666666666666665 * sp[14] + -0.1666666666666674 * sp[15];
    std::fill(A + 19, A + 43, 0.0);
    A[43] = 0.1666666666666665 * sp[14];
    std::fill(A + 44, A + 68, 0.0);
    A[68] = 0.1666666666666668 * sp[15];
    std::fill(A + 69, A + 90, 0.0);
    A[90] = 0.1666666666666664 * sp[14] + 0.1666666666666646 * sp[15];
    A[91] = 0.1666666666666664 * sp[14] + 0.3333333333333309 * sp[15];
    A[92] = 0.3333333333333326 * sp[14] + 0.1666666666666643 * sp[15];
    std::fill(A + 93, A + 114, 0.0);
    A[114] = -0.1666666666666664 * sp[14] + 0.166666666666668 * sp[15];
    A[115] = -0.1666666666666664 * sp[14];
    A[116] = -0.3333333333333326 * sp[14] + -0.1666666666666648 * sp[15];
    std::fill(A + 117, A + 138, 0.0);
    A[138] = 0.1666666666666667 * sp[14] + -0.1666666666666667 * sp[15];
    A[139] = -0.1666666666666666 * sp[14] + -0.3333333333333334 * sp[15];
    A[140] = -0.1666666666666666 * sp[15];
    std::fill(A + 141, A + 162, 0.0);
    A[162] = -0.1666666666666665 * sp[13] + -0.1666666666666674 * sp[12];
    std::fill(A + 163, A + 165, 0.0);
    A[165] = -0.1666666666666665 * sp[14] + -0.1666666666666674 * sp[15];
    std::fill(A + 166, A + 187, 0.0);
    A[187] = 0.1666666666666665 * sp[13];
    std::fill(A + 188, A + 190, 0.0);
    A[190] = 0.1666666666666665 * sp[14];
    std::fill(A + 191, A + 212, 0.0);
    A[212] = 0.1666666666666668 * sp[12];
    std::fill(A + 213, A + 215, 0.0);
    A[215] = 0.1666666666666668 * sp[15];
    std::fill(A + 216, A + 234, 0.0);
    A[234] = 0.1666666666666664 * sp[13] + 0.1666666666666646 * sp[12];
    A[235] = 0.1666666666666664 * sp[13] + 0.3333333333333309 * sp[12];
    A[236] = 0.3333333333333326 * sp[13] + 0.1666666666666643 * sp[12];
    A[237] = 0.1666666666666664 * sp[14] + 0.1666666666666646 * sp[15];
    A[238] = 0.1666666666666664 * sp[14] + 0.3333333333333309 * sp[15];
    A[239] = 0.3333333333333326 * sp[14] + 0.1666666666666643 * sp[15];
    std::fill(A + 240, A + 258, 0.0);
    A[258] = -0.1666666666666664 * sp[13] + 0.166666666666668 * sp[12];
    A[259] = -0.1666666666666664 * sp[13];
    A[260] = -0.3333333333333326 * sp[13] + -0.1666666666666648 * sp[12];
    A[261] = -0.1666666666666664 * sp[14] + 0.166666666666668 * sp[15];
    A[262] = -0.1666666666666664 * sp[14];
    A[263] = -0.3333333333333326 * sp[14] + -0.1666666666666648 * sp[15];
    std::fill(A + 264, A + 282, 0.0);
    A[282] = 0.1666666666666667 * sp[13] + -0.1666666666666667 * sp[12];
    A[283] = -0.1666666666666666 * sp[13] + -0.3333333333333334 * sp[12];
    A[284] = -0.1666666666666666 * sp[12];
    A[285] = 0.1666666666666667 * sp[14] + -0.1666666666666667 * sp[15];
    A[286] = -0.1666666666666666 * sp[14] + -0.3333333333333334 * sp[15];
    A[287] = -0.1666666666666666 * sp[15];
    std::fill(A + 288, A + 309, 0.0);
    A[309] = -0.1666666666666665 * sp[13] + -0.1666666666666674 * sp[12];
    std::fill(A + 310, A + 334, 0.0);
    A[334] = 0.1666666666666665 * sp[13];
    std::fill(A + 335, A + 359, 0.0);
    A[359] = 0.1666666666666668 * sp[12];
    std::fill(A + 360, A + 381, 0.0);
    A[381] = 0.1666666666666664 * sp[13] + 0.1666666666666646 * sp[12];
    A[382] = 0.1666666666666664 * sp[13] + 0.3333333333333309 * sp[12];
    A[383] = 0.3333333333333326 * sp[13] + 0.1666666666666643 * sp[12];
    std::fill(A + 384, A + 405, 0.0);
    A[405] = -0.1666666666666664 * sp[13] + 0.166666666666668 * sp[12];
    A[406] = -0.1666666666666664 * sp[13];
    A[407] = -0.3333333333333326 * sp[13] + -0.1666666666666648 * sp[12];
    std::fill(A + 408, A + 429, 0.0);
    A[429] = 0.1666666666666667 * sp[13] + -0.1666666666666667 * sp[12];
    A[430] = -0.1666666666666666 * sp[13] + -0.3333333333333334 * sp[12];
    A[431] = -0.1666666666666666 * sp[12];
    A[432] = -0.1666666666666665 * sp[10] + -0.1666666666666674 * sp[11];
    std::fill(A + 433, A + 435, 0.0);
    A[435] = 0.1666666666666664 * sp[10] + 0.1666666666666646 * sp[11];
    A[436] = -0.1666666666666664 * sp[10] + 0.166666666666668 * sp[11];
    A[437] = 0.1666666666666667 * sp[10] + -0.1666666666666667 * sp[11];
    A[438] = -0.1666666666666665 * sp[9] + -0.1666666666666674 * sp[8];
    std::fill(A + 439, A + 441, 0.0);
    A[441] = 0.1666666666666664 * sp[9] + 0.1666666666666646 * sp[8];
    A[442] = -0.1666666666666664 * sp[9] + 0.166666666666668 * sp[8];
    A[443] = 0.1666666666666667 * sp[9] + -0.1666666666666667 * sp[8];
    std::fill(A + 444, A + 457, 0.0);
    A[457] = 0.1666666666666665 * sp[10];
    A[458] = 0.0;
    A[459] = 0.1666666666666664 * sp[10] + 0.3333333333333309 * sp[11];
    A[460] = -0.1666666666666664 * sp[10];
    A[461] = -0.1666666666666666 * sp[10] + -0.3333333333333334 * sp[11];
    A[462] = 0.0;
    A[463] = 0.1666666666666665 * sp[9];
    A[464] = 0.0;
    A[465] = 0.1666666666666664 * sp[9] + 0.3333333333333309 * sp[8];
    A[466] = -0.1666666666666664 * sp[9];
    A[467] = -0.1666666666666666 * sp[9] + -0.3333333333333334 * sp[8];
    std::fill(A + 468, A + 482, 0.0);
    A[482] = 0.1666666666666668 * sp[11];
    A[483] = 0.3333333333333326 * sp[10] + 0.1666666666666643 * sp[11];
    A[484] = -0.3333333333333326 * sp[10] + -0.1666666666666648 * sp[11];
    A[485] = -0.1666666666666666 * sp[11];
    std::fill(A + 486, A + 488, 0.0);
    A[488] = 0.1666666666666668 * sp[8];
    A[489] = 0.3333333333333326 * sp[9] + 0.1666666666666643 * sp[8];
    A[490] = -0.3333333333333326 * sp[9] + -0.1666666666666648 * sp[8];
    A[491] = -0.1666666666666666 * sp[8];
    std::fill(A + 492, A + 510, 0.0);
    A[510] = -0.1666666666666665 * sp[10] + -0.1666666666666674 * sp[11];
    std::fill(A + 511, A + 513, 0.0);
    A[513] = 0.1666666666666664 * sp[10] + 0.1666666666666646 * sp[11];
    A[514] = -0.1666666666666664 * sp[10] + 0.166666666666668 * sp[11];
    A[515] = 0.1666666666666667 * sp[10] + -0.1666666666666667 * sp[11];
    A[516] = -0.1666666666666665 * sp[9] + -0.1666666666666674 * sp[8];
    std::fill(A + 517, A + 519, 0.0);
    A[519] = 0.1666666666666664 * sp[9] + 0.1666666666666646 * sp[8];
    A[520] = -0.1666666666666664 * sp[9] + 0.166666666666668 * sp[8];
    A[521] = 0.1666666666666667 * sp[9] + -0.1666666666666667 * sp[8];
    std::fill(A + 522, A + 535, 0.0);
    A[535] = 0.1666666666666665 * sp[10];
    A[536] = 0.0;
    A[537] = 0.1666666666666664 * sp[10] + 0.3333333333333309 * sp[11];
    A[538] = -0.1666666666666664 * sp[10];
    A[539] = -0.1666666666666666 * sp[10] + -0.3333333333333334 * sp[11];
    A[540] = 0.0;
    A[541] = 0.1666666666666665 * sp[9];
    A[542] = 0.0;
    A[543] = 0.1666666666666664 * sp[9] + 0.3333333333333309 * sp[8];
    A[544] = -0.1666666666666664 * sp[9];
    A[545] = -0.1666666666666666 * sp[9] + -0.3333333333333334 * sp[8];
    std::fill(A + 546, A + 560, 0.0);
    A[560] = 0.1666666666666668 * sp[11];
    A[561] = 0.3333333333333326 * sp[10] + 0.1666666666666643 * sp[11];
    A[562] = -0.3333333333333326 * sp[10] + -0.1666666666666648 * sp[11];
    A[563] = -0.1666666666666666 * sp[11];
    std::fill(A + 564, A + 566, 0.0);
    A[566] = 0.1666666666666668 * sp[8];
    A[567] = 0.3333333333333326 * sp[9] + 0.1666666666666643 * sp[8];
    A[568] = -0.3333333333333326 * sp[9] + -0.1666666666666648 * sp[8];
    A[569] = -0.1666666666666666 * sp[8];
    std::fill(A + 570, A + 576, 0.0);
}


stiff2d_interior_facet_integral_0_otherwise::stiff2d_interior_facet_integral_0_otherwise() : ufc::interior_facet_integral()
{

}

stiff2d_interior_facet_integral_0_otherwise::~stiff2d_interior_facet_integral_0_otherwise()
{

}

const std::vector<bool> & stiff2d_interior_facet_integral_0_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({});
return enabled;
}

void stiff2d_interior_facet_integral_0_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs_0,
                                    const double * coordinate_dofs_1,
                                    std::size_t facet_0,
                                    std::size_t facet_1,
                                    int cell_orientation_0,
                                    int cell_orientation_1) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 4
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 4
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           4
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE7_C0_D01_F_Q3[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double PI0[3][3][6][6] =
        { { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.1333333333333334, -0.03333333333333332, 0.06666666666666667, 0.0, 0.0 },
              { 0.0, -0.03333333333333332, 0.1333333333333333, 0.06666666666666662, 0.0, 0.0 },
              { 0.0, 0.06666666666666667, 0.06666666666666662, 0.5333333333333332, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
            { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.1333333333333334, 0.0, -0.03333333333333332, 0.0, 0.06666666666666665, 0.0 },
              { -0.03333333333333331, 0.0, 0.1333333333333333, 0.0, 0.06666666666666657, 0.0 },
              { 0.06666666666666668, 0.0, 0.06666666666666662, 0.0, 0.5333333333333332, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
            { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.1333333333333333, -0.03333333333333333, 0.0, 0.0, 0.0, 0.06666666666666665 },
              { -0.0333333333333333, 0.1333333333333333, 0.0, 0.0, 0.0, 0.06666666666666664 },
              { 0.06666666666666667, 0.06666666666666662, 0.0, 0.0, 0.0, 0.5333333333333332 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } } },
          { { { 0.0, 0.1333333333333334, -0.03333333333333331, 0.06666666666666668, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, -0.03333333333333332, 0.1333333333333333, 0.06666666666666662, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.06666666666666665, 0.06666666666666657, 0.5333333333333332, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
            { { 0.1333333333333334, 0.0, -0.03333333333333331, 0.0, 0.06666666666666665, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { -0.03333333333333331, 0.0, 0.1333333333333333, 0.0, 0.06666666666666657, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.06666666666666665, 0.0, 0.06666666666666657, 0.0, 0.5333333333333332, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
            { { 0.1333333333333333, -0.03333333333333332, 0.0, 0.0, 0.0, 0.06666666666666665 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { -0.0333333333333333, 0.1333333333333333, 0.0, 0.0, 0.0, 0.06666666666666664 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.06666666666666664, 0.06666666666666657, 0.0, 0.0, 0.0, 0.5333333333333332 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } } },
          { { { 0.0, 0.1333333333333333, -0.0333333333333333, 0.06666666666666667, 0.0, 0.0 },
              { 0.0, -0.03333333333333333, 0.1333333333333333, 0.06666666666666662, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.06666666666666665, 0.06666666666666664, 0.5333333333333332, 0.0, 0.0 } },
            { { 0.1333333333333333, 0.0, -0.0333333333333333, 0.0, 0.06666666666666664, 0.0 },
              { -0.03333333333333332, 0.0, 0.1333333333333333, 0.0, 0.06666666666666657, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.06666666666666665, 0.0, 0.06666666666666664, 0.0, 0.5333333333333332, 0.0 } },
            { { 0.1333333333333333, -0.03333333333333331, 0.0, 0.0, 0.0, 0.06666666666666665 },
              { -0.03333333333333331, 0.1333333333333333, 0.0, 0.0, 0.0, 0.06666666666666664 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.06666666666666665, 0.06666666666666664, 0.0, 0.0, 0.0, 0.5333333333333332 } } } };
    alignas(32) static const double PI1[3][3][6][3] =
        { { { { 0.0, 0.0, 0.0 },
              { 0.0, 0.1666666666666667, 0.0 },
              { 0.0, 0.0, 0.1666666666666666 },
              { 0.0, 0.3333333333333333, 0.3333333333333332 },
              { 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0 } },
            { { 0.0, 0.0, 0.0 },
              { 0.1666666666666667, 0.0, 0.0 },
              { 0.0, 0.0, 0.1666666666666666 },
              { 0.3333333333333333, 0.0, 0.3333333333333332 },
              { 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0 } },
            { { 0.0, 0.0, 0.0 },
              { 0.1666666666666667, 0.0, 0.0 },
              { 0.0, 0.1666666666666666, 0.0 },
              { 0.3333333333333333, 0.3333333333333332, 0.0 },
              { 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0 } } },
          { { { 0.0, 0.1666666666666667, 0.0 },
              { 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.1666666666666666 },
              { 0.0, 0.0, 0.0 },
              { 0.0, 0.3333333333333333, 0.3333333333333332 },
              { 0.0, 0.0, 0.0 } },
            { { 0.1666666666666667, 0.0, 0.0 },
              { 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.1666666666666666 },
              { 0.0, 0.0, 0.0 },
              { 0.3333333333333333, 0.0, 0.3333333333333332 },
              { 0.0, 0.0, 0.0 } },
            { { 0.1666666666666667, 0.0, 0.0 },
              { 0.0, 0.0, 0.0 },
              { 0.0, 0.1666666666666666, 0.0 },
              { 0.0, 0.0, 0.0 },
              { 0.3333333333333332, 0.3333333333333332, 0.0 },
              { 0.0, 0.0, 0.0 } } },
          { { { 0.0, 0.1666666666666666, 0.0 },
              { 0.0, 0.0, 0.1666666666666666 },
              { 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0 },
              { 0.0, 0.3333333333333333, 0.3333333333333333 } },
            { { 0.1666666666666666, 0.0, 0.0 },
              { 0.0, 0.0, 0.1666666666666666 },
              { 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0 },
              { 0.3333333333333333, 0.0, 0.3333333333333333 } },
            { { 0.1666666666666666, 0.0, 0.0 },
              { 0.0, 0.1666666666666666, 0.0 },
              { 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0 },
              { 0.3333333333333333, 0.3333333333333333, 0.0 } } } };
    // Unstructured piecewise computations
    const double J_r0_c0 = coordinate_dofs_0[0] * FE7_C0_D01_F_Q3[0][0][0] + coordinate_dofs_0[2] * FE7_C0_D01_F_Q3[0][0][1];
    const double J_r0_c3 = coordinate_dofs_0[1] * FE7_C0_D01_F_Q3[0][0][0] + coordinate_dofs_0[5] * FE7_C0_D01_F_Q3[0][0][1];
    const double J_r0_c1 = coordinate_dofs_0[0] * FE7_C0_D01_F_Q3[0][0][0] + coordinate_dofs_0[4] * FE7_C0_D01_F_Q3[0][0][1];
    const double J_r0_c2 = coordinate_dofs_0[1] * FE7_C0_D01_F_Q3[0][0][0] + coordinate_dofs_0[3] * FE7_C0_D01_F_Q3[0][0][1];
    const double J_r1_c0 = coordinate_dofs_1[0] * FE7_C0_D01_F_Q3[0][0][0] + coordinate_dofs_1[2] * FE7_C0_D01_F_Q3[0][0][1];
    const double J_r1_c3 = coordinate_dofs_1[1] * FE7_C0_D01_F_Q3[0][0][0] + coordinate_dofs_1[5] * FE7_C0_D01_F_Q3[0][0][1];
    const double J_r1_c1 = coordinate_dofs_1[0] * FE7_C0_D01_F_Q3[0][0][0] + coordinate_dofs_1[4] * FE7_C0_D01_F_Q3[0][0][1];
    const double J_r1_c2 = coordinate_dofs_1[1] * FE7_C0_D01_F_Q3[0][0][0] + coordinate_dofs_1[3] * FE7_C0_D01_F_Q3[0][0][1];
    alignas(32) double sp[82];
    sp[0] = J_r0_c0 * J_r0_c3;
    sp[1] = J_r0_c1 * J_r0_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_r0_c0 / sp[2];
    sp[4] = triangle_reference_facet_normals[facet_0][1] * sp[3];
    sp[5] = -1 * J_r0_c1 / sp[2];
    sp[6] = triangle_reference_facet_normals[facet_0][0] * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_r0_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet_0][0] * sp[9];
    sp[11] = -1 * J_r0_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet_0][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = J_r1_c0 * J_r1_c3;
    sp[20] = J_r1_c1 * J_r1_c2;
    sp[21] = sp[19] + -1 * sp[20];
    sp[22] = J_r1_c0 / sp[21];
    sp[23] = triangle_reference_facet_normals[facet_1][1] * sp[22];
    sp[24] = -1 * J_r1_c1 / sp[21];
    sp[25] = triangle_reference_facet_normals[facet_1][0] * sp[24];
    sp[26] = sp[23] + sp[25];
    sp[27] = sp[26] * sp[26];
    sp[28] = J_r1_c3 / sp[21];
    sp[29] = triangle_reference_facet_normals[facet_1][0] * sp[28];
    sp[30] = -1 * J_r1_c2 / sp[21];
    sp[31] = triangle_reference_facet_normals[facet_1][1] * sp[30];
    sp[32] = sp[29] + sp[31];
    sp[33] = sp[32] * sp[32];
    sp[34] = sp[27] + sp[33];
    sp[35] = std::sqrt(sp[34]);
    sp[36] = sp[26] / sp[35];
    sp[37] = sp[32] / sp[35];
    sp[38] = sp[17] * sp[17];
    sp[39] = sp[17] * sp[18];
    sp[40] = sp[17] * sp[36];
    sp[41] = sp[17] * sp[37];
    sp[42] = sp[18] * sp[18];
    sp[43] = sp[18] * sp[36];
    sp[44] = sp[18] * sp[37];
    sp[45] = sp[36] * sp[36];
    sp[46] = sp[36] * sp[37];
    sp[47] = sp[37] * sp[37];
    sp[48] = sp[38] + sp[42];
    sp[49] = sp[40] + sp[44];
    sp[50] = sp[45] + sp[47];
    sp[51] = J_r0_c0 * triangle_reference_facet_jacobian[facet_0][0][0];
    sp[52] = J_r0_c1 * triangle_reference_facet_jacobian[facet_0][1][0];
    sp[53] = sp[51] + sp[52];
    sp[54] = sp[53] * sp[53];
    sp[55] = triangle_reference_facet_jacobian[facet_0][0][0] * J_r0_c2;
    sp[56] = triangle_reference_facet_jacobian[facet_0][1][0] * J_r0_c3;
    sp[57] = sp[55] + sp[56];
    sp[58] = sp[57] * sp[57];
    sp[59] = sp[54] + sp[58];
    sp[60] = std::sqrt(sp[59]);
    sp[61] = -1 * sp[48] * sp[60];
    sp[62] = -1 * sp[39] * sp[60];
    sp[63] = -1 * sp[49] * sp[60];
    sp[64] = -1 * sp[41] * sp[60];
    sp[65] = -1 * sp[43] * sp[60];
    sp[66] = 0.5 * sp[17] * sp[60];
    sp[67] = 0.5 * sp[18] * sp[60];
    sp[68] = -1 * sp[42] * sp[60];
    sp[69] = -1 * sp[44] * sp[60];
    sp[70] = -1 * sp[50] * sp[60];
    sp[71] = -1 * sp[46] * sp[60];
    sp[72] = 0.5 * sp[36] * sp[60];
    sp[73] = 0.5 * sp[37] * sp[60];
    sp[74] = -1 * sp[47] * sp[60];
    sp[75] = -1 * (0.5 * sp[17]) * sp[60];
    sp[76] = -1 * (0.5 * sp[18]) * sp[60];
    sp[77] = -1 * (0.5 * sp[36]) * sp[60];
    sp[78] = -1 * (0.5 * sp[37]) * sp[60];
    sp[79] = -1 * sp[38] * sp[60];
    sp[80] = -1 * sp[40] * sp[60];
    sp[81] = -1 * sp[45] * sp[60];
    A[0] = sp[68] * PI0[facet_0][facet_0][0][0];
    A[1] = sp[68] * PI0[facet_0][facet_0][0][1];
    A[2] = sp[68] * PI0[facet_0][facet_0][0][2];
    A[3] = sp[68] * PI0[facet_0][facet_0][0][3];
    A[4] = sp[68] * PI0[facet_0][facet_0][0][4];
    A[5] = sp[68] * PI0[facet_0][facet_0][0][5];
    A[6] = sp[62] * PI0[facet_0][facet_0][0][0];
    A[7] = sp[62] * PI0[facet_0][facet_0][0][1];
    A[8] = sp[62] * PI0[facet_0][facet_0][0][2];
    A[9] = sp[62] * PI0[facet_0][facet_0][0][3];
    A[10] = sp[62] * PI0[facet_0][facet_0][0][4];
    A[11] = sp[62] * PI0[facet_0][facet_0][0][5];
    std::fill(A + 12, A + 18, 0.0);
    A[18] = sp[67] * PI1[facet_0][facet_0][0][0];
    A[19] = sp[67] * PI1[facet_0][facet_0][0][1];
    A[20] = sp[67] * PI1[facet_0][facet_0][0][2];
    std::fill(A + 21, A + 24, 0.0);
    A[24] = sp[69] * PI0[facet_0][facet_1][0][0];
    A[25] = sp[69] * PI0[facet_0][facet_1][0][1];
    A[26] = sp[69] * PI0[facet_0][facet_1][0][2];
    A[27] = sp[69] * PI0[facet_0][facet_1][0][3];
    A[28] = sp[69] * PI0[facet_0][facet_1][0][4];
    A[29] = sp[69] * PI0[facet_0][facet_1][0][5];
    A[30] = sp[65] * PI0[facet_0][facet_1][0][0];
    A[31] = sp[65] * PI0[facet_0][facet_1][0][1];
    A[32] = sp[65] * PI0[facet_0][facet_1][0][2];
    A[33] = sp[65] * PI0[facet_0][facet_1][0][3];
    A[34] = sp[65] * PI0[facet_0][facet_1][0][4];
    A[35] = sp[65] * PI0[facet_0][facet_1][0][5];
    std::fill(A + 36, A + 42, 0.0);
    A[42] = sp[67] * PI1[facet_0][facet_1][0][0];
    A[43] = sp[67] * PI1[facet_0][facet_1][0][1];
    A[44] = sp[67] * PI1[facet_0][facet_1][0][2];
    std::fill(A + 45, A + 48, 0.0);
    A[48] = sp[68] * PI0[facet_0][facet_0][1][0];
    A[49] = sp[68] * PI0[facet_0][facet_0][1][1];
    A[50] = sp[68] * PI0[facet_0][facet_0][1][2];
    A[51] = sp[68] * PI0[facet_0][facet_0][1][3];
    A[52] = sp[68] * PI0[facet_0][facet_0][1][4];
    A[53] = sp[68] * PI0[facet_0][facet_0][1][5];
    A[54] = sp[62] * PI0[facet_0][facet_0][1][0];
    A[55] = sp[62] * PI0[facet_0][facet_0][1][1];
    A[56] = sp[62] * PI0[facet_0][facet_0][1][2];
    A[57] = sp[62] * PI0[facet_0][facet_0][1][3];
    A[58] = sp[62] * PI0[facet_0][facet_0][1][4];
    A[59] = sp[62] * PI0[facet_0][facet_0][1][5];
    std::fill(A + 60, A + 66, 0.0);
    A[66] = sp[67] * PI1[facet_0][facet_0][1][0];
    A[67] = sp[67] * PI1[facet_0][facet_0][1][1];
    A[68] = sp[67] * PI1[facet_0][facet_0][1][2];
    std::fill(A + 69, A + 72, 0.0);
    A[72] = sp[69] * PI0[facet_0][facet_1][1][0];
    A[73] = sp[69] * PI0[facet_0][facet_1][1][1];
    A[74] = sp[69] * PI0[facet_0][facet_1][1][2];
    A[75] = sp[69] * PI0[facet_0][facet_1][1][3];
    A[76] = sp[69] * PI0[facet_0][facet_1][1][4];
    A[77] = sp[69] * PI0[facet_0][facet_1][1][5];
    A[78] = sp[65] * PI0[facet_0][facet_1][1][0];
    A[79] = sp[65] * PI0[facet_0][facet_1][1][1];
    A[80] = sp[65] * PI0[facet_0][facet_1][1][2];
    A[81] = sp[65] * PI0[facet_0][facet_1][1][3];
    A[82] = sp[65] * PI0[facet_0][facet_1][1][4];
    A[83] = sp[65] * PI0[facet_0][facet_1][1][5];
    std::fill(A + 84, A + 90, 0.0);
    A[90] = sp[67] * PI1[facet_0][facet_1][1][0];
    A[91] = sp[67] * PI1[facet_0][facet_1][1][1];
    A[92] = sp[67] * PI1[facet_0][facet_1][1][2];
    std::fill(A + 93, A + 96, 0.0);
    A[96] = sp[68] * PI0[facet_0][facet_0][2][0];
    A[97] = sp[68] * PI0[facet_0][facet_0][2][1];
    A[98] = sp[68] * PI0[facet_0][facet_0][2][2];
    A[99] = sp[68] * PI0[facet_0][facet_0][2][3];
    A[100] = sp[68] * PI0[facet_0][facet_0][2][4];
    A[101] = sp[68] * PI0[facet_0][facet_0][2][5];
    A[102] = sp[62] * PI0[facet_0][facet_0][2][0];
    A[103] = sp[62] * PI0[facet_0][facet_0][2][1];
    A[104] = sp[62] * PI0[facet_0][facet_0][2][2];
    A[105] = sp[62] * PI0[facet_0][facet_0][2][3];
    A[106] = sp[62] * PI0[facet_0][facet_0][2][4];
    A[107] = sp[62] * PI0[facet_0][facet_0][2][5];
    std::fill(A + 108, A + 114, 0.0);
    A[114] = sp[67] * PI1[facet_0][facet_0][2][0];
    A[115] = sp[67] * PI1[facet_0][facet_0][2][1];
    A[116] = sp[67] * PI1[facet_0][facet_0][2][2];
    std::fill(A + 117, A + 120, 0.0);
    A[120] = sp[69] * PI0[facet_0][facet_1][2][0];
    A[121] = sp[69] * PI0[facet_0][facet_1][2][1];
    A[122] = sp[69] * PI0[facet_0][facet_1][2][2];
    A[123] = sp[69] * PI0[facet_0][facet_1][2][3];
    A[124] = sp[69] * PI0[facet_0][facet_1][2][4];
    A[125] = sp[69] * PI0[facet_0][facet_1][2][5];
    A[126] = sp[65] * PI0[facet_0][facet_1][2][0];
    A[127] = sp[65] * PI0[facet_0][facet_1][2][1];
    A[128] = sp[65] * PI0[facet_0][facet_1][2][2];
    A[129] = sp[65] * PI0[facet_0][facet_1][2][3];
    A[130] = sp[65] * PI0[facet_0][facet_1][2][4];
    A[131] = sp[65] * PI0[facet_0][facet_1][2][5];
    std::fill(A + 132, A + 138, 0.0);
    A[138] = sp[67] * PI1[facet_0][facet_1][2][0];
    A[139] = sp[67] * PI1[facet_0][facet_1][2][1];
    A[140] = sp[67] * PI1[facet_0][facet_1][2][2];
    std::fill(A + 141, A + 144, 0.0);
    A[144] = sp[68] * PI0[facet_0][facet_0][3][0];
    A[145] = sp[68] * PI0[facet_0][facet_0][3][1];
    A[146] = sp[68] * PI0[facet_0][facet_0][3][2];
    A[147] = sp[68] * PI0[facet_0][facet_0][3][3];
    A[148] = sp[68] * PI0[facet_0][facet_0][3][4];
    A[149] = sp[68] * PI0[facet_0][facet_0][3][5];
    A[150] = sp[62] * PI0[facet_0][facet_0][3][0];
    A[151] = sp[62] * PI0[facet_0][facet_0][3][1];
    A[152] = sp[62] * PI0[facet_0][facet_0][3][2];
    A[153] = sp[62] * PI0[facet_0][facet_0][3][3];
    A[154] = sp[62] * PI0[facet_0][facet_0][3][4];
    A[155] = sp[62] * PI0[facet_0][facet_0][3][5];
    std::fill(A + 156, A + 162, 0.0);
    A[162] = sp[67] * PI1[facet_0][facet_0][3][0];
    A[163] = sp[67] * PI1[facet_0][facet_0][3][1];
    A[164] = sp[67] * PI1[facet_0][facet_0][3][2];
    std::fill(A + 165, A + 168, 0.0);
    A[168] = sp[69] * PI0[facet_0][facet_1][3][0];
    A[169] = sp[69] * PI0[facet_0][facet_1][3][1];
    A[170] = sp[69] * PI0[facet_0][facet_1][3][2];
    A[171] = sp[69] * PI0[facet_0][facet_1][3][3];
    A[172] = sp[69] * PI0[facet_0][facet_1][3][4];
    A[173] = sp[69] * PI0[facet_0][facet_1][3][5];
    A[174] = sp[65] * PI0[facet_0][facet_1][3][0];
    A[175] = sp[65] * PI0[facet_0][facet_1][3][1];
    A[176] = sp[65] * PI0[facet_0][facet_1][3][2];
    A[177] = sp[65] * PI0[facet_0][facet_1][3][3];
    A[178] = sp[65] * PI0[facet_0][facet_1][3][4];
    A[179] = sp[65] * PI0[facet_0][facet_1][3][5];
    std::fill(A + 180, A + 186, 0.0);
    A[186] = sp[67] * PI1[facet_0][facet_1][3][0];
    A[187] = sp[67] * PI1[facet_0][facet_1][3][1];
    A[188] = sp[67] * PI1[facet_0][facet_1][3][2];
    std::fill(A + 189, A + 192, 0.0);
    A[192] = sp[68] * PI0[facet_0][facet_0][4][0];
    A[193] = sp[68] * PI0[facet_0][facet_0][4][1];
    A[194] = sp[68] * PI0[facet_0][facet_0][4][2];
    A[195] = sp[68] * PI0[facet_0][facet_0][4][3];
    A[196] = sp[68] * PI0[facet_0][facet_0][4][4];
    A[197] = sp[68] * PI0[facet_0][facet_0][4][5];
    A[198] = sp[62] * PI0[facet_0][facet_0][4][0];
    A[199] = sp[62] * PI0[facet_0][facet_0][4][1];
    A[200] = sp[62] * PI0[facet_0][facet_0][4][2];
    A[201] = sp[62] * PI0[facet_0][facet_0][4][3];
    A[202] = sp[62] * PI0[facet_0][facet_0][4][4];
    A[203] = sp[62] * PI0[facet_0][facet_0][4][5];
    std::fill(A + 204, A + 210, 0.0);
    A[210] = sp[67] * PI1[facet_0][facet_0][4][0];
    A[211] = sp[67] * PI1[facet_0][facet_0][4][1];
    A[212] = sp[67] * PI1[facet_0][facet_0][4][2];
    std::fill(A + 213, A + 216, 0.0);
    A[216] = sp[69] * PI0[facet_0][facet_1][4][0];
    A[217] = sp[69] * PI0[facet_0][facet_1][4][1];
    A[218] = sp[69] * PI0[facet_0][facet_1][4][2];
    A[219] = sp[69] * PI0[facet_0][facet_1][4][3];
    A[220] = sp[69] * PI0[facet_0][facet_1][4][4];
    A[221] = sp[69] * PI0[facet_0][facet_1][4][5];
    A[222] = sp[65] * PI0[facet_0][facet_1][4][0];
    A[223] = sp[65] * PI0[facet_0][facet_1][4][1];
    A[224] = sp[65] * PI0[facet_0][facet_1][4][2];
    A[225] = sp[65] * PI0[facet_0][facet_1][4][3];
    A[226] = sp[65] * PI0[facet_0][facet_1][4][4];
    A[227] = sp[65] * PI0[facet_0][facet_1][4][5];
    std::fill(A + 228, A + 234, 0.0);
    A[234] = sp[67] * PI1[facet_0][facet_1][4][0];
    A[235] = sp[67] * PI1[facet_0][facet_1][4][1];
    A[236] = sp[67] * PI1[facet_0][facet_1][4][2];
    std::fill(A + 237, A + 240, 0.0);
    A[240] = sp[68] * PI0[facet_0][facet_0][5][0];
    A[241] = sp[68] * PI0[facet_0][facet_0][5][1];
    A[242] = sp[68] * PI0[facet_0][facet_0][5][2];
    A[243] = sp[68] * PI0[facet_0][facet_0][5][3];
    A[244] = sp[68] * PI0[facet_0][facet_0][5][4];
    A[245] = sp[68] * PI0[facet_0][facet_0][5][5];
    A[246] = sp[62] * PI0[facet_0][facet_0][5][0];
    A[247] = sp[62] * PI0[facet_0][facet_0][5][1];
    A[248] = sp[62] * PI0[facet_0][facet_0][5][2];
    A[249] = sp[62] * PI0[facet_0][facet_0][5][3];
    A[250] = sp[62] * PI0[facet_0][facet_0][5][4];
    A[251] = sp[62] * PI0[facet_0][facet_0][5][5];
    std::fill(A + 252, A + 258, 0.0);
    A[258] = sp[67] * PI1[facet_0][facet_0][5][0];
    A[259] = sp[67] * PI1[facet_0][facet_0][5][1];
    A[260] = sp[67] * PI1[facet_0][facet_0][5][2];
    std::fill(A + 261, A + 264, 0.0);
    A[264] = sp[69] * PI0[facet_0][facet_1][5][0];
    A[265] = sp[69] * PI0[facet_0][facet_1][5][1];
    A[266] = sp[69] * PI0[facet_0][facet_1][5][2];
    A[267] = sp[69] * PI0[facet_0][facet_1][5][3];
    A[268] = sp[69] * PI0[facet_0][facet_1][5][4];
    A[269] = sp[69] * PI0[facet_0][facet_1][5][5];
    A[270] = sp[65] * PI0[facet_0][facet_1][5][0];
    A[271] = sp[65] * PI0[facet_0][facet_1][5][1];
    A[272] = sp[65] * PI0[facet_0][facet_1][5][2];
    A[273] = sp[65] * PI0[facet_0][facet_1][5][3];
    A[274] = sp[65] * PI0[facet_0][facet_1][5][4];
    A[275] = sp[65] * PI0[facet_0][facet_1][5][5];
    std::fill(A + 276, A + 282, 0.0);
    A[282] = sp[67] * PI1[facet_0][facet_1][5][0];
    A[283] = sp[67] * PI1[facet_0][facet_1][5][1];
    A[284] = sp[67] * PI1[facet_0][facet_1][5][2];
    std::fill(A + 285, A + 288, 0.0);
    A[288] = sp[62] * PI0[facet_0][facet_0][0][0];
    A[289] = sp[62] * PI0[facet_0][facet_0][0][1];
    A[290] = sp[62] * PI0[facet_0][facet_0][0][2];
    A[291] = sp[62] * PI0[facet_0][facet_0][0][3];
    A[292] = sp[62] * PI0[facet_0][facet_0][0][4];
    A[293] = sp[62] * PI0[facet_0][facet_0][0][5];
    A[294] = sp[61] * PI0[facet_0][facet_0][0][0];
    A[295] = sp[61] * PI0[facet_0][facet_0][0][1];
    A[296] = sp[61] * PI0[facet_0][facet_0][0][2];
    A[297] = sp[61] * PI0[facet_0][facet_0][0][3];
    A[298] = sp[61] * PI0[facet_0][facet_0][0][4];
    A[299] = sp[61] * PI0[facet_0][facet_0][0][5];
    A[300] = sp[62] * PI0[facet_0][facet_0][0][0];
    A[301] = sp[62] * PI0[facet_0][facet_0][0][1];
    A[302] = sp[62] * PI0[facet_0][facet_0][0][2];
    A[303] = sp[62] * PI0[facet_0][facet_0][0][3];
    A[304] = sp[62] * PI0[facet_0][facet_0][0][4];
    A[305] = sp[62] * PI0[facet_0][facet_0][0][5];
    A[306] = sp[66] * PI1[facet_0][facet_0][0][0];
    A[307] = sp[66] * PI1[facet_0][facet_0][0][1];
    A[308] = sp[66] * PI1[facet_0][facet_0][0][2];
    A[309] = sp[67] * PI1[facet_0][facet_0][0][0];
    A[310] = sp[67] * PI1[facet_0][facet_0][0][1];
    A[311] = sp[67] * PI1[facet_0][facet_0][0][2];
    A[312] = sp[64] * PI0[facet_0][facet_1][0][0];
    A[313] = sp[64] * PI0[facet_0][facet_1][0][1];
    A[314] = sp[64] * PI0[facet_0][facet_1][0][2];
    A[315] = sp[64] * PI0[facet_0][facet_1][0][3];
    A[316] = sp[64] * PI0[facet_0][facet_1][0][4];
    A[317] = sp[64] * PI0[facet_0][facet_1][0][5];
    A[318] = sp[63] * PI0[facet_0][facet_1][0][0];
    A[319] = sp[63] * PI0[facet_0][facet_1][0][1];
    A[320] = sp[63] * PI0[facet_0][facet_1][0][2];
    A[321] = sp[63] * PI0[facet_0][facet_1][0][3];
    A[322] = sp[63] * PI0[facet_0][facet_1][0][4];
    A[323] = sp[63] * PI0[facet_0][facet_1][0][5];
    A[324] = sp[65] * PI0[facet_0][facet_1][0][0];
    A[325] = sp[65] * PI0[facet_0][facet_1][0][1];
    A[326] = sp[65] * PI0[facet_0][facet_1][0][2];
    A[327] = sp[65] * PI0[facet_0][facet_1][0][3];
    A[328] = sp[65] * PI0[facet_0][facet_1][0][4];
    A[329] = sp[65] * PI0[facet_0][facet_1][0][5];
    A[330] = sp[66] * PI1[facet_0][facet_1][0][0];
    A[331] = sp[66] * PI1[facet_0][facet_1][0][1];
    A[332] = sp[66] * PI1[facet_0][facet_1][0][2];
    A[333] = sp[67] * PI1[facet_0][facet_1][0][0];
    A[334] = sp[67] * PI1[facet_0][facet_1][0][1];
    A[335] = sp[67] * PI1[facet_0][facet_1][0][2];
    A[336] = sp[62] * PI0[facet_0][facet_0][1][0];
    A[337] = sp[62] * PI0[facet_0][facet_0][1][1];
    A[338] = sp[62] * PI0[facet_0][facet_0][1][2];
    A[339] = sp[62] * PI0[facet_0][facet_0][1][3];
    A[340] = sp[62] * PI0[facet_0][facet_0][1][4];
    A[341] = sp[62] * PI0[facet_0][facet_0][1][5];
    A[342] = sp[61] * PI0[facet_0][facet_0][1][0];
    A[343] = sp[61] * PI0[facet_0][facet_0][1][1];
    A[344] = sp[61] * PI0[facet_0][facet_0][1][2];
    A[345] = sp[61] * PI0[facet_0][facet_0][1][3];
    A[346] = sp[61] * PI0[facet_0][facet_0][1][4];
    A[347] = sp[61] * PI0[facet_0][facet_0][1][5];
    A[348] = sp[62] * PI0[facet_0][facet_0][1][0];
    A[349] = sp[62] * PI0[facet_0][facet_0][1][1];
    A[350] = sp[62] * PI0[facet_0][facet_0][1][2];
    A[351] = sp[62] * PI0[facet_0][facet_0][1][3];
    A[352] = sp[62] * PI0[facet_0][facet_0][1][4];
    A[353] = sp[62] * PI0[facet_0][facet_0][1][5];
    A[354] = sp[66] * PI1[facet_0][facet_0][1][0];
    A[355] = sp[66] * PI1[facet_0][facet_0][1][1];
    A[356] = sp[66] * PI1[facet_0][facet_0][1][2];
    A[357] = sp[67] * PI1[facet_0][facet_0][1][0];
    A[358] = sp[67] * PI1[facet_0][facet_0][1][1];
    A[359] = sp[67] * PI1[facet_0][facet_0][1][2];
    A[360] = sp[64] * PI0[facet_0][facet_1][1][0];
    A[361] = sp[64] * PI0[facet_0][facet_1][1][1];
    A[362] = sp[64] * PI0[facet_0][facet_1][1][2];
    A[363] = sp[64] * PI0[facet_0][facet_1][1][3];
    A[364] = sp[64] * PI0[facet_0][facet_1][1][4];
    A[365] = sp[64] * PI0[facet_0][facet_1][1][5];
    A[366] = sp[63] * PI0[facet_0][facet_1][1][0];
    A[367] = sp[63] * PI0[facet_0][facet_1][1][1];
    A[368] = sp[63] * PI0[facet_0][facet_1][1][2];
    A[369] = sp[63] * PI0[facet_0][facet_1][1][3];
    A[370] = sp[63] * PI0[facet_0][facet_1][1][4];
    A[371] = sp[63] * PI0[facet_0][facet_1][1][5];
    A[372] = sp[65] * PI0[facet_0][facet_1][1][0];
    A[373] = sp[65] * PI0[facet_0][facet_1][1][1];
    A[374] = sp[65] * PI0[facet_0][facet_1][1][2];
    A[375] = sp[65] * PI0[facet_0][facet_1][1][3];
    A[376] = sp[65] * PI0[facet_0][facet_1][1][4];
    A[377] = sp[65] * PI0[facet_0][facet_1][1][5];
    A[378] = sp[66] * PI1[facet_0][facet_1][1][0];
    A[379] = sp[66] * PI1[facet_0][facet_1][1][1];
    A[380] = sp[66] * PI1[facet_0][facet_1][1][2];
    A[381] = sp[67] * PI1[facet_0][facet_1][1][0];
    A[382] = sp[67] * PI1[facet_0][facet_1][1][1];
    A[383] = sp[67] * PI1[facet_0][facet_1][1][2];
    A[384] = sp[62] * PI0[facet_0][facet_0][2][0];
    A[385] = sp[62] * PI0[facet_0][facet_0][2][1];
    A[386] = sp[62] * PI0[facet_0][facet_0][2][2];
    A[387] = sp[62] * PI0[facet_0][facet_0][2][3];
    A[388] = sp[62] * PI0[facet_0][facet_0][2][4];
    A[389] = sp[62] * PI0[facet_0][facet_0][2][5];
    A[390] = sp[61] * PI0[facet_0][facet_0][2][0];
    A[391] = sp[61] * PI0[facet_0][facet_0][2][1];
    A[392] = sp[61] * PI0[facet_0][facet_0][2][2];
    A[393] = sp[61] * PI0[facet_0][facet_0][2][3];
    A[394] = sp[61] * PI0[facet_0][facet_0][2][4];
    A[395] = sp[61] * PI0[facet_0][facet_0][2][5];
    A[396] = sp[62] * PI0[facet_0][facet_0][2][0];
    A[397] = sp[62] * PI0[facet_0][facet_0][2][1];
    A[398] = sp[62] * PI0[facet_0][facet_0][2][2];
    A[399] = sp[62] * PI0[facet_0][facet_0][2][3];
    A[400] = sp[62] * PI0[facet_0][facet_0][2][4];
    A[401] = sp[62] * PI0[facet_0][facet_0][2][5];
    A[402] = sp[66] * PI1[facet_0][facet_0][2][0];
    A[403] = sp[66] * PI1[facet_0][facet_0][2][1];
    A[404] = sp[66] * PI1[facet_0][facet_0][2][2];
    A[405] = sp[67] * PI1[facet_0][facet_0][2][0];
    A[406] = sp[67] * PI1[facet_0][facet_0][2][1];
    A[407] = sp[67] * PI1[facet_0][facet_0][2][2];
    A[408] = sp[64] * PI0[facet_0][facet_1][2][0];
    A[409] = sp[64] * PI0[facet_0][facet_1][2][1];
    A[410] = sp[64] * PI0[facet_0][facet_1][2][2];
    A[411] = sp[64] * PI0[facet_0][facet_1][2][3];
    A[412] = sp[64] * PI0[facet_0][facet_1][2][4];
    A[413] = sp[64] * PI0[facet_0][facet_1][2][5];
    A[414] = sp[63] * PI0[facet_0][facet_1][2][0];
    A[415] = sp[63] * PI0[facet_0][facet_1][2][1];
    A[416] = sp[63] * PI0[facet_0][facet_1][2][2];
    A[417] = sp[63] * PI0[facet_0][facet_1][2][3];
    A[418] = sp[63] * PI0[facet_0][facet_1][2][4];
    A[419] = sp[63] * PI0[facet_0][facet_1][2][5];
    A[420] = sp[65] * PI0[facet_0][facet_1][2][0];
    A[421] = sp[65] * PI0[facet_0][facet_1][2][1];
    A[422] = sp[65] * PI0[facet_0][facet_1][2][2];
    A[423] = sp[65] * PI0[facet_0][facet_1][2][3];
    A[424] = sp[65] * PI0[facet_0][facet_1][2][4];
    A[425] = sp[65] * PI0[facet_0][facet_1][2][5];
    A[426] = sp[66] * PI1[facet_0][facet_1][2][0];
    A[427] = sp[66] * PI1[facet_0][facet_1][2][1];
    A[428] = sp[66] * PI1[facet_0][facet_1][2][2];
    A[429] = sp[67] * PI1[facet_0][facet_1][2][0];
    A[430] = sp[67] * PI1[facet_0][facet_1][2][1];
    A[431] = sp[67] * PI1[facet_0][facet_1][2][2];
    A[432] = sp[62] * PI0[facet_0][facet_0][3][0];
    A[433] = sp[62] * PI0[facet_0][facet_0][3][1];
    A[434] = sp[62] * PI0[facet_0][facet_0][3][2];
    A[435] = sp[62] * PI0[facet_0][facet_0][3][3];
    A[436] = sp[62] * PI0[facet_0][facet_0][3][4];
    A[437] = sp[62] * PI0[facet_0][facet_0][3][5];
    A[438] = sp[61] * PI0[facet_0][facet_0][3][0];
    A[439] = sp[61] * PI0[facet_0][facet_0][3][1];
    A[440] = sp[61] * PI0[facet_0][facet_0][3][2];
    A[441] = sp[61] * PI0[facet_0][facet_0][3][3];
    A[442] = sp[61] * PI0[facet_0][facet_0][3][4];
    A[443] = sp[61] * PI0[facet_0][facet_0][3][5];
    A[444] = sp[62] * PI0[facet_0][facet_0][3][0];
    A[445] = sp[62] * PI0[facet_0][facet_0][3][1];
    A[446] = sp[62] * PI0[facet_0][facet_0][3][2];
    A[447] = sp[62] * PI0[facet_0][facet_0][3][3];
    A[448] = sp[62] * PI0[facet_0][facet_0][3][4];
    A[449] = sp[62] * PI0[facet_0][facet_0][3][5];
    A[450] = sp[66] * PI1[facet_0][facet_0][3][0];
    A[451] = sp[66] * PI1[facet_0][facet_0][3][1];
    A[452] = sp[66] * PI1[facet_0][facet_0][3][2];
    A[453] = sp[67] * PI1[facet_0][facet_0][3][0];
    A[454] = sp[67] * PI1[facet_0][facet_0][3][1];
    A[455] = sp[67] * PI1[facet_0][facet_0][3][2];
    A[456] = sp[64] * PI0[facet_0][facet_1][3][0];
    A[457] = sp[64] * PI0[facet_0][facet_1][3][1];
    A[458] = sp[64] * PI0[facet_0][facet_1][3][2];
    A[459] = sp[64] * PI0[facet_0][facet_1][3][3];
    A[460] = sp[64] * PI0[facet_0][facet_1][3][4];
    A[461] = sp[64] * PI0[facet_0][facet_1][3][5];
    A[462] = sp[63] * PI0[facet_0][facet_1][3][0];
    A[463] = sp[63] * PI0[facet_0][facet_1][3][1];
    A[464] = sp[63] * PI0[facet_0][facet_1][3][2];
    A[465] = sp[63] * PI0[facet_0][facet_1][3][3];
    A[466] = sp[63] * PI0[facet_0][facet_1][3][4];
    A[467] = sp[63] * PI0[facet_0][facet_1][3][5];
    A[468] = sp[65] * PI0[facet_0][facet_1][3][0];
    A[469] = sp[65] * PI0[facet_0][facet_1][3][1];
    A[470] = sp[65] * PI0[facet_0][facet_1][3][2];
    A[471] = sp[65] * PI0[facet_0][facet_1][3][3];
    A[472] = sp[65] * PI0[facet_0][facet_1][3][4];
    A[473] = sp[65] * PI0[facet_0][facet_1][3][5];
    A[474] = sp[66] * PI1[facet_0][facet_1][3][0];
    A[475] = sp[66] * PI1[facet_0][facet_1][3][1];
    A[476] = sp[66] * PI1[facet_0][facet_1][3][2];
    A[477] = sp[67] * PI1[facet_0][facet_1][3][0];
    A[478] = sp[67] * PI1[facet_0][facet_1][3][1];
    A[479] = sp[67] * PI1[facet_0][facet_1][3][2];
    A[480] = sp[62] * PI0[facet_0][facet_0][4][0];
    A[481] = sp[62] * PI0[facet_0][facet_0][4][1];
    A[482] = sp[62] * PI0[facet_0][facet_0][4][2];
    A[483] = sp[62] * PI0[facet_0][facet_0][4][3];
    A[484] = sp[62] * PI0[facet_0][facet_0][4][4];
    A[485] = sp[62] * PI0[facet_0][facet_0][4][5];
    A[486] = sp[61] * PI0[facet_0][facet_0][4][0];
    A[487] = sp[61] * PI0[facet_0][facet_0][4][1];
    A[488] = sp[61] * PI0[facet_0][facet_0][4][2];
    A[489] = sp[61] * PI0[facet_0][facet_0][4][3];
    A[490] = sp[61] * PI0[facet_0][facet_0][4][4];
    A[491] = sp[61] * PI0[facet_0][facet_0][4][5];
    A[492] = sp[62] * PI0[facet_0][facet_0][4][0];
    A[493] = sp[62] * PI0[facet_0][facet_0][4][1];
    A[494] = sp[62] * PI0[facet_0][facet_0][4][2];
    A[495] = sp[62] * PI0[facet_0][facet_0][4][3];
    A[496] = sp[62] * PI0[facet_0][facet_0][4][4];
    A[497] = sp[62] * PI0[facet_0][facet_0][4][5];
    A[498] = sp[66] * PI1[facet_0][facet_0][4][0];
    A[499] = sp[66] * PI1[facet_0][facet_0][4][1];
    A[500] = sp[66] * PI1[facet_0][facet_0][4][2];
    A[501] = sp[67] * PI1[facet_0][facet_0][4][0];
    A[502] = sp[67] * PI1[facet_0][facet_0][4][1];
    A[503] = sp[67] * PI1[facet_0][facet_0][4][2];
    A[504] = sp[64] * PI0[facet_0][facet_1][4][0];
    A[505] = sp[64] * PI0[facet_0][facet_1][4][1];
    A[506] = sp[64] * PI0[facet_0][facet_1][4][2];
    A[507] = sp[64] * PI0[facet_0][facet_1][4][3];
    A[508] = sp[64] * PI0[facet_0][facet_1][4][4];
    A[509] = sp[64] * PI0[facet_0][facet_1][4][5];
    A[510] = sp[63] * PI0[facet_0][facet_1][4][0];
    A[511] = sp[63] * PI0[facet_0][facet_1][4][1];
    A[512] = sp[63] * PI0[facet_0][facet_1][4][2];
    A[513] = sp[63] * PI0[facet_0][facet_1][4][3];
    A[514] = sp[63] * PI0[facet_0][facet_1][4][4];
    A[515] = sp[63] * PI0[facet_0][facet_1][4][5];
    A[516] = sp[65] * PI0[facet_0][facet_1][4][0];
    A[517] = sp[65] * PI0[facet_0][facet_1][4][1];
    A[518] = sp[65] * PI0[facet_0][facet_1][4][2];
    A[519] = sp[65] * PI0[facet_0][facet_1][4][3];
    A[520] = sp[65] * PI0[facet_0][facet_1][4][4];
    A[521] = sp[65] * PI0[facet_0][facet_1][4][5];
    A[522] = sp[66] * PI1[facet_0][facet_1][4][0];
    A[523] = sp[66] * PI1[facet_0][facet_1][4][1];
    A[524] = sp[66] * PI1[facet_0][facet_1][4][2];
    A[525] = sp[67] * PI1[facet_0][facet_1][4][0];
    A[526] = sp[67] * PI1[facet_0][facet_1][4][1];
    A[527] = sp[67] * PI1[facet_0][facet_1][4][2];
    A[528] = sp[62] * PI0[facet_0][facet_0][5][0];
    A[529] = sp[62] * PI0[facet_0][facet_0][5][1];
    A[530] = sp[62] * PI0[facet_0][facet_0][5][2];
    A[531] = sp[62] * PI0[facet_0][facet_0][5][3];
    A[532] = sp[62] * PI0[facet_0][facet_0][5][4];
    A[533] = sp[62] * PI0[facet_0][facet_0][5][5];
    A[534] = sp[61] * PI0[facet_0][facet_0][5][0];
    A[535] = sp[61] * PI0[facet_0][facet_0][5][1];
    A[536] = sp[61] * PI0[facet_0][facet_0][5][2];
    A[537] = sp[61] * PI0[facet_0][facet_0][5][3];
    A[538] = sp[61] * PI0[facet_0][facet_0][5][4];
    A[539] = sp[61] * PI0[facet_0][facet_0][5][5];
    A[540] = sp[62] * PI0[facet_0][facet_0][5][0];
    A[541] = sp[62] * PI0[facet_0][facet_0][5][1];
    A[542] = sp[62] * PI0[facet_0][facet_0][5][2];
    A[543] = sp[62] * PI0[facet_0][facet_0][5][3];
    A[544] = sp[62] * PI0[facet_0][facet_0][5][4];
    A[545] = sp[62] * PI0[facet_0][facet_0][5][5];
    A[546] = sp[66] * PI1[facet_0][facet_0][5][0];
    A[547] = sp[66] * PI1[facet_0][facet_0][5][1];
    A[548] = sp[66] * PI1[facet_0][facet_0][5][2];
    A[549] = sp[67] * PI1[facet_0][facet_0][5][0];
    A[550] = sp[67] * PI1[facet_0][facet_0][5][1];
    A[551] = sp[67] * PI1[facet_0][facet_0][5][2];
    A[552] = sp[64] * PI0[facet_0][facet_1][5][0];
    A[553] = sp[64] * PI0[facet_0][facet_1][5][1];
    A[554] = sp[64] * PI0[facet_0][facet_1][5][2];
    A[555] = sp[64] * PI0[facet_0][facet_1][5][3];
    A[556] = sp[64] * PI0[facet_0][facet_1][5][4];
    A[557] = sp[64] * PI0[facet_0][facet_1][5][5];
    A[558] = sp[63] * PI0[facet_0][facet_1][5][0];
    A[559] = sp[63] * PI0[facet_0][facet_1][5][1];
    A[560] = sp[63] * PI0[facet_0][facet_1][5][2];
    A[561] = sp[63] * PI0[facet_0][facet_1][5][3];
    A[562] = sp[63] * PI0[facet_0][facet_1][5][4];
    A[563] = sp[63] * PI0[facet_0][facet_1][5][5];
    A[564] = sp[65] * PI0[facet_0][facet_1][5][0];
    A[565] = sp[65] * PI0[facet_0][facet_1][5][1];
    A[566] = sp[65] * PI0[facet_0][facet_1][5][2];
    A[567] = sp[65] * PI0[facet_0][facet_1][5][3];
    A[568] = sp[65] * PI0[facet_0][facet_1][5][4];
    A[569] = sp[65] * PI0[facet_0][facet_1][5][5];
    A[570] = sp[66] * PI1[facet_0][facet_1][5][0];
    A[571] = sp[66] * PI1[facet_0][facet_1][5][1];
    A[572] = sp[66] * PI1[facet_0][facet_1][5][2];
    A[573] = sp[67] * PI1[facet_0][facet_1][5][0];
    A[574] = sp[67] * PI1[facet_0][facet_1][5][1];
    A[575] = sp[67] * PI1[facet_0][facet_1][5][2];
    std::fill(A + 576, A + 582, 0.0);
    A[582] = sp[62] * PI0[facet_0][facet_0][0][0];
    A[583] = sp[62] * PI0[facet_0][facet_0][0][1];
    A[584] = sp[62] * PI0[facet_0][facet_0][0][2];
    A[585] = sp[62] * PI0[facet_0][facet_0][0][3];
    A[586] = sp[62] * PI0[facet_0][facet_0][0][4];
    A[587] = sp[62] * PI0[facet_0][facet_0][0][5];
    A[588] = sp[79] * PI0[facet_0][facet_0][0][0];
    A[589] = sp[79] * PI0[facet_0][facet_0][0][1];
    A[590] = sp[79] * PI0[facet_0][facet_0][0][2];
    A[591] = sp[79] * PI0[facet_0][facet_0][0][3];
    A[592] = sp[79] * PI0[facet_0][facet_0][0][4];
    A[593] = sp[79] * PI0[facet_0][facet_0][0][5];
    std::fill(A + 594, A + 597, 0.0);
    A[597] = sp[66] * PI1[facet_0][facet_0][0][0];
    A[598] = sp[66] * PI1[facet_0][facet_0][0][1];
    A[599] = sp[66] * PI1[facet_0][facet_0][0][2];
    std::fill(A + 600, A + 606, 0.0);
    A[606] = sp[64] * PI0[facet_0][facet_1][0][0];
    A[607] = sp[64] * PI0[facet_0][facet_1][0][1];
    A[608] = sp[64] * PI0[facet_0][facet_1][0][2];
    A[609] = sp[64] * PI0[facet_0][facet_1][0][3];
    A[610] = sp[64] * PI0[facet_0][facet_1][0][4];
    A[611] = sp[64] * PI0[facet_0][facet_1][0][5];
    A[612] = sp[80] * PI0[facet_0][facet_1][0][0];
    A[613] = sp[80] * PI0[facet_0][facet_1][0][1];
    A[614] = sp[80] * PI0[facet_0][facet_1][0][2];
    A[615] = sp[80] * PI0[facet_0][facet_1][0][3];
    A[616] = sp[80] * PI0[facet_0][facet_1][0][4];
    A[617] = sp[80] * PI0[facet_0][facet_1][0][5];
    std::fill(A + 618, A + 621, 0.0);
    A[621] = sp[66] * PI1[facet_0][facet_1][0][0];
    A[622] = sp[66] * PI1[facet_0][facet_1][0][1];
    A[623] = sp[66] * PI1[facet_0][facet_1][0][2];
    std::fill(A + 624, A + 630, 0.0);
    A[630] = sp[62] * PI0[facet_0][facet_0][1][0];
    A[631] = sp[62] * PI0[facet_0][facet_0][1][1];
    A[632] = sp[62] * PI0[facet_0][facet_0][1][2];
    A[633] = sp[62] * PI0[facet_0][facet_0][1][3];
    A[634] = sp[62] * PI0[facet_0][facet_0][1][4];
    A[635] = sp[62] * PI0[facet_0][facet_0][1][5];
    A[636] = sp[79] * PI0[facet_0][facet_0][1][0];
    A[637] = sp[79] * PI0[facet_0][facet_0][1][1];
    A[638] = sp[79] * PI0[facet_0][facet_0][1][2];
    A[639] = sp[79] * PI0[facet_0][facet_0][1][3];
    A[640] = sp[79] * PI0[facet_0][facet_0][1][4];
    A[641] = sp[79] * PI0[facet_0][facet_0][1][5];
    std::fill(A + 642, A + 645, 0.0);
    A[645] = sp[66] * PI1[facet_0][facet_0][1][0];
    A[646] = sp[66] * PI1[facet_0][facet_0][1][1];
    A[647] = sp[66] * PI1[facet_0][facet_0][1][2];
    std::fill(A + 648, A + 654, 0.0);
    A[654] = sp[64] * PI0[facet_0][facet_1][1][0];
    A[655] = sp[64] * PI0[facet_0][facet_1][1][1];
    A[656] = sp[64] * PI0[facet_0][facet_1][1][2];
    A[657] = sp[64] * PI0[facet_0][facet_1][1][3];
    A[658] = sp[64] * PI0[facet_0][facet_1][1][4];
    A[659] = sp[64] * PI0[facet_0][facet_1][1][5];
    A[660] = sp[80] * PI0[facet_0][facet_1][1][0];
    A[661] = sp[80] * PI0[facet_0][facet_1][1][1];
    A[662] = sp[80] * PI0[facet_0][facet_1][1][2];
    A[663] = sp[80] * PI0[facet_0][facet_1][1][3];
    A[664] = sp[80] * PI0[facet_0][facet_1][1][4];
    A[665] = sp[80] * PI0[facet_0][facet_1][1][5];
    std::fill(A + 666, A + 669, 0.0);
    A[669] = sp[66] * PI1[facet_0][facet_1][1][0];
    A[670] = sp[66] * PI1[facet_0][facet_1][1][1];
    A[671] = sp[66] * PI1[facet_0][facet_1][1][2];
    std::fill(A + 672, A + 678, 0.0);
    A[678] = sp[62] * PI0[facet_0][facet_0][2][0];
    A[679] = sp[62] * PI0[facet_0][facet_0][2][1];
    A[680] = sp[62] * PI0[facet_0][facet_0][2][2];
    A[681] = sp[62] * PI0[facet_0][facet_0][2][3];
    A[682] = sp[62] * PI0[facet_0][facet_0][2][4];
    A[683] = sp[62] * PI0[facet_0][facet_0][2][5];
    A[684] = sp[79] * PI0[facet_0][facet_0][2][0];
    A[685] = sp[79] * PI0[facet_0][facet_0][2][1];
    A[686] = sp[79] * PI0[facet_0][facet_0][2][2];
    A[687] = sp[79] * PI0[facet_0][facet_0][2][3];
    A[688] = sp[79] * PI0[facet_0][facet_0][2][4];
    A[689] = sp[79] * PI0[facet_0][facet_0][2][5];
    std::fill(A + 690, A + 693, 0.0);
    A[693] = sp[66] * PI1[facet_0][facet_0][2][0];
    A[694] = sp[66] * PI1[facet_0][facet_0][2][1];
    A[695] = sp[66] * PI1[facet_0][facet_0][2][2];
    std::fill(A + 696, A + 702, 0.0);
    A[702] = sp[64] * PI0[facet_0][facet_1][2][0];
    A[703] = sp[64] * PI0[facet_0][facet_1][2][1];
    A[704] = sp[64] * PI0[facet_0][facet_1][2][2];
    A[705] = sp[64] * PI0[facet_0][facet_1][2][3];
    A[706] = sp[64] * PI0[facet_0][facet_1][2][4];
    A[707] = sp[64] * PI0[facet_0][facet_1][2][5];
    A[708] = sp[80] * PI0[facet_0][facet_1][2][0];
    A[709] = sp[80] * PI0[facet_0][facet_1][2][1];
    A[710] = sp[80] * PI0[facet_0][facet_1][2][2];
    A[711] = sp[80] * PI0[facet_0][facet_1][2][3];
    A[712] = sp[80] * PI0[facet_0][facet_1][2][4];
    A[713] = sp[80] * PI0[facet_0][facet_1][2][5];
    std::fill(A + 714, A + 717, 0.0);
    A[717] = sp[66] * PI1[facet_0][facet_1][2][0];
    A[718] = sp[66] * PI1[facet_0][facet_1][2][1];
    A[719] = sp[66] * PI1[facet_0][facet_1][2][2];
    std::fill(A + 720, A + 726, 0.0);
    A[726] = sp[62] * PI0[facet_0][facet_0][3][0];
    A[727] = sp[62] * PI0[facet_0][facet_0][3][1];
    A[728] = sp[62] * PI0[facet_0][facet_0][3][2];
    A[729] = sp[62] * PI0[facet_0][facet_0][3][3];
    A[730] = sp[62] * PI0[facet_0][facet_0][3][4];
    A[731] = sp[62] * PI0[facet_0][facet_0][3][5];
    A[732] = sp[79] * PI0[facet_0][facet_0][3][0];
    A[733] = sp[79] * PI0[facet_0][facet_0][3][1];
    A[734] = sp[79] * PI0[facet_0][facet_0][3][2];
    A[735] = sp[79] * PI0[facet_0][facet_0][3][3];
    A[736] = sp[79] * PI0[facet_0][facet_0][3][4];
    A[737] = sp[79] * PI0[facet_0][facet_0][3][5];
    std::fill(A + 738, A + 741, 0.0);
    A[741] = sp[66] * PI1[facet_0][facet_0][3][0];
    A[742] = sp[66] * PI1[facet_0][facet_0][3][1];
    A[743] = sp[66] * PI1[facet_0][facet_0][3][2];
    std::fill(A + 744, A + 750, 0.0);
    A[750] = sp[64] * PI0[facet_0][facet_1][3][0];
    A[751] = sp[64] * PI0[facet_0][facet_1][3][1];
    A[752] = sp[64] * PI0[facet_0][facet_1][3][2];
    A[753] = sp[64] * PI0[facet_0][facet_1][3][3];
    A[754] = sp[64] * PI0[facet_0][facet_1][3][4];
    A[755] = sp[64] * PI0[facet_0][facet_1][3][5];
    A[756] = sp[80] * PI0[facet_0][facet_1][3][0];
    A[757] = sp[80] * PI0[facet_0][facet_1][3][1];
    A[758] = sp[80] * PI0[facet_0][facet_1][3][2];
    A[759] = sp[80] * PI0[facet_0][facet_1][3][3];
    A[760] = sp[80] * PI0[facet_0][facet_1][3][4];
    A[761] = sp[80] * PI0[facet_0][facet_1][3][5];
    std::fill(A + 762, A + 765, 0.0);
    A[765] = sp[66] * PI1[facet_0][facet_1][3][0];
    A[766] = sp[66] * PI1[facet_0][facet_1][3][1];
    A[767] = sp[66] * PI1[facet_0][facet_1][3][2];
    std::fill(A + 768, A + 774, 0.0);
    A[774] = sp[62] * PI0[facet_0][facet_0][4][0];
    A[775] = sp[62] * PI0[facet_0][facet_0][4][1];
    A[776] = sp[62] * PI0[facet_0][facet_0][4][2];
    A[777] = sp[62] * PI0[facet_0][facet_0][4][3];
    A[778] = sp[62] * PI0[facet_0][facet_0][4][4];
    A[779] = sp[62] * PI0[facet_0][facet_0][4][5];
    A[780] = sp[79] * PI0[facet_0][facet_0][4][0];
    A[781] = sp[79] * PI0[facet_0][facet_0][4][1];
    A[782] = sp[79] * PI0[facet_0][facet_0][4][2];
    A[783] = sp[79] * PI0[facet_0][facet_0][4][3];
    A[784] = sp[79] * PI0[facet_0][facet_0][4][4];
    A[785] = sp[79] * PI0[facet_0][facet_0][4][5];
    std::fill(A + 786, A + 789, 0.0);
    A[789] = sp[66] * PI1[facet_0][facet_0][4][0];
    A[790] = sp[66] * PI1[facet_0][facet_0][4][1];
    A[791] = sp[66] * PI1[facet_0][facet_0][4][2];
    std::fill(A + 792, A + 798, 0.0);
    A[798] = sp[64] * PI0[facet_0][facet_1][4][0];
    A[799] = sp[64] * PI0[facet_0][facet_1][4][1];
    A[800] = sp[64] * PI0[facet_0][facet_1][4][2];
    A[801] = sp[64] * PI0[facet_0][facet_1][4][3];
    A[802] = sp[64] * PI0[facet_0][facet_1][4][4];
    A[803] = sp[64] * PI0[facet_0][facet_1][4][5];
    A[804] = sp[80] * PI0[facet_0][facet_1][4][0];
    A[805] = sp[80] * PI0[facet_0][facet_1][4][1];
    A[806] = sp[80] * PI0[facet_0][facet_1][4][2];
    A[807] = sp[80] * PI0[facet_0][facet_1][4][3];
    A[808] = sp[80] * PI0[facet_0][facet_1][4][4];
    A[809] = sp[80] * PI0[facet_0][facet_1][4][5];
    std::fill(A + 810, A + 813, 0.0);
    A[813] = sp[66] * PI1[facet_0][facet_1][4][0];
    A[814] = sp[66] * PI1[facet_0][facet_1][4][1];
    A[815] = sp[66] * PI1[facet_0][facet_1][4][2];
    std::fill(A + 816, A + 822, 0.0);
    A[822] = sp[62] * PI0[facet_0][facet_0][5][0];
    A[823] = sp[62] * PI0[facet_0][facet_0][5][1];
    A[824] = sp[62] * PI0[facet_0][facet_0][5][2];
    A[825] = sp[62] * PI0[facet_0][facet_0][5][3];
    A[826] = sp[62] * PI0[facet_0][facet_0][5][4];
    A[827] = sp[62] * PI0[facet_0][facet_0][5][5];
    A[828] = sp[79] * PI0[facet_0][facet_0][5][0];
    A[829] = sp[79] * PI0[facet_0][facet_0][5][1];
    A[830] = sp[79] * PI0[facet_0][facet_0][5][2];
    A[831] = sp[79] * PI0[facet_0][facet_0][5][3];
    A[832] = sp[79] * PI0[facet_0][facet_0][5][4];
    A[833] = sp[79] * PI0[facet_0][facet_0][5][5];
    std::fill(A + 834, A + 837, 0.0);
    A[837] = sp[66] * PI1[facet_0][facet_0][5][0];
    A[838] = sp[66] * PI1[facet_0][facet_0][5][1];
    A[839] = sp[66] * PI1[facet_0][facet_0][5][2];
    std::fill(A + 840, A + 846, 0.0);
    A[846] = sp[64] * PI0[facet_0][facet_1][5][0];
    A[847] = sp[64] * PI0[facet_0][facet_1][5][1];
    A[848] = sp[64] * PI0[facet_0][facet_1][5][2];
    A[849] = sp[64] * PI0[facet_0][facet_1][5][3];
    A[850] = sp[64] * PI0[facet_0][facet_1][5][4];
    A[851] = sp[64] * PI0[facet_0][facet_1][5][5];
    A[852] = sp[80] * PI0[facet_0][facet_1][5][0];
    A[853] = sp[80] * PI0[facet_0][facet_1][5][1];
    A[854] = sp[80] * PI0[facet_0][facet_1][5][2];
    A[855] = sp[80] * PI0[facet_0][facet_1][5][3];
    A[856] = sp[80] * PI0[facet_0][facet_1][5][4];
    A[857] = sp[80] * PI0[facet_0][facet_1][5][5];
    std::fill(A + 858, A + 861, 0.0);
    A[861] = sp[66] * PI1[facet_0][facet_1][5][0];
    A[862] = sp[66] * PI1[facet_0][facet_1][5][1];
    A[863] = sp[66] * PI1[facet_0][facet_1][5][2];
    A[864] = sp[76] * PI1[facet_0][facet_0][0][0];
    A[865] = sp[76] * PI1[facet_0][facet_0][1][0];
    A[866] = sp[76] * PI1[facet_0][facet_0][2][0];
    A[867] = sp[76] * PI1[facet_0][facet_0][3][0];
    A[868] = sp[76] * PI1[facet_0][facet_0][4][0];
    A[869] = sp[76] * PI1[facet_0][facet_0][5][0];
    A[870] = sp[75] * PI1[facet_0][facet_0][0][0];
    A[871] = sp[75] * PI1[facet_0][facet_0][1][0];
    A[872] = sp[75] * PI1[facet_0][facet_0][2][0];
    A[873] = sp[75] * PI1[facet_0][facet_0][3][0];
    A[874] = sp[75] * PI1[facet_0][facet_0][4][0];
    A[875] = sp[75] * PI1[facet_0][facet_0][5][0];
    std::fill(A + 876, A + 888, 0.0);
    A[888] = sp[78] * PI1[facet_1][facet_0][0][0];
    A[889] = sp[78] * PI1[facet_1][facet_0][1][0];
    A[890] = sp[78] * PI1[facet_1][facet_0][2][0];
    A[891] = sp[78] * PI1[facet_1][facet_0][3][0];
    A[892] = sp[78] * PI1[facet_1][facet_0][4][0];
    A[893] = sp[78] * PI1[facet_1][facet_0][5][0];
    A[894] = sp[77] * PI1[facet_1][facet_0][0][0];
    A[895] = sp[77] * PI1[facet_1][facet_0][1][0];
    A[896] = sp[77] * PI1[facet_1][facet_0][2][0];
    A[897] = sp[77] * PI1[facet_1][facet_0][3][0];
    A[898] = sp[77] * PI1[facet_1][facet_0][4][0];
    A[899] = sp[77] * PI1[facet_1][facet_0][5][0];
    std::fill(A + 900, A + 912, 0.0);
    A[912] = sp[76] * PI1[facet_0][facet_0][0][1];
    A[913] = sp[76] * PI1[facet_0][facet_0][1][1];
    A[914] = sp[76] * PI1[facet_0][facet_0][2][1];
    A[915] = sp[76] * PI1[facet_0][facet_0][3][1];
    A[916] = sp[76] * PI1[facet_0][facet_0][4][1];
    A[917] = sp[76] * PI1[facet_0][facet_0][5][1];
    A[918] = sp[75] * PI1[facet_0][facet_0][0][1];
    A[919] = sp[75] * PI1[facet_0][facet_0][1][1];
    A[920] = sp[75] * PI1[facet_0][facet_0][2][1];
    A[921] = sp[75] * PI1[facet_0][facet_0][3][1];
    A[922] = sp[75] * PI1[facet_0][facet_0][4][1];
    A[923] = sp[75] * PI1[facet_0][facet_0][5][1];
    std::fill(A + 924, A + 936, 0.0);
    A[936] = sp[78] * PI1[facet_1][facet_0][0][1];
    A[937] = sp[78] * PI1[facet_1][facet_0][1][1];
    A[938] = sp[78] * PI1[facet_1][facet_0][2][1];
    A[939] = sp[78] * PI1[facet_1][facet_0][3][1];
    A[940] = sp[78] * PI1[facet_1][facet_0][4][1];
    A[941] = sp[78] * PI1[facet_1][facet_0][5][1];
    A[942] = sp[77] * PI1[facet_1][facet_0][0][1];
    A[943] = sp[77] * PI1[facet_1][facet_0][1][1];
    A[944] = sp[77] * PI1[facet_1][facet_0][2][1];
    A[945] = sp[77] * PI1[facet_1][facet_0][3][1];
    A[946] = sp[77] * PI1[facet_1][facet_0][4][1];
    A[947] = sp[77] * PI1[facet_1][facet_0][5][1];
    std::fill(A + 948, A + 960, 0.0);
    A[960] = sp[76] * PI1[facet_0][facet_0][0][2];
    A[961] = sp[76] * PI1[facet_0][facet_0][1][2];
    A[962] = sp[76] * PI1[facet_0][facet_0][2][2];
    A[963] = sp[76] * PI1[facet_0][facet_0][3][2];
    A[964] = sp[76] * PI1[facet_0][facet_0][4][2];
    A[965] = sp[76] * PI1[facet_0][facet_0][5][2];
    A[966] = sp[75] * PI1[facet_0][facet_0][0][2];
    A[967] = sp[75] * PI1[facet_0][facet_0][1][2];
    A[968] = sp[75] * PI1[facet_0][facet_0][2][2];
    A[969] = sp[75] * PI1[facet_0][facet_0][3][2];
    A[970] = sp[75] * PI1[facet_0][facet_0][4][2];
    A[971] = sp[75] * PI1[facet_0][facet_0][5][2];
    std::fill(A + 972, A + 984, 0.0);
    A[984] = sp[78] * PI1[facet_1][facet_0][0][2];
    A[985] = sp[78] * PI1[facet_1][facet_0][1][2];
    A[986] = sp[78] * PI1[facet_1][facet_0][2][2];
    A[987] = sp[78] * PI1[facet_1][facet_0][3][2];
    A[988] = sp[78] * PI1[facet_1][facet_0][4][2];
    A[989] = sp[78] * PI1[facet_1][facet_0][5][2];
    A[990] = sp[77] * PI1[facet_1][facet_0][0][2];
    A[991] = sp[77] * PI1[facet_1][facet_0][1][2];
    A[992] = sp[77] * PI1[facet_1][facet_0][2][2];
    A[993] = sp[77] * PI1[facet_1][facet_0][3][2];
    A[994] = sp[77] * PI1[facet_1][facet_0][4][2];
    A[995] = sp[77] * PI1[facet_1][facet_0][5][2];
    std::fill(A + 996, A + 1014, 0.0);
    A[1014] = sp[76] * PI1[facet_0][facet_0][0][0];
    A[1015] = sp[76] * PI1[facet_0][facet_0][1][0];
    A[1016] = sp[76] * PI1[facet_0][facet_0][2][0];
    A[1017] = sp[76] * PI1[facet_0][facet_0][3][0];
    A[1018] = sp[76] * PI1[facet_0][facet_0][4][0];
    A[1019] = sp[76] * PI1[facet_0][facet_0][5][0];
    A[1020] = sp[75] * PI1[facet_0][facet_0][0][0];
    A[1021] = sp[75] * PI1[facet_0][facet_0][1][0];
    A[1022] = sp[75] * PI1[facet_0][facet_0][2][0];
    A[1023] = sp[75] * PI1[facet_0][facet_0][3][0];
    A[1024] = sp[75] * PI1[facet_0][facet_0][4][0];
    A[1025] = sp[75] * PI1[facet_0][facet_0][5][0];
    std::fill(A + 1026, A + 1038, 0.0);
    A[1038] = sp[78] * PI1[facet_1][facet_0][0][0];
    A[1039] = sp[78] * PI1[facet_1][facet_0][1][0];
    A[1040] = sp[78] * PI1[facet_1][facet_0][2][0];
    A[1041] = sp[78] * PI1[facet_1][facet_0][3][0];
    A[1042] = sp[78] * PI1[facet_1][facet_0][4][0];
    A[1043] = sp[78] * PI1[facet_1][facet_0][5][0];
    A[1044] = sp[77] * PI1[facet_1][facet_0][0][0];
    A[1045] = sp[77] * PI1[facet_1][facet_0][1][0];
    A[1046] = sp[77] * PI1[facet_1][facet_0][2][0];
    A[1047] = sp[77] * PI1[facet_1][facet_0][3][0];
    A[1048] = sp[77] * PI1[facet_1][facet_0][4][0];
    A[1049] = sp[77] * PI1[facet_1][facet_0][5][0];
    std::fill(A + 1050, A + 1062, 0.0);
    A[1062] = sp[76] * PI1[facet_0][facet_0][0][1];
    A[1063] = sp[76] * PI1[facet_0][facet_0][1][1];
    A[1064] = sp[76] * PI1[facet_0][facet_0][2][1];
    A[1065] = sp[76] * PI1[facet_0][facet_0][3][1];
    A[1066] = sp[76] * PI1[facet_0][facet_0][4][1];
    A[1067] = sp[76] * PI1[facet_0][facet_0][5][1];
    A[1068] = sp[75] * PI1[facet_0][facet_0][0][1];
    A[1069] = sp[75] * PI1[facet_0][facet_0][1][1];
    A[1070] = sp[75] * PI1[facet_0][facet_0][2][1];
    A[1071] = sp[75] * PI1[facet_0][facet_0][3][1];
    A[1072] = sp[75] * PI1[facet_0][facet_0][4][1];
    A[1073] = sp[75] * PI1[facet_0][facet_0][5][1];
    std::fill(A + 1074, A + 1086, 0.0);
    A[1086] = sp[78] * PI1[facet_1][facet_0][0][1];
    A[1087] = sp[78] * PI1[facet_1][facet_0][1][1];
    A[1088] = sp[78] * PI1[facet_1][facet_0][2][1];
    A[1089] = sp[78] * PI1[facet_1][facet_0][3][1];
    A[1090] = sp[78] * PI1[facet_1][facet_0][4][1];
    A[1091] = sp[78] * PI1[facet_1][facet_0][5][1];
    A[1092] = sp[77] * PI1[facet_1][facet_0][0][1];
    A[1093] = sp[77] * PI1[facet_1][facet_0][1][1];
    A[1094] = sp[77] * PI1[facet_1][facet_0][2][1];
    A[1095] = sp[77] * PI1[facet_1][facet_0][3][1];
    A[1096] = sp[77] * PI1[facet_1][facet_0][4][1];
    A[1097] = sp[77] * PI1[facet_1][facet_0][5][1];
    std::fill(A + 1098, A + 1110, 0.0);
    A[1110] = sp[76] * PI1[facet_0][facet_0][0][2];
    A[1111] = sp[76] * PI1[facet_0][facet_0][1][2];
    A[1112] = sp[76] * PI1[facet_0][facet_0][2][2];
    A[1113] = sp[76] * PI1[facet_0][facet_0][3][2];
    A[1114] = sp[76] * PI1[facet_0][facet_0][4][2];
    A[1115] = sp[76] * PI1[facet_0][facet_0][5][2];
    A[1116] = sp[75] * PI1[facet_0][facet_0][0][2];
    A[1117] = sp[75] * PI1[facet_0][facet_0][1][2];
    A[1118] = sp[75] * PI1[facet_0][facet_0][2][2];
    A[1119] = sp[75] * PI1[facet_0][facet_0][3][2];
    A[1120] = sp[75] * PI1[facet_0][facet_0][4][2];
    A[1121] = sp[75] * PI1[facet_0][facet_0][5][2];
    std::fill(A + 1122, A + 1134, 0.0);
    A[1134] = sp[78] * PI1[facet_1][facet_0][0][2];
    A[1135] = sp[78] * PI1[facet_1][facet_0][1][2];
    A[1136] = sp[78] * PI1[facet_1][facet_0][2][2];
    A[1137] = sp[78] * PI1[facet_1][facet_0][3][2];
    A[1138] = sp[78] * PI1[facet_1][facet_0][4][2];
    A[1139] = sp[78] * PI1[facet_1][facet_0][5][2];
    A[1140] = sp[77] * PI1[facet_1][facet_0][0][2];
    A[1141] = sp[77] * PI1[facet_1][facet_0][1][2];
    A[1142] = sp[77] * PI1[facet_1][facet_0][2][2];
    A[1143] = sp[77] * PI1[facet_1][facet_0][3][2];
    A[1144] = sp[77] * PI1[facet_1][facet_0][4][2];
    A[1145] = sp[77] * PI1[facet_1][facet_0][5][2];
    std::fill(A + 1146, A + 1152, 0.0);
    A[1152] = sp[69] * PI0[facet_1][facet_0][0][0];
    A[1153] = sp[69] * PI0[facet_1][facet_0][0][1];
    A[1154] = sp[69] * PI0[facet_1][facet_0][0][2];
    A[1155] = sp[69] * PI0[facet_1][facet_0][0][3];
    A[1156] = sp[69] * PI0[facet_1][facet_0][0][4];
    A[1157] = sp[69] * PI0[facet_1][facet_0][0][5];
    A[1158] = sp[64] * PI0[facet_1][facet_0][0][0];
    A[1159] = sp[64] * PI0[facet_1][facet_0][0][1];
    A[1160] = sp[64] * PI0[facet_1][facet_0][0][2];
    A[1161] = sp[64] * PI0[facet_1][facet_0][0][3];
    A[1162] = sp[64] * PI0[facet_1][facet_0][0][4];
    A[1163] = sp[64] * PI0[facet_1][facet_0][0][5];
    std::fill(A + 1164, A + 1170, 0.0);
    A[1170] = sp[73] * PI1[facet_1][facet_0][0][0];
    A[1171] = sp[73] * PI1[facet_1][facet_0][0][1];
    A[1172] = sp[73] * PI1[facet_1][facet_0][0][2];
    std::fill(A + 1173, A + 1176, 0.0);
    A[1176] = sp[74] * PI0[facet_1][facet_1][0][0];
    A[1177] = sp[74] * PI0[facet_1][facet_1][0][1];
    A[1178] = sp[74] * PI0[facet_1][facet_1][0][2];
    A[1179] = sp[74] * PI0[facet_1][facet_1][0][3];
    A[1180] = sp[74] * PI0[facet_1][facet_1][0][4];
    A[1181] = sp[74] * PI0[facet_1][facet_1][0][5];
    A[1182] = sp[71] * PI0[facet_1][facet_1][0][0];
    A[1183] = sp[71] * PI0[facet_1][facet_1][0][1];
    A[1184] = sp[71] * PI0[facet_1][facet_1][0][2];
    A[1185] = sp[71] * PI0[facet_1][facet_1][0][3];
    A[1186] = sp[71] * PI0[facet_1][facet_1][0][4];
    A[1187] = sp[71] * PI0[facet_1][facet_1][0][5];
    std::fill(A + 1188, A + 1194, 0.0);
    A[1194] = sp[73] * PI1[facet_1][facet_1][0][0];
    A[1195] = sp[73] * PI1[facet_1][facet_1][0][1];
    A[1196] = sp[73] * PI1[facet_1][facet_1][0][2];
    std::fill(A + 1197, A + 1200, 0.0);
    A[1200] = sp[69] * PI0[facet_1][facet_0][1][0];
    A[1201] = sp[69] * PI0[facet_1][facet_0][1][1];
    A[1202] = sp[69] * PI0[facet_1][facet_0][1][2];
    A[1203] = sp[69] * PI0[facet_1][facet_0][1][3];
    A[1204] = sp[69] * PI0[facet_1][facet_0][1][4];
    A[1205] = sp[69] * PI0[facet_1][facet_0][1][5];
    A[1206] = sp[64] * PI0[facet_1][facet_0][1][0];
    A[1207] = sp[64] * PI0[facet_1][facet_0][1][1];
    A[1208] = sp[64] * PI0[facet_1][facet_0][1][2];
    A[1209] = sp[64] * PI0[facet_1][facet_0][1][3];
    A[1210] = sp[64] * PI0[facet_1][facet_0][1][4];
    A[1211] = sp[64] * PI0[facet_1][facet_0][1][5];
    std::fill(A + 1212, A + 1218, 0.0);
    A[1218] = sp[73] * PI1[facet_1][facet_0][1][0];
    A[1219] = sp[73] * PI1[facet_1][facet_0][1][1];
    A[1220] = sp[73] * PI1[facet_1][facet_0][1][2];
    std::fill(A + 1221, A + 1224, 0.0);
    A[1224] = sp[74] * PI0[facet_1][facet_1][1][0];
    A[1225] = sp[74] * PI0[facet_1][facet_1][1][1];
    A[1226] = sp[74] * PI0[facet_1][facet_1][1][2];
    A[1227] = sp[74] * PI0[facet_1][facet_1][1][3];
    A[1228] = sp[74] * PI0[facet_1][facet_1][1][4];
    A[1229] = sp[74] * PI0[facet_1][facet_1][1][5];
    A[1230] = sp[71] * PI0[facet_1][facet_1][1][0];
    A[1231] = sp[71] * PI0[facet_1][facet_1][1][1];
    A[1232] = sp[71] * PI0[facet_1][facet_1][1][2];
    A[1233] = sp[71] * PI0[facet_1][facet_1][1][3];
    A[1234] = sp[71] * PI0[facet_1][facet_1][1][4];
    A[1235] = sp[71] * PI0[facet_1][facet_1][1][5];
    std::fill(A + 1236, A + 1242, 0.0);
    A[1242] = sp[73] * PI1[facet_1][facet_1][1][0];
    A[1243] = sp[73] * PI1[facet_1][facet_1][1][1];
    A[1244] = sp[73] * PI1[facet_1][facet_1][1][2];
    std::fill(A + 1245, A + 1248, 0.0);
    A[1248] = sp[69] * PI0[facet_1][facet_0][2][0];
    A[1249] = sp[69] * PI0[facet_1][facet_0][2][1];
    A[1250] = sp[69] * PI0[facet_1][facet_0][2][2];
    A[1251] = sp[69] * PI0[facet_1][facet_0][2][3];
    A[1252] = sp[69] * PI0[facet_1][facet_0][2][4];
    A[1253] = sp[69] * PI0[facet_1][facet_0][2][5];
    A[1254] = sp[64] * PI0[facet_1][facet_0][2][0];
    A[1255] = sp[64] * PI0[facet_1][facet_0][2][1];
    A[1256] = sp[64] * PI0[facet_1][facet_0][2][2];
    A[1257] = sp[64] * PI0[facet_1][facet_0][2][3];
    A[1258] = sp[64] * PI0[facet_1][facet_0][2][4];
    A[1259] = sp[64] * PI0[facet_1][facet_0][2][5];
    std::fill(A + 1260, A + 1266, 0.0);
    A[1266] = sp[73] * PI1[facet_1][facet_0][2][0];
    A[1267] = sp[73] * PI1[facet_1][facet_0][2][1];
    A[1268] = sp[73] * PI1[facet_1][facet_0][2][2];
    std::fill(A + 1269, A + 1272, 0.0);
    A[1272] = sp[74] * PI0[facet_1][facet_1][2][0];
    A[1273] = sp[74] * PI0[facet_1][facet_1][2][1];
    A[1274] = sp[74] * PI0[facet_1][facet_1][2][2];
    A[1275] = sp[74] * PI0[facet_1][facet_1][2][3];
    A[1276] = sp[74] * PI0[facet_1][facet_1][2][4];
    A[1277] = sp[74] * PI0[facet_1][facet_1][2][5];
    A[1278] = sp[71] * PI0[facet_1][facet_1][2][0];
    A[1279] = sp[71] * PI0[facet_1][facet_1][2][1];
    A[1280] = sp[71] * PI0[facet_1][facet_1][2][2];
    A[1281] = sp[71] * PI0[facet_1][facet_1][2][3];
    A[1282] = sp[71] * PI0[facet_1][facet_1][2][4];
    A[1283] = sp[71] * PI0[facet_1][facet_1][2][5];
    std::fill(A + 1284, A + 1290, 0.0);
    A[1290] = sp[73] * PI1[facet_1][facet_1][2][0];
    A[1291] = sp[73] * PI1[facet_1][facet_1][2][1];
    A[1292] = sp[73] * PI1[facet_1][facet_1][2][2];
    std::fill(A + 1293, A + 1296, 0.0);
    A[1296] = sp[69] * PI0[facet_1][facet_0][3][0];
    A[1297] = sp[69] * PI0[facet_1][facet_0][3][1];
    A[1298] = sp[69] * PI0[facet_1][facet_0][3][2];
    A[1299] = sp[69] * PI0[facet_1][facet_0][3][3];
    A[1300] = sp[69] * PI0[facet_1][facet_0][3][4];
    A[1301] = sp[69] * PI0[facet_1][facet_0][3][5];
    A[1302] = sp[64] * PI0[facet_1][facet_0][3][0];
    A[1303] = sp[64] * PI0[facet_1][facet_0][3][1];
    A[1304] = sp[64] * PI0[facet_1][facet_0][3][2];
    A[1305] = sp[64] * PI0[facet_1][facet_0][3][3];
    A[1306] = sp[64] * PI0[facet_1][facet_0][3][4];
    A[1307] = sp[64] * PI0[facet_1][facet_0][3][5];
    std::fill(A + 1308, A + 1314, 0.0);
    A[1314] = sp[73] * PI1[facet_1][facet_0][3][0];
    A[1315] = sp[73] * PI1[facet_1][facet_0][3][1];
    A[1316] = sp[73] * PI1[facet_1][facet_0][3][2];
    std::fill(A + 1317, A + 1320, 0.0);
    A[1320] = sp[74] * PI0[facet_1][facet_1][3][0];
    A[1321] = sp[74] * PI0[facet_1][facet_1][3][1];
    A[1322] = sp[74] * PI0[facet_1][facet_1][3][2];
    A[1323] = sp[74] * PI0[facet_1][facet_1][3][3];
    A[1324] = sp[74] * PI0[facet_1][facet_1][3][4];
    A[1325] = sp[74] * PI0[facet_1][facet_1][3][5];
    A[1326] = sp[71] * PI0[facet_1][facet_1][3][0];
    A[1327] = sp[71] * PI0[facet_1][facet_1][3][1];
    A[1328] = sp[71] * PI0[facet_1][facet_1][3][2];
    A[1329] = sp[71] * PI0[facet_1][facet_1][3][3];
    A[1330] = sp[71] * PI0[facet_1][facet_1][3][4];
    A[1331] = sp[71] * PI0[facet_1][facet_1][3][5];
    std::fill(A + 1332, A + 1338, 0.0);
    A[1338] = sp[73] * PI1[facet_1][facet_1][3][0];
    A[1339] = sp[73] * PI1[facet_1][facet_1][3][1];
    A[1340] = sp[73] * PI1[facet_1][facet_1][3][2];
    std::fill(A + 1341, A + 1344, 0.0);
    A[1344] = sp[69] * PI0[facet_1][facet_0][4][0];
    A[1345] = sp[69] * PI0[facet_1][facet_0][4][1];
    A[1346] = sp[69] * PI0[facet_1][facet_0][4][2];
    A[1347] = sp[69] * PI0[facet_1][facet_0][4][3];
    A[1348] = sp[69] * PI0[facet_1][facet_0][4][4];
    A[1349] = sp[69] * PI0[facet_1][facet_0][4][5];
    A[1350] = sp[64] * PI0[facet_1][facet_0][4][0];
    A[1351] = sp[64] * PI0[facet_1][facet_0][4][1];
    A[1352] = sp[64] * PI0[facet_1][facet_0][4][2];
    A[1353] = sp[64] * PI0[facet_1][facet_0][4][3];
    A[1354] = sp[64] * PI0[facet_1][facet_0][4][4];
    A[1355] = sp[64] * PI0[facet_1][facet_0][4][5];
    std::fill(A + 1356, A + 1362, 0.0);
    A[1362] = sp[73] * PI1[facet_1][facet_0][4][0];
    A[1363] = sp[73] * PI1[facet_1][facet_0][4][1];
    A[1364] = sp[73] * PI1[facet_1][facet_0][4][2];
    std::fill(A + 1365, A + 1368, 0.0);
    A[1368] = sp[74] * PI0[facet_1][facet_1][4][0];
    A[1369] = sp[74] * PI0[facet_1][facet_1][4][1];
    A[1370] = sp[74] * PI0[facet_1][facet_1][4][2];
    A[1371] = sp[74] * PI0[facet_1][facet_1][4][3];
    A[1372] = sp[74] * PI0[facet_1][facet_1][4][4];
    A[1373] = sp[74] * PI0[facet_1][facet_1][4][5];
    A[1374] = sp[71] * PI0[facet_1][facet_1][4][0];
    A[1375] = sp[71] * PI0[facet_1][facet_1][4][1];
    A[1376] = sp[71] * PI0[facet_1][facet_1][4][2];
    A[1377] = sp[71] * PI0[facet_1][facet_1][4][3];
    A[1378] = sp[71] * PI0[facet_1][facet_1][4][4];
    A[1379] = sp[71] * PI0[facet_1][facet_1][4][5];
    std::fill(A + 1380, A + 1386, 0.0);
    A[1386] = sp[73] * PI1[facet_1][facet_1][4][0];
    A[1387] = sp[73] * PI1[facet_1][facet_1][4][1];
    A[1388] = sp[73] * PI1[facet_1][facet_1][4][2];
    std::fill(A + 1389, A + 1392, 0.0);
    A[1392] = sp[69] * PI0[facet_1][facet_0][5][0];
    A[1393] = sp[69] * PI0[facet_1][facet_0][5][1];
    A[1394] = sp[69] * PI0[facet_1][facet_0][5][2];
    A[1395] = sp[69] * PI0[facet_1][facet_0][5][3];
    A[1396] = sp[69] * PI0[facet_1][facet_0][5][4];
    A[1397] = sp[69] * PI0[facet_1][facet_0][5][5];
    A[1398] = sp[64] * PI0[facet_1][facet_0][5][0];
    A[1399] = sp[64] * PI0[facet_1][facet_0][5][1];
    A[1400] = sp[64] * PI0[facet_1][facet_0][5][2];
    A[1401] = sp[64] * PI0[facet_1][facet_0][5][3];
    A[1402] = sp[64] * PI0[facet_1][facet_0][5][4];
    A[1403] = sp[64] * PI0[facet_1][facet_0][5][5];
    std::fill(A + 1404, A + 1410, 0.0);
    A[1410] = sp[73] * PI1[facet_1][facet_0][5][0];
    A[1411] = sp[73] * PI1[facet_1][facet_0][5][1];
    A[1412] = sp[73] * PI1[facet_1][facet_0][5][2];
    std::fill(A + 1413, A + 1416, 0.0);
    A[1416] = sp[74] * PI0[facet_1][facet_1][5][0];
    A[1417] = sp[74] * PI0[facet_1][facet_1][5][1];
    A[1418] = sp[74] * PI0[facet_1][facet_1][5][2];
    A[1419] = sp[74] * PI0[facet_1][facet_1][5][3];
    A[1420] = sp[74] * PI0[facet_1][facet_1][5][4];
    A[1421] = sp[74] * PI0[facet_1][facet_1][5][5];
    A[1422] = sp[71] * PI0[facet_1][facet_1][5][0];
    A[1423] = sp[71] * PI0[facet_1][facet_1][5][1];
    A[1424] = sp[71] * PI0[facet_1][facet_1][5][2];
    A[1425] = sp[71] * PI0[facet_1][facet_1][5][3];
    A[1426] = sp[71] * PI0[facet_1][facet_1][5][4];
    A[1427] = sp[71] * PI0[facet_1][facet_1][5][5];
    std::fill(A + 1428, A + 1434, 0.0);
    A[1434] = sp[73] * PI1[facet_1][facet_1][5][0];
    A[1435] = sp[73] * PI1[facet_1][facet_1][5][1];
    A[1436] = sp[73] * PI1[facet_1][facet_1][5][2];
    std::fill(A + 1437, A + 1440, 0.0);
    A[1440] = sp[65] * PI0[facet_1][facet_0][0][0];
    A[1441] = sp[65] * PI0[facet_1][facet_0][0][1];
    A[1442] = sp[65] * PI0[facet_1][facet_0][0][2];
    A[1443] = sp[65] * PI0[facet_1][facet_0][0][3];
    A[1444] = sp[65] * PI0[facet_1][facet_0][0][4];
    A[1445] = sp[65] * PI0[facet_1][facet_0][0][5];
    A[1446] = sp[63] * PI0[facet_1][facet_0][0][0];
    A[1447] = sp[63] * PI0[facet_1][facet_0][0][1];
    A[1448] = sp[63] * PI0[facet_1][facet_0][0][2];
    A[1449] = sp[63] * PI0[facet_1][facet_0][0][3];
    A[1450] = sp[63] * PI0[facet_1][facet_0][0][4];
    A[1451] = sp[63] * PI0[facet_1][facet_0][0][5];
    A[1452] = sp[64] * PI0[facet_1][facet_0][0][0];
    A[1453] = sp[64] * PI0[facet_1][facet_0][0][1];
    A[1454] = sp[64] * PI0[facet_1][facet_0][0][2];
    A[1455] = sp[64] * PI0[facet_1][facet_0][0][3];
    A[1456] = sp[64] * PI0[facet_1][facet_0][0][4];
    A[1457] = sp[64] * PI0[facet_1][facet_0][0][5];
    A[1458] = sp[72] * PI1[facet_1][facet_0][0][0];
    A[1459] = sp[72] * PI1[facet_1][facet_0][0][1];
    A[1460] = sp[72] * PI1[facet_1][facet_0][0][2];
    A[1461] = sp[73] * PI1[facet_1][facet_0][0][0];
    A[1462] = sp[73] * PI1[facet_1][facet_0][0][1];
    A[1463] = sp[73] * PI1[facet_1][facet_0][0][2];
    A[1464] = sp[71] * PI0[facet_1][facet_1][0][0];
    A[1465] = sp[71] * PI0[facet_1][facet_1][0][1];
    A[1466] = sp[71] * PI0[facet_1][facet_1][0][2];
    A[1467] = sp[71] * PI0[facet_1][facet_1][0][3];
    A[1468] = sp[71] * PI0[facet_1][facet_1][0][4];
    A[1469] = sp[71] * PI0[facet_1][facet_1][0][5];
    A[1470] = sp[70] * PI0[facet_1][facet_1][0][0];
    A[1471] = sp[70] * PI0[facet_1][facet_1][0][1];
    A[1472] = sp[70] * PI0[facet_1][facet_1][0][2];
    A[1473] = sp[70] * PI0[facet_1][facet_1][0][3];
    A[1474] = sp[70] * PI0[facet_1][facet_1][0][4];
    A[1475] = sp[70] * PI0[facet_1][facet_1][0][5];
    A[1476] = sp[71] * PI0[facet_1][facet_1][0][0];
    A[1477] = sp[71] * PI0[facet_1][facet_1][0][1];
    A[1478] = sp[71] * PI0[facet_1][facet_1][0][2];
    A[1479] = sp[71] * PI0[facet_1][facet_1][0][3];
    A[1480] = sp[71] * PI0[facet_1][facet_1][0][4];
    A[1481] = sp[71] * PI0[facet_1][facet_1][0][5];
    A[1482] = sp[72] * PI1[facet_1][facet_1][0][0];
    A[1483] = sp[72] * PI1[facet_1][facet_1][0][1];
    A[1484] = sp[72] * PI1[facet_1][facet_1][0][2];
    A[1485] = sp[73] * PI1[facet_1][facet_1][0][0];
    A[1486] = sp[73] * PI1[facet_1][facet_1][0][1];
    A[1487] = sp[73] * PI1[facet_1][facet_1][0][2];
    A[1488] = sp[65] * PI0[facet_1][facet_0][1][0];
    A[1489] = sp[65] * PI0[facet_1][facet_0][1][1];
    A[1490] = sp[65] * PI0[facet_1][facet_0][1][2];
    A[1491] = sp[65] * PI0[facet_1][facet_0][1][3];
    A[1492] = sp[65] * PI0[facet_1][facet_0][1][4];
    A[1493] = sp[65] * PI0[facet_1][facet_0][1][5];
    A[1494] = sp[63] * PI0[facet_1][facet_0][1][0];
    A[1495] = sp[63] * PI0[facet_1][facet_0][1][1];
    A[1496] = sp[63] * PI0[facet_1][facet_0][1][2];
    A[1497] = sp[63] * PI0[facet_1][facet_0][1][3];
    A[1498] = sp[63] * PI0[facet_1][facet_0][1][4];
    A[1499] = sp[63] * PI0[facet_1][facet_0][1][5];
    A[1500] = sp[64] * PI0[facet_1][facet_0][1][0];
    A[1501] = sp[64] * PI0[facet_1][facet_0][1][1];
    A[1502] = sp[64] * PI0[facet_1][facet_0][1][2];
    A[1503] = sp[64] * PI0[facet_1][facet_0][1][3];
    A[1504] = sp[64] * PI0[facet_1][facet_0][1][4];
    A[1505] = sp[64] * PI0[facet_1][facet_0][1][5];
    A[1506] = sp[72] * PI1[facet_1][facet_0][1][0];
    A[1507] = sp[72] * PI1[facet_1][facet_0][1][1];
    A[1508] = sp[72] * PI1[facet_1][facet_0][1][2];
    A[1509] = sp[73] * PI1[facet_1][facet_0][1][0];
    A[1510] = sp[73] * PI1[facet_1][facet_0][1][1];
    A[1511] = sp[73] * PI1[facet_1][facet_0][1][2];
    A[1512] = sp[71] * PI0[facet_1][facet_1][1][0];
    A[1513] = sp[71] * PI0[facet_1][facet_1][1][1];
    A[1514] = sp[71] * PI0[facet_1][facet_1][1][2];
    A[1515] = sp[71] * PI0[facet_1][facet_1][1][3];
    A[1516] = sp[71] * PI0[facet_1][facet_1][1][4];
    A[1517] = sp[71] * PI0[facet_1][facet_1][1][5];
    A[1518] = sp[70] * PI0[facet_1][facet_1][1][0];
    A[1519] = sp[70] * PI0[facet_1][facet_1][1][1];
    A[1520] = sp[70] * PI0[facet_1][facet_1][1][2];
    A[1521] = sp[70] * PI0[facet_1][facet_1][1][3];
    A[1522] = sp[70] * PI0[facet_1][facet_1][1][4];
    A[1523] = sp[70] * PI0[facet_1][facet_1][1][5];
    A[1524] = sp[71] * PI0[facet_1][facet_1][1][0];
    A[1525] = sp[71] * PI0[facet_1][facet_1][1][1];
    A[1526] = sp[71] * PI0[facet_1][facet_1][1][2];
    A[1527] = sp[71] * PI0[facet_1][facet_1][1][3];
    A[1528] = sp[71] * PI0[facet_1][facet_1][1][4];
    A[1529] = sp[71] * PI0[facet_1][facet_1][1][5];
    A[1530] = sp[72] * PI1[facet_1][facet_1][1][0];
    A[1531] = sp[72] * PI1[facet_1][facet_1][1][1];
    A[1532] = sp[72] * PI1[facet_1][facet_1][1][2];
    A[1533] = sp[73] * PI1[facet_1][facet_1][1][0];
    A[1534] = sp[73] * PI1[facet_1][facet_1][1][1];
    A[1535] = sp[73] * PI1[facet_1][facet_1][1][2];
    A[1536] = sp[65] * PI0[facet_1][facet_0][2][0];
    A[1537] = sp[65] * PI0[facet_1][facet_0][2][1];
    A[1538] = sp[65] * PI0[facet_1][facet_0][2][2];
    A[1539] = sp[65] * PI0[facet_1][facet_0][2][3];
    A[1540] = sp[65] * PI0[facet_1][facet_0][2][4];
    A[1541] = sp[65] * PI0[facet_1][facet_0][2][5];
    A[1542] = sp[63] * PI0[facet_1][facet_0][2][0];
    A[1543] = sp[63] * PI0[facet_1][facet_0][2][1];
    A[1544] = sp[63] * PI0[facet_1][facet_0][2][2];
    A[1545] = sp[63] * PI0[facet_1][facet_0][2][3];
    A[1546] = sp[63] * PI0[facet_1][facet_0][2][4];
    A[1547] = sp[63] * PI0[facet_1][facet_0][2][5];
    A[1548] = sp[64] * PI0[facet_1][facet_0][2][0];
    A[1549] = sp[64] * PI0[facet_1][facet_0][2][1];
    A[1550] = sp[64] * PI0[facet_1][facet_0][2][2];
    A[1551] = sp[64] * PI0[facet_1][facet_0][2][3];
    A[1552] = sp[64] * PI0[facet_1][facet_0][2][4];
    A[1553] = sp[64] * PI0[facet_1][facet_0][2][5];
    A[1554] = sp[72] * PI1[facet_1][facet_0][2][0];
    A[1555] = sp[72] * PI1[facet_1][facet_0][2][1];
    A[1556] = sp[72] * PI1[facet_1][facet_0][2][2];
    A[1557] = sp[73] * PI1[facet_1][facet_0][2][0];
    A[1558] = sp[73] * PI1[facet_1][facet_0][2][1];
    A[1559] = sp[73] * PI1[facet_1][facet_0][2][2];
    A[1560] = sp[71] * PI0[facet_1][facet_1][2][0];
    A[1561] = sp[71] * PI0[facet_1][facet_1][2][1];
    A[1562] = sp[71] * PI0[facet_1][facet_1][2][2];
    A[1563] = sp[71] * PI0[facet_1][facet_1][2][3];
    A[1564] = sp[71] * PI0[facet_1][facet_1][2][4];
    A[1565] = sp[71] * PI0[facet_1][facet_1][2][5];
    A[1566] = sp[70] * PI0[facet_1][facet_1][2][0];
    A[1567] = sp[70] * PI0[facet_1][facet_1][2][1];
    A[1568] = sp[70] * PI0[facet_1][facet_1][2][2];
    A[1569] = sp[70] * PI0[facet_1][facet_1][2][3];
    A[1570] = sp[70] * PI0[facet_1][facet_1][2][4];
    A[1571] = sp[70] * PI0[facet_1][facet_1][2][5];
    A[1572] = sp[71] * PI0[facet_1][facet_1][2][0];
    A[1573] = sp[71] * PI0[facet_1][facet_1][2][1];
    A[1574] = sp[71] * PI0[facet_1][facet_1][2][2];
    A[1575] = sp[71] * PI0[facet_1][facet_1][2][3];
    A[1576] = sp[71] * PI0[facet_1][facet_1][2][4];
    A[1577] = sp[71] * PI0[facet_1][facet_1][2][5];
    A[1578] = sp[72] * PI1[facet_1][facet_1][2][0];
    A[1579] = sp[72] * PI1[facet_1][facet_1][2][1];
    A[1580] = sp[72] * PI1[facet_1][facet_1][2][2];
    A[1581] = sp[73] * PI1[facet_1][facet_1][2][0];
    A[1582] = sp[73] * PI1[facet_1][facet_1][2][1];
    A[1583] = sp[73] * PI1[facet_1][facet_1][2][2];
    A[1584] = sp[65] * PI0[facet_1][facet_0][3][0];
    A[1585] = sp[65] * PI0[facet_1][facet_0][3][1];
    A[1586] = sp[65] * PI0[facet_1][facet_0][3][2];
    A[1587] = sp[65] * PI0[facet_1][facet_0][3][3];
    A[1588] = sp[65] * PI0[facet_1][facet_0][3][4];
    A[1589] = sp[65] * PI0[facet_1][facet_0][3][5];
    A[1590] = sp[63] * PI0[facet_1][facet_0][3][0];
    A[1591] = sp[63] * PI0[facet_1][facet_0][3][1];
    A[1592] = sp[63] * PI0[facet_1][facet_0][3][2];
    A[1593] = sp[63] * PI0[facet_1][facet_0][3][3];
    A[1594] = sp[63] * PI0[facet_1][facet_0][3][4];
    A[1595] = sp[63] * PI0[facet_1][facet_0][3][5];
    A[1596] = sp[64] * PI0[facet_1][facet_0][3][0];
    A[1597] = sp[64] * PI0[facet_1][facet_0][3][1];
    A[1598] = sp[64] * PI0[facet_1][facet_0][3][2];
    A[1599] = sp[64] * PI0[facet_1][facet_0][3][3];
    A[1600] = sp[64] * PI0[facet_1][facet_0][3][4];
    A[1601] = sp[64] * PI0[facet_1][facet_0][3][5];
    A[1602] = sp[72] * PI1[facet_1][facet_0][3][0];
    A[1603] = sp[72] * PI1[facet_1][facet_0][3][1];
    A[1604] = sp[72] * PI1[facet_1][facet_0][3][2];
    A[1605] = sp[73] * PI1[facet_1][facet_0][3][0];
    A[1606] = sp[73] * PI1[facet_1][facet_0][3][1];
    A[1607] = sp[73] * PI1[facet_1][facet_0][3][2];
    A[1608] = sp[71] * PI0[facet_1][facet_1][3][0];
    A[1609] = sp[71] * PI0[facet_1][facet_1][3][1];
    A[1610] = sp[71] * PI0[facet_1][facet_1][3][2];
    A[1611] = sp[71] * PI0[facet_1][facet_1][3][3];
    A[1612] = sp[71] * PI0[facet_1][facet_1][3][4];
    A[1613] = sp[71] * PI0[facet_1][facet_1][3][5];
    A[1614] = sp[70] * PI0[facet_1][facet_1][3][0];
    A[1615] = sp[70] * PI0[facet_1][facet_1][3][1];
    A[1616] = sp[70] * PI0[facet_1][facet_1][3][2];
    A[1617] = sp[70] * PI0[facet_1][facet_1][3][3];
    A[1618] = sp[70] * PI0[facet_1][facet_1][3][4];
    A[1619] = sp[70] * PI0[facet_1][facet_1][3][5];
    A[1620] = sp[71] * PI0[facet_1][facet_1][3][0];
    A[1621] = sp[71] * PI0[facet_1][facet_1][3][1];
    A[1622] = sp[71] * PI0[facet_1][facet_1][3][2];
    A[1623] = sp[71] * PI0[facet_1][facet_1][3][3];
    A[1624] = sp[71] * PI0[facet_1][facet_1][3][4];
    A[1625] = sp[71] * PI0[facet_1][facet_1][3][5];
    A[1626] = sp[72] * PI1[facet_1][facet_1][3][0];
    A[1627] = sp[72] * PI1[facet_1][facet_1][3][1];
    A[1628] = sp[72] * PI1[facet_1][facet_1][3][2];
    A[1629] = sp[73] * PI1[facet_1][facet_1][3][0];
    A[1630] = sp[73] * PI1[facet_1][facet_1][3][1];
    A[1631] = sp[73] * PI1[facet_1][facet_1][3][2];
    A[1632] = sp[65] * PI0[facet_1][facet_0][4][0];
    A[1633] = sp[65] * PI0[facet_1][facet_0][4][1];
    A[1634] = sp[65] * PI0[facet_1][facet_0][4][2];
    A[1635] = sp[65] * PI0[facet_1][facet_0][4][3];
    A[1636] = sp[65] * PI0[facet_1][facet_0][4][4];
    A[1637] = sp[65] * PI0[facet_1][facet_0][4][5];
    A[1638] = sp[63] * PI0[facet_1][facet_0][4][0];
    A[1639] = sp[63] * PI0[facet_1][facet_0][4][1];
    A[1640] = sp[63] * PI0[facet_1][facet_0][4][2];
    A[1641] = sp[63] * PI0[facet_1][facet_0][4][3];
    A[1642] = sp[63] * PI0[facet_1][facet_0][4][4];
    A[1643] = sp[63] * PI0[facet_1][facet_0][4][5];
    A[1644] = sp[64] * PI0[facet_1][facet_0][4][0];
    A[1645] = sp[64] * PI0[facet_1][facet_0][4][1];
    A[1646] = sp[64] * PI0[facet_1][facet_0][4][2];
    A[1647] = sp[64] * PI0[facet_1][facet_0][4][3];
    A[1648] = sp[64] * PI0[facet_1][facet_0][4][4];
    A[1649] = sp[64] * PI0[facet_1][facet_0][4][5];
    A[1650] = sp[72] * PI1[facet_1][facet_0][4][0];
    A[1651] = sp[72] * PI1[facet_1][facet_0][4][1];
    A[1652] = sp[72] * PI1[facet_1][facet_0][4][2];
    A[1653] = sp[73] * PI1[facet_1][facet_0][4][0];
    A[1654] = sp[73] * PI1[facet_1][facet_0][4][1];
    A[1655] = sp[73] * PI1[facet_1][facet_0][4][2];
    A[1656] = sp[71] * PI0[facet_1][facet_1][4][0];
    A[1657] = sp[71] * PI0[facet_1][facet_1][4][1];
    A[1658] = sp[71] * PI0[facet_1][facet_1][4][2];
    A[1659] = sp[71] * PI0[facet_1][facet_1][4][3];
    A[1660] = sp[71] * PI0[facet_1][facet_1][4][4];
    A[1661] = sp[71] * PI0[facet_1][facet_1][4][5];
    A[1662] = sp[70] * PI0[facet_1][facet_1][4][0];
    A[1663] = sp[70] * PI0[facet_1][facet_1][4][1];
    A[1664] = sp[70] * PI0[facet_1][facet_1][4][2];
    A[1665] = sp[70] * PI0[facet_1][facet_1][4][3];
    A[1666] = sp[70] * PI0[facet_1][facet_1][4][4];
    A[1667] = sp[70] * PI0[facet_1][facet_1][4][5];
    A[1668] = sp[71] * PI0[facet_1][facet_1][4][0];
    A[1669] = sp[71] * PI0[facet_1][facet_1][4][1];
    A[1670] = sp[71] * PI0[facet_1][facet_1][4][2];
    A[1671] = sp[71] * PI0[facet_1][facet_1][4][3];
    A[1672] = sp[71] * PI0[facet_1][facet_1][4][4];
    A[1673] = sp[71] * PI0[facet_1][facet_1][4][5];
    A[1674] = sp[72] * PI1[facet_1][facet_1][4][0];
    A[1675] = sp[72] * PI1[facet_1][facet_1][4][1];
    A[1676] = sp[72] * PI1[facet_1][facet_1][4][2];
    A[1677] = sp[73] * PI1[facet_1][facet_1][4][0];
    A[1678] = sp[73] * PI1[facet_1][facet_1][4][1];
    A[1679] = sp[73] * PI1[facet_1][facet_1][4][2];
    A[1680] = sp[65] * PI0[facet_1][facet_0][5][0];
    A[1681] = sp[65] * PI0[facet_1][facet_0][5][1];
    A[1682] = sp[65] * PI0[facet_1][facet_0][5][2];
    A[1683] = sp[65] * PI0[facet_1][facet_0][5][3];
    A[1684] = sp[65] * PI0[facet_1][facet_0][5][4];
    A[1685] = sp[65] * PI0[facet_1][facet_0][5][5];
    A[1686] = sp[63] * PI0[facet_1][facet_0][5][0];
    A[1687] = sp[63] * PI0[facet_1][facet_0][5][1];
    A[1688] = sp[63] * PI0[facet_1][facet_0][5][2];
    A[1689] = sp[63] * PI0[facet_1][facet_0][5][3];
    A[1690] = sp[63] * PI0[facet_1][facet_0][5][4];
    A[1691] = sp[63] * PI0[facet_1][facet_0][5][5];
    A[1692] = sp[64] * PI0[facet_1][facet_0][5][0];
    A[1693] = sp[64] * PI0[facet_1][facet_0][5][1];
    A[1694] = sp[64] * PI0[facet_1][facet_0][5][2];
    A[1695] = sp[64] * PI0[facet_1][facet_0][5][3];
    A[1696] = sp[64] * PI0[facet_1][facet_0][5][4];
    A[1697] = sp[64] * PI0[facet_1][facet_0][5][5];
    A[1698] = sp[72] * PI1[facet_1][facet_0][5][0];
    A[1699] = sp[72] * PI1[facet_1][facet_0][5][1];
    A[1700] = sp[72] * PI1[facet_1][facet_0][5][2];
    A[1701] = sp[73] * PI1[facet_1][facet_0][5][0];
    A[1702] = sp[73] * PI1[facet_1][facet_0][5][1];
    A[1703] = sp[73] * PI1[facet_1][facet_0][5][2];
    A[1704] = sp[71] * PI0[facet_1][facet_1][5][0];
    A[1705] = sp[71] * PI0[facet_1][facet_1][5][1];
    A[1706] = sp[71] * PI0[facet_1][facet_1][5][2];
    A[1707] = sp[71] * PI0[facet_1][facet_1][5][3];
    A[1708] = sp[71] * PI0[facet_1][facet_1][5][4];
    A[1709] = sp[71] * PI0[facet_1][facet_1][5][5];
    A[1710] = sp[70] * PI0[facet_1][facet_1][5][0];
    A[1711] = sp[70] * PI0[facet_1][facet_1][5][1];
    A[1712] = sp[70] * PI0[facet_1][facet_1][5][2];
    A[1713] = sp[70] * PI0[facet_1][facet_1][5][3];
    A[1714] = sp[70] * PI0[facet_1][facet_1][5][4];
    A[1715] = sp[70] * PI0[facet_1][facet_1][5][5];
    A[1716] = sp[71] * PI0[facet_1][facet_1][5][0];
    A[1717] = sp[71] * PI0[facet_1][facet_1][5][1];
    A[1718] = sp[71] * PI0[facet_1][facet_1][5][2];
    A[1719] = sp[71] * PI0[facet_1][facet_1][5][3];
    A[1720] = sp[71] * PI0[facet_1][facet_1][5][4];
    A[1721] = sp[71] * PI0[facet_1][facet_1][5][5];
    A[1722] = sp[72] * PI1[facet_1][facet_1][5][0];
    A[1723] = sp[72] * PI1[facet_1][facet_1][5][1];
    A[1724] = sp[72] * PI1[facet_1][facet_1][5][2];
    A[1725] = sp[73] * PI1[facet_1][facet_1][5][0];
    A[1726] = sp[73] * PI1[facet_1][facet_1][5][1];
    A[1727] = sp[73] * PI1[facet_1][facet_1][5][2];
    std::fill(A + 1728, A + 1734, 0.0);
    A[1734] = sp[65] * PI0[facet_1][facet_0][0][0];
    A[1735] = sp[65] * PI0[facet_1][facet_0][0][1];
    A[1736] = sp[65] * PI0[facet_1][facet_0][0][2];
    A[1737] = sp[65] * PI0[facet_1][facet_0][0][3];
    A[1738] = sp[65] * PI0[facet_1][facet_0][0][4];
    A[1739] = sp[65] * PI0[facet_1][facet_0][0][5];
    A[1740] = sp[80] * PI0[facet_1][facet_0][0][0];
    A[1741] = sp[80] * PI0[facet_1][facet_0][0][1];
    A[1742] = sp[80] * PI0[facet_1][facet_0][0][2];
    A[1743] = sp[80] * PI0[facet_1][facet_0][0][3];
    A[1744] = sp[80] * PI0[facet_1][facet_0][0][4];
    A[1745] = sp[80] * PI0[facet_1][facet_0][0][5];
    std::fill(A + 1746, A + 1749, 0.0);
    A[1749] = sp[72] * PI1[facet_1][facet_0][0][0];
    A[1750] = sp[72] * PI1[facet_1][facet_0][0][1];
    A[1751] = sp[72] * PI1[facet_1][facet_0][0][2];
    std::fill(A + 1752, A + 1758, 0.0);
    A[1758] = sp[71] * PI0[facet_1][facet_1][0][0];
    A[1759] = sp[71] * PI0[facet_1][facet_1][0][1];
    A[1760] = sp[71] * PI0[facet_1][facet_1][0][2];
    A[1761] = sp[71] * PI0[facet_1][facet_1][0][3];
    A[1762] = sp[71] * PI0[facet_1][facet_1][0][4];
    A[1763] = sp[71] * PI0[facet_1][facet_1][0][5];
    A[1764] = sp[81] * PI0[facet_1][facet_1][0][0];
    A[1765] = sp[81] * PI0[facet_1][facet_1][0][1];
    A[1766] = sp[81] * PI0[facet_1][facet_1][0][2];
    A[1767] = sp[81] * PI0[facet_1][facet_1][0][3];
    A[1768] = sp[81] * PI0[facet_1][facet_1][0][4];
    A[1769] = sp[81] * PI0[facet_1][facet_1][0][5];
    std::fill(A + 1770, A + 1773, 0.0);
    A[1773] = sp[72] * PI1[facet_1][facet_1][0][0];
    A[1774] = sp[72] * PI1[facet_1][facet_1][0][1];
    A[1775] = sp[72] * PI1[facet_1][facet_1][0][2];
    std::fill(A + 1776, A + 1782, 0.0);
    A[1782] = sp[65] * PI0[facet_1][facet_0][1][0];
    A[1783] = sp[65] * PI0[facet_1][facet_0][1][1];
    A[1784] = sp[65] * PI0[facet_1][facet_0][1][2];
    A[1785] = sp[65] * PI0[facet_1][facet_0][1][3];
    A[1786] = sp[65] * PI0[facet_1][facet_0][1][4];
    A[1787] = sp[65] * PI0[facet_1][facet_0][1][5];
    A[1788] = sp[80] * PI0[facet_1][facet_0][1][0];
    A[1789] = sp[80] * PI0[facet_1][facet_0][1][1];
    A[1790] = sp[80] * PI0[facet_1][facet_0][1][2];
    A[1791] = sp[80] * PI0[facet_1][facet_0][1][3];
    A[1792] = sp[80] * PI0[facet_1][facet_0][1][4];
    A[1793] = sp[80] * PI0[facet_1][facet_0][1][5];
    std::fill(A + 1794, A + 1797, 0.0);
    A[1797] = sp[72] * PI1[facet_1][facet_0][1][0];
    A[1798] = sp[72] * PI1[facet_1][facet_0][1][1];
    A[1799] = sp[72] * PI1[facet_1][facet_0][1][2];
    std::fill(A + 1800, A + 1806, 0.0);
    A[1806] = sp[71] * PI0[facet_1][facet_1][1][0];
    A[1807] = sp[71] * PI0[facet_1][facet_1][1][1];
    A[1808] = sp[71] * PI0[facet_1][facet_1][1][2];
    A[1809] = sp[71] * PI0[facet_1][facet_1][1][3];
    A[1810] = sp[71] * PI0[facet_1][facet_1][1][4];
    A[1811] = sp[71] * PI0[facet_1][facet_1][1][5];
    A[1812] = sp[81] * PI0[facet_1][facet_1][1][0];
    A[1813] = sp[81] * PI0[facet_1][facet_1][1][1];
    A[1814] = sp[81] * PI0[facet_1][facet_1][1][2];
    A[1815] = sp[81] * PI0[facet_1][facet_1][1][3];
    A[1816] = sp[81] * PI0[facet_1][facet_1][1][4];
    A[1817] = sp[81] * PI0[facet_1][facet_1][1][5];
    std::fill(A + 1818, A + 1821, 0.0);
    A[1821] = sp[72] * PI1[facet_1][facet_1][1][0];
    A[1822] = sp[72] * PI1[facet_1][facet_1][1][1];
    A[1823] = sp[72] * PI1[facet_1][facet_1][1][2];
    std::fill(A + 1824, A + 1830, 0.0);
    A[1830] = sp[65] * PI0[facet_1][facet_0][2][0];
    A[1831] = sp[65] * PI0[facet_1][facet_0][2][1];
    A[1832] = sp[65] * PI0[facet_1][facet_0][2][2];
    A[1833] = sp[65] * PI0[facet_1][facet_0][2][3];
    A[1834] = sp[65] * PI0[facet_1][facet_0][2][4];
    A[1835] = sp[65] * PI0[facet_1][facet_0][2][5];
    A[1836] = sp[80] * PI0[facet_1][facet_0][2][0];
    A[1837] = sp[80] * PI0[facet_1][facet_0][2][1];
    A[1838] = sp[80] * PI0[facet_1][facet_0][2][2];
    A[1839] = sp[80] * PI0[facet_1][facet_0][2][3];
    A[1840] = sp[80] * PI0[facet_1][facet_0][2][4];
    A[1841] = sp[80] * PI0[facet_1][facet_0][2][5];
    std::fill(A + 1842, A + 1845, 0.0);
    A[1845] = sp[72] * PI1[facet_1][facet_0][2][0];
    A[1846] = sp[72] * PI1[facet_1][facet_0][2][1];
    A[1847] = sp[72] * PI1[facet_1][facet_0][2][2];
    std::fill(A + 1848, A + 1854, 0.0);
    A[1854] = sp[71] * PI0[facet_1][facet_1][2][0];
    A[1855] = sp[71] * PI0[facet_1][facet_1][2][1];
    A[1856] = sp[71] * PI0[facet_1][facet_1][2][2];
    A[1857] = sp[71] * PI0[facet_1][facet_1][2][3];
    A[1858] = sp[71] * PI0[facet_1][facet_1][2][4];
    A[1859] = sp[71] * PI0[facet_1][facet_1][2][5];
    A[1860] = sp[81] * PI0[facet_1][facet_1][2][0];
    A[1861] = sp[81] * PI0[facet_1][facet_1][2][1];
    A[1862] = sp[81] * PI0[facet_1][facet_1][2][2];
    A[1863] = sp[81] * PI0[facet_1][facet_1][2][3];
    A[1864] = sp[81] * PI0[facet_1][facet_1][2][4];
    A[1865] = sp[81] * PI0[facet_1][facet_1][2][5];
    std::fill(A + 1866, A + 1869, 0.0);
    A[1869] = sp[72] * PI1[facet_1][facet_1][2][0];
    A[1870] = sp[72] * PI1[facet_1][facet_1][2][1];
    A[1871] = sp[72] * PI1[facet_1][facet_1][2][2];
    std::fill(A + 1872, A + 1878, 0.0);
    A[1878] = sp[65] * PI0[facet_1][facet_0][3][0];
    A[1879] = sp[65] * PI0[facet_1][facet_0][3][1];
    A[1880] = sp[65] * PI0[facet_1][facet_0][3][2];
    A[1881] = sp[65] * PI0[facet_1][facet_0][3][3];
    A[1882] = sp[65] * PI0[facet_1][facet_0][3][4];
    A[1883] = sp[65] * PI0[facet_1][facet_0][3][5];
    A[1884] = sp[80] * PI0[facet_1][facet_0][3][0];
    A[1885] = sp[80] * PI0[facet_1][facet_0][3][1];
    A[1886] = sp[80] * PI0[facet_1][facet_0][3][2];
    A[1887] = sp[80] * PI0[facet_1][facet_0][3][3];
    A[1888] = sp[80] * PI0[facet_1][facet_0][3][4];
    A[1889] = sp[80] * PI0[facet_1][facet_0][3][5];
    std::fill(A + 1890, A + 1893, 0.0);
    A[1893] = sp[72] * PI1[facet_1][facet_0][3][0];
    A[1894] = sp[72] * PI1[facet_1][facet_0][3][1];
    A[1895] = sp[72] * PI1[facet_1][facet_0][3][2];
    std::fill(A + 1896, A + 1902, 0.0);
    A[1902] = sp[71] * PI0[facet_1][facet_1][3][0];
    A[1903] = sp[71] * PI0[facet_1][facet_1][3][1];
    A[1904] = sp[71] * PI0[facet_1][facet_1][3][2];
    A[1905] = sp[71] * PI0[facet_1][facet_1][3][3];
    A[1906] = sp[71] * PI0[facet_1][facet_1][3][4];
    A[1907] = sp[71] * PI0[facet_1][facet_1][3][5];
    A[1908] = sp[81] * PI0[facet_1][facet_1][3][0];
    A[1909] = sp[81] * PI0[facet_1][facet_1][3][1];
    A[1910] = sp[81] * PI0[facet_1][facet_1][3][2];
    A[1911] = sp[81] * PI0[facet_1][facet_1][3][3];
    A[1912] = sp[81] * PI0[facet_1][facet_1][3][4];
    A[1913] = sp[81] * PI0[facet_1][facet_1][3][5];
    std::fill(A + 1914, A + 1917, 0.0);
    A[1917] = sp[72] * PI1[facet_1][facet_1][3][0];
    A[1918] = sp[72] * PI1[facet_1][facet_1][3][1];
    A[1919] = sp[72] * PI1[facet_1][facet_1][3][2];
    std::fill(A + 1920, A + 1926, 0.0);
    A[1926] = sp[65] * PI0[facet_1][facet_0][4][0];
    A[1927] = sp[65] * PI0[facet_1][facet_0][4][1];
    A[1928] = sp[65] * PI0[facet_1][facet_0][4][2];
    A[1929] = sp[65] * PI0[facet_1][facet_0][4][3];
    A[1930] = sp[65] * PI0[facet_1][facet_0][4][4];
    A[1931] = sp[65] * PI0[facet_1][facet_0][4][5];
    A[1932] = sp[80] * PI0[facet_1][facet_0][4][0];
    A[1933] = sp[80] * PI0[facet_1][facet_0][4][1];
    A[1934] = sp[80] * PI0[facet_1][facet_0][4][2];
    A[1935] = sp[80] * PI0[facet_1][facet_0][4][3];
    A[1936] = sp[80] * PI0[facet_1][facet_0][4][4];
    A[1937] = sp[80] * PI0[facet_1][facet_0][4][5];
    std::fill(A + 1938, A + 1941, 0.0);
    A[1941] = sp[72] * PI1[facet_1][facet_0][4][0];
    A[1942] = sp[72] * PI1[facet_1][facet_0][4][1];
    A[1943] = sp[72] * PI1[facet_1][facet_0][4][2];
    std::fill(A + 1944, A + 1950, 0.0);
    A[1950] = sp[71] * PI0[facet_1][facet_1][4][0];
    A[1951] = sp[71] * PI0[facet_1][facet_1][4][1];
    A[1952] = sp[71] * PI0[facet_1][facet_1][4][2];
    A[1953] = sp[71] * PI0[facet_1][facet_1][4][3];
    A[1954] = sp[71] * PI0[facet_1][facet_1][4][4];
    A[1955] = sp[71] * PI0[facet_1][facet_1][4][5];
    A[1956] = sp[81] * PI0[facet_1][facet_1][4][0];
    A[1957] = sp[81] * PI0[facet_1][facet_1][4][1];
    A[1958] = sp[81] * PI0[facet_1][facet_1][4][2];
    A[1959] = sp[81] * PI0[facet_1][facet_1][4][3];
    A[1960] = sp[81] * PI0[facet_1][facet_1][4][4];
    A[1961] = sp[81] * PI0[facet_1][facet_1][4][5];
    std::fill(A + 1962, A + 1965, 0.0);
    A[1965] = sp[72] * PI1[facet_1][facet_1][4][0];
    A[1966] = sp[72] * PI1[facet_1][facet_1][4][1];
    A[1967] = sp[72] * PI1[facet_1][facet_1][4][2];
    std::fill(A + 1968, A + 1974, 0.0);
    A[1974] = sp[65] * PI0[facet_1][facet_0][5][0];
    A[1975] = sp[65] * PI0[facet_1][facet_0][5][1];
    A[1976] = sp[65] * PI0[facet_1][facet_0][5][2];
    A[1977] = sp[65] * PI0[facet_1][facet_0][5][3];
    A[1978] = sp[65] * PI0[facet_1][facet_0][5][4];
    A[1979] = sp[65] * PI0[facet_1][facet_0][5][5];
    A[1980] = sp[80] * PI0[facet_1][facet_0][5][0];
    A[1981] = sp[80] * PI0[facet_1][facet_0][5][1];
    A[1982] = sp[80] * PI0[facet_1][facet_0][5][2];
    A[1983] = sp[80] * PI0[facet_1][facet_0][5][3];
    A[1984] = sp[80] * PI0[facet_1][facet_0][5][4];
    A[1985] = sp[80] * PI0[facet_1][facet_0][5][5];
    std::fill(A + 1986, A + 1989, 0.0);
    A[1989] = sp[72] * PI1[facet_1][facet_0][5][0];
    A[1990] = sp[72] * PI1[facet_1][facet_0][5][1];
    A[1991] = sp[72] * PI1[facet_1][facet_0][5][2];
    std::fill(A + 1992, A + 1998, 0.0);
    A[1998] = sp[71] * PI0[facet_1][facet_1][5][0];
    A[1999] = sp[71] * PI0[facet_1][facet_1][5][1];
    A[2000] = sp[71] * PI0[facet_1][facet_1][5][2];
    A[2001] = sp[71] * PI0[facet_1][facet_1][5][3];
    A[2002] = sp[71] * PI0[facet_1][facet_1][5][4];
    A[2003] = sp[71] * PI0[facet_1][facet_1][5][5];
    A[2004] = sp[81] * PI0[facet_1][facet_1][5][0];
    A[2005] = sp[81] * PI0[facet_1][facet_1][5][1];
    A[2006] = sp[81] * PI0[facet_1][facet_1][5][2];
    A[2007] = sp[81] * PI0[facet_1][facet_1][5][3];
    A[2008] = sp[81] * PI0[facet_1][facet_1][5][4];
    A[2009] = sp[81] * PI0[facet_1][facet_1][5][5];
    std::fill(A + 2010, A + 2013, 0.0);
    A[2013] = sp[72] * PI1[facet_1][facet_1][5][0];
    A[2014] = sp[72] * PI1[facet_1][facet_1][5][1];
    A[2015] = sp[72] * PI1[facet_1][facet_1][5][2];
    A[2016] = sp[76] * PI1[facet_0][facet_1][0][0];
    A[2017] = sp[76] * PI1[facet_0][facet_1][1][0];
    A[2018] = sp[76] * PI1[facet_0][facet_1][2][0];
    A[2019] = sp[76] * PI1[facet_0][facet_1][3][0];
    A[2020] = sp[76] * PI1[facet_0][facet_1][4][0];
    A[2021] = sp[76] * PI1[facet_0][facet_1][5][0];
    A[2022] = sp[75] * PI1[facet_0][facet_1][0][0];
    A[2023] = sp[75] * PI1[facet_0][facet_1][1][0];
    A[2024] = sp[75] * PI1[facet_0][facet_1][2][0];
    A[2025] = sp[75] * PI1[facet_0][facet_1][3][0];
    A[2026] = sp[75] * PI1[facet_0][facet_1][4][0];
    A[2027] = sp[75] * PI1[facet_0][facet_1][5][0];
    std::fill(A + 2028, A + 2040, 0.0);
    A[2040] = sp[78] * PI1[facet_1][facet_1][0][0];
    A[2041] = sp[78] * PI1[facet_1][facet_1][1][0];
    A[2042] = sp[78] * PI1[facet_1][facet_1][2][0];
    A[2043] = sp[78] * PI1[facet_1][facet_1][3][0];
    A[2044] = sp[78] * PI1[facet_1][facet_1][4][0];
    A[2045] = sp[78] * PI1[facet_1][facet_1][5][0];
    A[2046] = sp[77] * PI1[facet_1][facet_1][0][0];
    A[2047] = sp[77] * PI1[facet_1][facet_1][1][0];
    A[2048] = sp[77] * PI1[facet_1][facet_1][2][0];
    A[2049] = sp[77] * PI1[facet_1][facet_1][3][0];
    A[2050] = sp[77] * PI1[facet_1][facet_1][4][0];
    A[2051] = sp[77] * PI1[facet_1][facet_1][5][0];
    std::fill(A + 2052, A + 2064, 0.0);
    A[2064] = sp[76] * PI1[facet_0][facet_1][0][1];
    A[2065] = sp[76] * PI1[facet_0][facet_1][1][1];
    A[2066] = sp[76] * PI1[facet_0][facet_1][2][1];
    A[2067] = sp[76] * PI1[facet_0][facet_1][3][1];
    A[2068] = sp[76] * PI1[facet_0][facet_1][4][1];
    A[2069] = sp[76] * PI1[facet_0][facet_1][5][1];
    A[2070] = sp[75] * PI1[facet_0][facet_1][0][1];
    A[2071] = sp[75] * PI1[facet_0][facet_1][1][1];
    A[2072] = sp[75] * PI1[facet_0][facet_1][2][1];
    A[2073] = sp[75] * PI1[facet_0][facet_1][3][1];
    A[2074] = sp[75] * PI1[facet_0][facet_1][4][1];
    A[2075] = sp[75] * PI1[facet_0][facet_1][5][1];
    std::fill(A + 2076, A + 2088, 0.0);
    A[2088] = sp[78] * PI1[facet_1][facet_1][0][1];
    A[2089] = sp[78] * PI1[facet_1][facet_1][1][1];
    A[2090] = sp[78] * PI1[facet_1][facet_1][2][1];
    A[2091] = sp[78] * PI1[facet_1][facet_1][3][1];
    A[2092] = sp[78] * PI1[facet_1][facet_1][4][1];
    A[2093] = sp[78] * PI1[facet_1][facet_1][5][1];
    A[2094] = sp[77] * PI1[facet_1][facet_1][0][1];
    A[2095] = sp[77] * PI1[facet_1][facet_1][1][1];
    A[2096] = sp[77] * PI1[facet_1][facet_1][2][1];
    A[2097] = sp[77] * PI1[facet_1][facet_1][3][1];
    A[2098] = sp[77] * PI1[facet_1][facet_1][4][1];
    A[2099] = sp[77] * PI1[facet_1][facet_1][5][1];
    std::fill(A + 2100, A + 2112, 0.0);
    A[2112] = sp[76] * PI1[facet_0][facet_1][0][2];
    A[2113] = sp[76] * PI1[facet_0][facet_1][1][2];
    A[2114] = sp[76] * PI1[facet_0][facet_1][2][2];
    A[2115] = sp[76] * PI1[facet_0][facet_1][3][2];
    A[2116] = sp[76] * PI1[facet_0][facet_1][4][2];
    A[2117] = sp[76] * PI1[facet_0][facet_1][5][2];
    A[2118] = sp[75] * PI1[facet_0][facet_1][0][2];
    A[2119] = sp[75] * PI1[facet_0][facet_1][1][2];
    A[2120] = sp[75] * PI1[facet_0][facet_1][2][2];
    A[2121] = sp[75] * PI1[facet_0][facet_1][3][2];
    A[2122] = sp[75] * PI1[facet_0][facet_1][4][2];
    A[2123] = sp[75] * PI1[facet_0][facet_1][5][2];
    std::fill(A + 2124, A + 2136, 0.0);
    A[2136] = sp[78] * PI1[facet_1][facet_1][0][2];
    A[2137] = sp[78] * PI1[facet_1][facet_1][1][2];
    A[2138] = sp[78] * PI1[facet_1][facet_1][2][2];
    A[2139] = sp[78] * PI1[facet_1][facet_1][3][2];
    A[2140] = sp[78] * PI1[facet_1][facet_1][4][2];
    A[2141] = sp[78] * PI1[facet_1][facet_1][5][2];
    A[2142] = sp[77] * PI1[facet_1][facet_1][0][2];
    A[2143] = sp[77] * PI1[facet_1][facet_1][1][2];
    A[2144] = sp[77] * PI1[facet_1][facet_1][2][2];
    A[2145] = sp[77] * PI1[facet_1][facet_1][3][2];
    A[2146] = sp[77] * PI1[facet_1][facet_1][4][2];
    A[2147] = sp[77] * PI1[facet_1][facet_1][5][2];
    std::fill(A + 2148, A + 2166, 0.0);
    A[2166] = sp[76] * PI1[facet_0][facet_1][0][0];
    A[2167] = sp[76] * PI1[facet_0][facet_1][1][0];
    A[2168] = sp[76] * PI1[facet_0][facet_1][2][0];
    A[2169] = sp[76] * PI1[facet_0][facet_1][3][0];
    A[2170] = sp[76] * PI1[facet_0][facet_1][4][0];
    A[2171] = sp[76] * PI1[facet_0][facet_1][5][0];
    A[2172] = sp[75] * PI1[facet_0][facet_1][0][0];
    A[2173] = sp[75] * PI1[facet_0][facet_1][1][0];
    A[2174] = sp[75] * PI1[facet_0][facet_1][2][0];
    A[2175] = sp[75] * PI1[facet_0][facet_1][3][0];
    A[2176] = sp[75] * PI1[facet_0][facet_1][4][0];
    A[2177] = sp[75] * PI1[facet_0][facet_1][5][0];
    std::fill(A + 2178, A + 2190, 0.0);
    A[2190] = sp[78] * PI1[facet_1][facet_1][0][0];
    A[2191] = sp[78] * PI1[facet_1][facet_1][1][0];
    A[2192] = sp[78] * PI1[facet_1][facet_1][2][0];
    A[2193] = sp[78] * PI1[facet_1][facet_1][3][0];
    A[2194] = sp[78] * PI1[facet_1][facet_1][4][0];
    A[2195] = sp[78] * PI1[facet_1][facet_1][5][0];
    A[2196] = sp[77] * PI1[facet_1][facet_1][0][0];
    A[2197] = sp[77] * PI1[facet_1][facet_1][1][0];
    A[2198] = sp[77] * PI1[facet_1][facet_1][2][0];
    A[2199] = sp[77] * PI1[facet_1][facet_1][3][0];
    A[2200] = sp[77] * PI1[facet_1][facet_1][4][0];
    A[2201] = sp[77] * PI1[facet_1][facet_1][5][0];
    std::fill(A + 2202, A + 2214, 0.0);
    A[2214] = sp[76] * PI1[facet_0][facet_1][0][1];
    A[2215] = sp[76] * PI1[facet_0][facet_1][1][1];
    A[2216] = sp[76] * PI1[facet_0][facet_1][2][1];
    A[2217] = sp[76] * PI1[facet_0][facet_1][3][1];
    A[2218] = sp[76] * PI1[facet_0][facet_1][4][1];
    A[2219] = sp[76] * PI1[facet_0][facet_1][5][1];
    A[2220] = sp[75] * PI1[facet_0][facet_1][0][1];
    A[2221] = sp[75] * PI1[facet_0][facet_1][1][1];
    A[2222] = sp[75] * PI1[facet_0][facet_1][2][1];
    A[2223] = sp[75] * PI1[facet_0][facet_1][3][1];
    A[2224] = sp[75] * PI1[facet_0][facet_1][4][1];
    A[2225] = sp[75] * PI1[facet_0][facet_1][5][1];
    std::fill(A + 2226, A + 2238, 0.0);
    A[2238] = sp[78] * PI1[facet_1][facet_1][0][1];
    A[2239] = sp[78] * PI1[facet_1][facet_1][1][1];
    A[2240] = sp[78] * PI1[facet_1][facet_1][2][1];
    A[2241] = sp[78] * PI1[facet_1][facet_1][3][1];
    A[2242] = sp[78] * PI1[facet_1][facet_1][4][1];
    A[2243] = sp[78] * PI1[facet_1][facet_1][5][1];
    A[2244] = sp[77] * PI1[facet_1][facet_1][0][1];
    A[2245] = sp[77] * PI1[facet_1][facet_1][1][1];
    A[2246] = sp[77] * PI1[facet_1][facet_1][2][1];
    A[2247] = sp[77] * PI1[facet_1][facet_1][3][1];
    A[2248] = sp[77] * PI1[facet_1][facet_1][4][1];
    A[2249] = sp[77] * PI1[facet_1][facet_1][5][1];
    std::fill(A + 2250, A + 2262, 0.0);
    A[2262] = sp[76] * PI1[facet_0][facet_1][0][2];
    A[2263] = sp[76] * PI1[facet_0][facet_1][1][2];
    A[2264] = sp[76] * PI1[facet_0][facet_1][2][2];
    A[2265] = sp[76] * PI1[facet_0][facet_1][3][2];
    A[2266] = sp[76] * PI1[facet_0][facet_1][4][2];
    A[2267] = sp[76] * PI1[facet_0][facet_1][5][2];
    A[2268] = sp[75] * PI1[facet_0][facet_1][0][2];
    A[2269] = sp[75] * PI1[facet_0][facet_1][1][2];
    A[2270] = sp[75] * PI1[facet_0][facet_1][2][2];
    A[2271] = sp[75] * PI1[facet_0][facet_1][3][2];
    A[2272] = sp[75] * PI1[facet_0][facet_1][4][2];
    A[2273] = sp[75] * PI1[facet_0][facet_1][5][2];
    std::fill(A + 2274, A + 2286, 0.0);
    A[2286] = sp[78] * PI1[facet_1][facet_1][0][2];
    A[2287] = sp[78] * PI1[facet_1][facet_1][1][2];
    A[2288] = sp[78] * PI1[facet_1][facet_1][2][2];
    A[2289] = sp[78] * PI1[facet_1][facet_1][3][2];
    A[2290] = sp[78] * PI1[facet_1][facet_1][4][2];
    A[2291] = sp[78] * PI1[facet_1][facet_1][5][2];
    A[2292] = sp[77] * PI1[facet_1][facet_1][0][2];
    A[2293] = sp[77] * PI1[facet_1][facet_1][1][2];
    A[2294] = sp[77] * PI1[facet_1][facet_1][2][2];
    A[2295] = sp[77] * PI1[facet_1][facet_1][3][2];
    A[2296] = sp[77] * PI1[facet_1][facet_1][4][2];
    A[2297] = sp[77] * PI1[facet_1][facet_1][5][2];
    std::fill(A + 2298, A + 2304, 0.0);
}


stiff2d_cell_integral_1_otherwise::stiff2d_cell_integral_1_otherwise() : ufc::cell_integral()
{

}

stiff2d_cell_integral_1_otherwise::~stiff2d_cell_integral_1_otherwise()
{

}

const std::vector<bool> & stiff2d_cell_integral_1_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true});
return enabled;
}

void stiff2d_cell_integral_1_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 3
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 3
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           3
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights6[6] = { 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE10_C3_Q6[1][6][3] =
        { { { 0.1090390090728769, 0.659027622374092, 0.231933368553031 },
            { 0.231933368553031, 0.659027622374092, 0.109039009072877 },
            { 0.109039009072877, 0.231933368553031, 0.6590276223740918 },
            { 0.659027622374092, 0.231933368553031, 0.109039009072877 },
            { 0.231933368553031, 0.109039009072877, 0.6590276223740918 },
            { 0.659027622374092, 0.1090390090728769, 0.231933368553031 } } };
    alignas(32) static const double FE3_C0_D01_Q6[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q6[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q6[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q6[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q6[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q6[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q6[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q6[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q6[0][0][1];
    alignas(32) double sp[4];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = std::abs(sp[2]);
    alignas(32) double BF0[3] = {};
    alignas(32) double BF1[3] = {};
    for (int iq = 0; iq < 6; ++iq)
    {
        // Quadrature loop body setup (num_points=6)
        // Unstructured varying computations for num_points=6
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w0_c0 += w[0][ic] * FE10_C3_Q6[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w0_c1 += w[0][ic + 3] * FE10_C3_Q6[0][iq][ic];
        alignas(32) double sv6[2];
        sv6[0] = w0_c0 * sp[3];
        sv6[1] = w0_c1 * sp[3];
        const double fw0 = sv6[0] * weights6[iq];
        for (int i = 0; i < 3; ++i)
            BF0[i] += fw0 * FE10_C3_Q6[0][iq][i];
        const double fw1 = sv6[1] * weights6[iq];
        for (int i = 0; i < 3; ++i)
            BF1[i] += fw1 * FE10_C3_Q6[0][iq][i];
    }
    std::fill(A, A + 24, 0.0);
    for (int i = 0; i < 3; ++i)
        A[i + 18] += BF0[i];
    for (int i = 0; i < 3; ++i)
        A[i + 21] += BF1[i];
}


stiff2d_form_0::stiff2d_form_0() : ufc::form()
{
    // Do nothing
}

stiff2d_form_0::~stiff2d_form_0()
{
    // Do nothing
}

const char * stiff2d_form_0::signature() const
{
    return "6231d1b5cdc652d63c7c931978643ad857e90b596f694d6ca36dc757c0edc04aff187a9d823265bfce79882eb02bae77abcc3cdea17d52e35cd876817ad24266";
}

std::size_t stiff2d_form_0::rank() const
{
    return 2;
}

std::size_t stiff2d_form_0::num_coefficients() const
{
    return 0;
}

std::size_t stiff2d_form_0::original_coefficient_position(std::size_t i) const
{
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
}

ufc::finite_element * stiff2d_form_0::create_coordinate_finite_element() const
{
    return new stiff2d_finite_element_1();
}

ufc::dofmap * stiff2d_form_0::create_coordinate_dofmap() const
{
    return new stiff2d_dofmap_1();
}

ufc::coordinate_mapping * stiff2d_form_0::create_coordinate_mapping() const
{
    return new stiff2d_coordinate_mapping_1();
}

ufc::finite_element * stiff2d_form_0::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff2d_finite_element_6();
    case 1:
        return new stiff2d_finite_element_6();
    default:
        return nullptr;
    }
}

ufc::dofmap * stiff2d_form_0::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff2d_dofmap_6();
    case 1:
        return new stiff2d_dofmap_6();
    default:
        return nullptr;
    }
}

std::size_t stiff2d_form_0::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t stiff2d_form_0::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t stiff2d_form_0::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t stiff2d_form_0::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t stiff2d_form_0::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t stiff2d_form_0::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t stiff2d_form_0::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t stiff2d_form_0::max_overlap_subdomain_id() const
{
    return 0;
}

bool stiff2d_form_0::has_cell_integrals() const
{
    return true;
}

bool stiff2d_form_0::has_exterior_facet_integrals() const
{
    return false;
}

bool stiff2d_form_0::has_interior_facet_integrals() const
{
    return true;
}

bool stiff2d_form_0::has_vertex_integrals() const
{
    return false;
}

bool stiff2d_form_0::has_custom_integrals() const
{
    return false;
}

bool stiff2d_form_0::has_cutcell_integrals() const
{
    return false;
}

bool stiff2d_form_0::has_interface_integrals() const
{
    return false;
}

bool stiff2d_form_0::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * stiff2d_form_0::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * stiff2d_form_0::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * stiff2d_form_0::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * stiff2d_form_0::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * stiff2d_form_0::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * stiff2d_form_0::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * stiff2d_form_0::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * stiff2d_form_0::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * stiff2d_form_0::create_default_cell_integral() const
{
    return new stiff2d_cell_integral_0_otherwise();
}

ufc::exterior_facet_integral * stiff2d_form_0::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * stiff2d_form_0::create_default_interior_facet_integral() const
{
    return new stiff2d_interior_facet_integral_0_otherwise();
}

ufc::vertex_integral * stiff2d_form_0::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * stiff2d_form_0::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * stiff2d_form_0::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * stiff2d_form_0::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * stiff2d_form_0::create_default_overlap_integral() const
{
    return nullptr;
}


stiff2d_form_1::stiff2d_form_1() : ufc::form()
{
    // Do nothing
}

stiff2d_form_1::~stiff2d_form_1()
{
    // Do nothing
}

const char * stiff2d_form_1::signature() const
{
    return "bf0d58cf9cf27e877b7bd8a7d14a9f1c89255994fe6d32fcff1530995f47855de66b14023e220b5d91f33eddbffbef4d908b2a0fd85abdcc8ccfac940e4e6139";
}

std::size_t stiff2d_form_1::rank() const
{
    return 1;
}

std::size_t stiff2d_form_1::num_coefficients() const
{
    return 1;
}

std::size_t stiff2d_form_1::original_coefficient_position(std::size_t i) const
{
    if (i >= 1)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0};
    return position[i];
}

ufc::finite_element * stiff2d_form_1::create_coordinate_finite_element() const
{
    return new stiff2d_finite_element_1();
}

ufc::dofmap * stiff2d_form_1::create_coordinate_dofmap() const
{
    return new stiff2d_dofmap_1();
}

ufc::coordinate_mapping * stiff2d_form_1::create_coordinate_mapping() const
{
    return new stiff2d_coordinate_mapping_1();
}

ufc::finite_element * stiff2d_form_1::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff2d_finite_element_6();
    case 1:
        return new stiff2d_finite_element_5();
    default:
        return nullptr;
    }
}

ufc::dofmap * stiff2d_form_1::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new stiff2d_dofmap_6();
    case 1:
        return new stiff2d_dofmap_5();
    default:
        return nullptr;
    }
}

std::size_t stiff2d_form_1::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t stiff2d_form_1::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t stiff2d_form_1::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t stiff2d_form_1::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t stiff2d_form_1::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t stiff2d_form_1::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t stiff2d_form_1::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t stiff2d_form_1::max_overlap_subdomain_id() const
{
    return 0;
}

bool stiff2d_form_1::has_cell_integrals() const
{
    return true;
}

bool stiff2d_form_1::has_exterior_facet_integrals() const
{
    return false;
}

bool stiff2d_form_1::has_interior_facet_integrals() const
{
    return false;
}

bool stiff2d_form_1::has_vertex_integrals() const
{
    return false;
}

bool stiff2d_form_1::has_custom_integrals() const
{
    return false;
}

bool stiff2d_form_1::has_cutcell_integrals() const
{
    return false;
}

bool stiff2d_form_1::has_interface_integrals() const
{
    return false;
}

bool stiff2d_form_1::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * stiff2d_form_1::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * stiff2d_form_1::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * stiff2d_form_1::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * stiff2d_form_1::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * stiff2d_form_1::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * stiff2d_form_1::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * stiff2d_form_1::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * stiff2d_form_1::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * stiff2d_form_1::create_default_cell_integral() const
{
    return new stiff2d_cell_integral_1_otherwise();
}

ufc::exterior_facet_integral * stiff2d_form_1::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * stiff2d_form_1::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * stiff2d_form_1::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * stiff2d_form_1::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * stiff2d_form_1::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * stiff2d_form_1::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * stiff2d_form_1::create_default_overlap_integral() const
{
    return nullptr;
}

